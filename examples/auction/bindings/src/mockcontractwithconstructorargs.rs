/**

Generated by the following Solidity interface...
```solidity
interface MockContractWithConstructorArgs {
    constructor(uint256 _x, bool _y, bytes20 _z) payable;

    function x() external view returns (uint256);
    function y() external view returns (bool);
    function z() external view returns (bytes20);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_x",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_y",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "_z",
        "type": "bytes20",
        "internalType": "bytes20"
      }
    ],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "x",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "y",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "z",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes20",
        "internalType": "bytes20"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MockContractWithConstructorArgs {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a060405260405161033d38038061033d8339818101604052810190610025919061013b565b8260808181525050815f5f6101000a81548160ff021916908315150217905550805f60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908360601c021790555050505061018b565b5f5ffd5b5f819050919050565b6100908161007e565b811461009a575f5ffd5b50565b5f815190506100ab81610087565b92915050565b5f8115159050919050565b6100c5816100b1565b81146100cf575f5ffd5b50565b5f815190506100e0816100bc565b92915050565b5f7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b61011a816100e6565b8114610124575f5ffd5b50565b5f8151905061013581610111565b92915050565b5f5f5f606084860312156101525761015161007a565b5b5f61015f8682870161009d565b9350506020610170868287016100d2565b925050604061018186828701610127565b9150509250925092565b60805161019b6101a25f395f609f015261019b5ff3fe608060405234801561000f575f5ffd5b506004361061003f575f3560e01c80630c55699c14610043578063a56dfe4a14610061578063c5d7802e1461007f575b5f5ffd5b61004b61009d565b60405161005891906100fc565b60405180910390f35b6100696100c1565b604051610076919061012f565b60405180910390f35b6100876100d2565b6040516100949190610182565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b5f5f9054906101000a900460ff1681565b5f60019054906101000a900460601b81565b5f819050919050565b6100f6816100e4565b82525050565b5f60208201905061010f5f8301846100ed565b92915050565b5f8115159050919050565b61012981610115565b82525050565b5f6020820190506101425f830184610120565b92915050565b5f7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b61017c81610148565b82525050565b5f6020820190506101955f830184610173565b9291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R`@Qa\x03=8\x03\x80a\x03=\x839\x81\x81\x01`@R\x81\x01\x90a\0%\x91\x90a\x01;V[\x82`\x80\x81\x81RPP\x81__a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80_`\x01a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83``\x1C\x02\x17\x90UPPPPa\x01\x8BV[__\xFD[_\x81\x90P\x91\x90PV[a\0\x90\x81a\0~V[\x81\x14a\0\x9AW__\xFD[PV[_\x81Q\x90Pa\0\xAB\x81a\0\x87V[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\0\xC5\x81a\0\xB1V[\x81\x14a\0\xCFW__\xFD[PV[_\x81Q\x90Pa\0\xE0\x81a\0\xBCV[\x92\x91PPV[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\x82\x16\x90P\x91\x90PV[a\x01\x1A\x81a\0\xE6V[\x81\x14a\x01$W__\xFD[PV[_\x81Q\x90Pa\x015\x81a\x01\x11V[\x92\x91PPV[___``\x84\x86\x03\x12\x15a\x01RWa\x01Qa\0zV[[_a\x01_\x86\x82\x87\x01a\0\x9DV[\x93PP` a\x01p\x86\x82\x87\x01a\0\xD2V[\x92PP`@a\x01\x81\x86\x82\x87\x01a\x01'V[\x91PP\x92P\x92P\x92V[`\x80Qa\x01\x9Ba\x01\xA2_9_`\x9F\x01Ra\x01\x9B_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c\x0CUi\x9C\x14a\0CW\x80c\xA5m\xFEJ\x14a\0aW\x80c\xC5\xD7\x80.\x14a\0\x7FW[__\xFD[a\0Ka\0\x9DV[`@Qa\0X\x91\x90a\0\xFCV[`@Q\x80\x91\x03\x90\xF3[a\0ia\0\xC1V[`@Qa\0v\x91\x90a\x01/V[`@Q\x80\x91\x03\x90\xF3[a\0\x87a\0\xD2V[`@Qa\0\x94\x91\x90a\x01\x82V[`@Q\x80\x91\x03\x90\xF3[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[__\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x81V[_`\x01\x90T\x90a\x01\0\n\x90\x04``\x1B\x81V[_\x81\x90P\x91\x90PV[a\0\xF6\x81a\0\xE4V[\x82RPPV[_` \x82\x01\x90Pa\x01\x0F_\x83\x01\x84a\0\xEDV[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\x01)\x81a\x01\x15V[\x82RPPV[_` \x82\x01\x90Pa\x01B_\x83\x01\x84a\x01 V[\x92\x91PPV[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\x82\x16\x90P\x91\x90PV[a\x01|\x81a\x01HV[\x82RPPV[_` \x82\x01\x90Pa\x01\x95_\x83\x01\x84a\x01sV[\x92\x91PPV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b506004361061003f575f3560e01c80630c55699c14610043578063a56dfe4a14610061578063c5d7802e1461007f575b5f5ffd5b61004b61009d565b60405161005891906100fc565b60405180910390f35b6100696100c1565b604051610076919061012f565b60405180910390f35b6100876100d2565b6040516100949190610182565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b5f5f9054906101000a900460ff1681565b5f60019054906101000a900460601b81565b5f819050919050565b6100f6816100e4565b82525050565b5f60208201905061010f5f8301846100ed565b92915050565b5f8115159050919050565b61012981610115565b82525050565b5f6020820190506101425f830184610120565b92915050565b5f7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b61017c81610148565b82525050565b5f6020820190506101955f830184610173565b9291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c\x0CUi\x9C\x14a\0CW\x80c\xA5m\xFEJ\x14a\0aW\x80c\xC5\xD7\x80.\x14a\0\x7FW[__\xFD[a\0Ka\0\x9DV[`@Qa\0X\x91\x90a\0\xFCV[`@Q\x80\x91\x03\x90\xF3[a\0ia\0\xC1V[`@Qa\0v\x91\x90a\x01/V[`@Q\x80\x91\x03\x90\xF3[a\0\x87a\0\xD2V[`@Qa\0\x94\x91\x90a\x01\x82V[`@Q\x80\x91\x03\x90\xF3[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[__\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x81V[_`\x01\x90T\x90a\x01\0\n\x90\x04``\x1B\x81V[_\x81\x90P\x91\x90PV[a\0\xF6\x81a\0\xE4V[\x82RPPV[_` \x82\x01\x90Pa\x01\x0F_\x83\x01\x84a\0\xEDV[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\x01)\x81a\x01\x15V[\x82RPPV[_` \x82\x01\x90Pa\x01B_\x83\x01\x84a\x01 V[\x92\x91PPV[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\x82\x16\x90P\x91\x90PV[a\x01|\x81a\x01HV[\x82RPPV[_` \x82\x01\x90Pa\x01\x95_\x83\x01\x84a\x01sV[\x92\x91PPV",
    );
    /**Constructor`.
```solidity
constructor(uint256 _x, bool _y, bytes20 _z) payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _x: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _y: bool,
        #[allow(missing_docs)]
        pub _z: alloy::sol_types::private::FixedBytes<20>,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::FixedBytes<20>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                bool,
                alloy::sol_types::private::FixedBytes<20>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._x, value._y, value._z)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _x: tuple.0,
                        _y: tuple.1,
                        _z: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::FixedBytes<20>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._x),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self._y,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        20,
                    > as alloy_sol_types::SolType>::tokenize(&self._z),
                )
            }
        }
    };
    /**Function with signature `x()` and selector `0x0c55699c`.
```solidity
function x() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct xCall {}
    ///Container type for the return parameters of the [`x()`](xCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct xReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<xCall> for UnderlyingRustTuple<'_> {
                fn from(value: xCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for xCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<xReturn> for UnderlyingRustTuple<'_> {
                fn from(value: xReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for xReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for xCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = xReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "x()";
            const SELECTOR: [u8; 4] = [12u8, 85u8, 105u8, 156u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `y()` and selector `0xa56dfe4a`.
```solidity
function y() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct yCall {}
    ///Container type for the return parameters of the [`y()`](yCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct yReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<yCall> for UnderlyingRustTuple<'_> {
                fn from(value: yCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for yCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<yReturn> for UnderlyingRustTuple<'_> {
                fn from(value: yReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for yReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for yCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = yReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "y()";
            const SELECTOR: [u8; 4] = [165u8, 109u8, 254u8, 74u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `z()` and selector `0xc5d7802e`.
```solidity
function z() external view returns (bytes20);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct zCall {}
    ///Container type for the return parameters of the [`z()`](zCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct zReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<20>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<zCall> for UnderlyingRustTuple<'_> {
                fn from(value: zCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for zCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<20>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<20>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<zReturn> for UnderlyingRustTuple<'_> {
                fn from(value: zReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for zReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for zCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = zReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<20>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "z()";
            const SELECTOR: [u8; 4] = [197u8, 215u8, 128u8, 46u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MockContractWithConstructorArgs`](self) function calls.
    pub enum MockContractWithConstructorArgsCalls {
        #[allow(missing_docs)]
        x(xCall),
        #[allow(missing_docs)]
        y(yCall),
        #[allow(missing_docs)]
        z(zCall),
    }
    #[automatically_derived]
    impl MockContractWithConstructorArgsCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [12u8, 85u8, 105u8, 156u8],
            [165u8, 109u8, 254u8, 74u8],
            [197u8, 215u8, 128u8, 46u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockContractWithConstructorArgsCalls {
        const NAME: &'static str = "MockContractWithConstructorArgsCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::x(_) => <xCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::y(_) => <yCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::z(_) => <zCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MockContractWithConstructorArgsCalls>] = &[
                {
                    fn x(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockContractWithConstructorArgsCalls> {
                        <xCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockContractWithConstructorArgsCalls::x)
                    }
                    x
                },
                {
                    fn y(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockContractWithConstructorArgsCalls> {
                        <yCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockContractWithConstructorArgsCalls::y)
                    }
                    y
                },
                {
                    fn z(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockContractWithConstructorArgsCalls> {
                        <zCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockContractWithConstructorArgsCalls::z)
                    }
                    z
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::x(inner) => {
                    <xCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::y(inner) => {
                    <yCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::z(inner) => {
                    <zCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::x(inner) => {
                    <xCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::y(inner) => {
                    <yCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::z(inner) => {
                    <zCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockContractWithConstructorArgs`](self) contract instance.

See the [wrapper's documentation](`MockContractWithConstructorArgsInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockContractWithConstructorArgsInstance<T, P, N> {
        MockContractWithConstructorArgsInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _x: alloy::sol_types::private::primitives::aliases::U256,
        _y: bool,
        _z: alloy::sol_types::private::FixedBytes<20>,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockContractWithConstructorArgsInstance<T, P, N>>,
    > {
        MockContractWithConstructorArgsInstance::<T, P, N>::deploy(provider, _x, _y, _z)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _x: alloy::sol_types::private::primitives::aliases::U256,
        _y: bool,
        _z: alloy::sol_types::private::FixedBytes<20>,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        MockContractWithConstructorArgsInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _x, _y, _z)
    }
    /**A [`MockContractWithConstructorArgs`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockContractWithConstructorArgs`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockContractWithConstructorArgsInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for MockContractWithConstructorArgsInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockContractWithConstructorArgsInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockContractWithConstructorArgsInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MockContractWithConstructorArgs`](self) contract instance.

See the [wrapper's documentation](`MockContractWithConstructorArgsInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _x: alloy::sol_types::private::primitives::aliases::U256,
            _y: bool,
            _z: alloy::sol_types::private::FixedBytes<20>,
        ) -> alloy_contract::Result<MockContractWithConstructorArgsInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _x, _y, _z);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _x: alloy::sol_types::private::primitives::aliases::U256,
            _y: bool,
            _z: alloy::sol_types::private::FixedBytes<20>,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _x, _y, _z },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > MockContractWithConstructorArgsInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> MockContractWithConstructorArgsInstance<T, P, N> {
            MockContractWithConstructorArgsInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockContractWithConstructorArgsInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`x`] function.
        pub fn x(&self) -> alloy_contract::SolCallBuilder<T, &P, xCall, N> {
            self.call_builder(&xCall {})
        }
        ///Creates a new call builder for the [`y`] function.
        pub fn y(&self) -> alloy_contract::SolCallBuilder<T, &P, yCall, N> {
            self.call_builder(&yCall {})
        }
        ///Creates a new call builder for the [`z`] function.
        pub fn z(&self) -> alloy_contract::SolCallBuilder<T, &P, zCall, N> {
            self.call_builder(&zCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockContractWithConstructorArgsInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
