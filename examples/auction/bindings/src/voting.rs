/**

Generated by the following Solidity interface...
```solidity
interface Voting {
    struct VotingInfo {
        uint256 threshold;
        uint256 deadline;
        uint256 nonce;
        address owner;
    }

    event Voted(bytes32 indexed votingId, address indexed voter, uint256 indexed choice);
    event Winner(bytes32 indexed votingId, uint256 indexed choice);

    function register(VotingInfo memory v) external;
    function setWinner(VotingInfo memory v, uint256 choice) external;
    function vote(VotingInfo memory v, uint256 choice) external;
    function votingId(VotingInfo memory v) external pure returns (bytes32);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "register",
    "inputs": [
      {
        "name": "v",
        "type": "tuple",
        "internalType": "struct Voting.VotingInfo",
        "components": [
          {
            "name": "threshold",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "deadline",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "nonce",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "owner",
            "type": "address",
            "internalType": "address"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setWinner",
    "inputs": [
      {
        "name": "v",
        "type": "tuple",
        "internalType": "struct Voting.VotingInfo",
        "components": [
          {
            "name": "threshold",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "deadline",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "nonce",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "owner",
            "type": "address",
            "internalType": "address"
          }
        ]
      },
      {
        "name": "choice",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "vote",
    "inputs": [
      {
        "name": "v",
        "type": "tuple",
        "internalType": "struct Voting.VotingInfo",
        "components": [
          {
            "name": "threshold",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "deadline",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "nonce",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "owner",
            "type": "address",
            "internalType": "address"
          }
        ]
      },
      {
        "name": "choice",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "votingId",
    "inputs": [
      {
        "name": "v",
        "type": "tuple",
        "internalType": "struct Voting.VotingInfo",
        "components": [
          {
            "name": "threshold",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "deadline",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "nonce",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "owner",
            "type": "address",
            "internalType": "address"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "event",
    "name": "Voted",
    "inputs": [
      {
        "name": "votingId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "voter",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "choice",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Winner",
    "inputs": [
      {
        "name": "votingId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "choice",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod Voting {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f5ffd5b50610bb98061001c5f395ff3fe608060405234801561000f575f5ffd5b506004361061004a575f3560e01c8063152d18c41461004e57806339db66591461006a5780638f253c751461009a5780639747a952146100b6575b5f5ffd5b61006860048036038101906100639190610759565b6100d2565b005b610084600480360381019061007f9190610797565b610232565b60405161009191906107da565b60405180910390f35b6100b460048036038101906100af9190610797565b610261565b005b6100d060048036038101906100cb9190610759565b6102c0565b005b61011582602001356040518060400160405280601a81526020017f43616e6e6f7420766f746520616674657220646561646c696e65000000000000815250610385565b5f61011f83610232565b905061016b336040518060400160405280601d81526020017f43616e6e6f7420766f7465206966206e6f7420726567697374657265640000008152505f6103959092919063ffffffff16565b5f610182823360026103bf9092919063ffffffff16565b1461018b575f5ffd5b6101a4813360016002610485909392919063ffffffff16565b5f81836040516020016101b8929190610802565b6040516020818303038152906040528051906020012090506101e7816001600361054b9092919063ffffffff16565b823373ffffffffffffffffffffffffffffffffffffffff16837fe4abc5380fa6939d1dc23b5e90b3a8a0e328f0f1a82a5f42bfb795bf9c71750560405160405180910390a450505050565b5f816040516020016102449190610940565b604051602081830303815290604052805190602001209050919050565b8060600160208101906102749190610959565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102aa575f5ffd5b6102bd335f61057890919063ffffffff16565b50565b6102e68260200135604051806060016040528060248152602001610b65602491396105a0565b5f6102f083610232565b90505f8183604051602001610306929190610802565b60405160208183030381529060405280519060200120905061035181855f0135604051806060016040528060308152602001610b896030913960036105b0909392919063ffffffff16565b82827f269d3a24712436f77df15d63de7d2337a060c9102dee6f46c909fb0fa2d52f0c60405160405180910390a350505050565b610391824210826105d5565b5050565b6103ba835f018373ffffffffffffffffffffffffffffffffffffffff165f1b8361067f565b505050565b5f3273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461042e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042590610a04565b60405180910390fd5b835f015f8481526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490509392505050565b3273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146104f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ea90610a04565b60405180910390fd5b80845f015f8581526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555050505050565b80835f015f8481526020019081526020015f205f82825461056c9190610a4f565b92505081905550505050565b61059c825f018273ffffffffffffffffffffffffffffffffffffffff165f1b6106a2565b5050565b6105ac824211826105d5565b5050565b6105cf82855f015f8681526020019081526020015f20541015826105d5565b50505050565b7f3dcdf63b41c103567d7225976ad9145e866c7a7dccc6c277ea86abbd268fbac95f1c73ffffffffffffffffffffffffffffffffffffffff168260405160200161061f9190610a9c565b60405160208183030381529060405260405161063b9190610b07565b5f60405180830381855afa9150503d805f8114610673576040519150601f19603f3d011682016040523d82523d5f602084013e610678565b606091505b5050505050565b61069d5f845f015f8581526020019081526020015f205411826105d5565b505050565b5f825f015f8381526020019081526020015f2054036106fc57600182600101546106cc9190610a4f565b825f015f8381526020019081526020015f2081905550816001015f8154809291906106f690610b1d565b91905055505b5050565b5f5ffd5b5f5ffd5b5f6080828403121561071d5761071c610704565b5b81905092915050565b5f819050919050565b61073881610726565b8114610742575f5ffd5b50565b5f813590506107538161072f565b92915050565b5f5f60a0838503121561076f5761076e610700565b5b5f61077c85828601610708565b925050608061078d85828601610745565b9150509250929050565b5f608082840312156107ac576107ab610700565b5b5f6107b984828501610708565b91505092915050565b5f819050919050565b6107d4816107c2565b82525050565b5f6020820190506107ed5f8301846107cb565b92915050565b6107fc81610726565b82525050565b5f6040820190506108155f8301856107cb565b61082260208301846107f3565b9392505050565b5f6108376020840184610745565b905092915050565b61084881610726565b82525050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6108778261084e565b9050919050565b6108878161086d565b8114610891575f5ffd5b50565b5f813590506108a28161087e565b92915050565b5f6108b66020840184610894565b905092915050565b6108c78161086d565b82525050565b608082016108dd5f830183610829565b6108e95f85018261083f565b506108f76020830183610829565b610904602085018261083f565b506109126040830183610829565b61091f604085018261083f565b5061092d60608301836108a8565b61093a60608501826108be565b50505050565b5f6080820190506109535f8301846108cd565b92915050565b5f6020828403121561096e5761096d610700565b5b5f61097b84828501610894565b91505092915050565b5f82825260208201905092915050565b7f43616e6e6f7420616363657373204f776e6564436f756e746572206f776e65645f8201527f20627920616e6f74686572206164647265737300000000000000000000000000602082015250565b5f6109ee603383610984565b91506109f982610994565b604082019050919050565b5f6020820190508181035f830152610a1b816109e2565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610a5982610726565b9150610a6483610726565b9250828201905080821115610a7c57610a7b610a22565b5b92915050565b5f8115159050919050565b610a9681610a82565b82525050565b5f602082019050610aaf5f830184610a8d565b92915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f610ae182610ab5565b610aeb8185610abf565b9350610afb818560208601610ac9565b80840191505092915050565b5f610b128284610ad7565b915081905092915050565b5f610b2782610726565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b5957610b58610a22565b5b60018201905091905056fe43616e6e6f74206465636964652077696e6e6572206265666f726520646561646c696e6543616e6e6f74207365742077696e6e65722077697468206c65737320766f746573207468616e207468726573686f6c64
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW__\xFD[Pa\x0B\xB9\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0JW_5`\xE0\x1C\x80c\x15-\x18\xC4\x14a\0NW\x80c9\xDBfY\x14a\0jW\x80c\x8F%<u\x14a\0\x9AW\x80c\x97G\xA9R\x14a\0\xB6W[__\xFD[a\0h`\x04\x806\x03\x81\x01\x90a\0c\x91\x90a\x07YV[a\0\xD2V[\0[a\0\x84`\x04\x806\x03\x81\x01\x90a\0\x7F\x91\x90a\x07\x97V[a\x022V[`@Qa\0\x91\x91\x90a\x07\xDAV[`@Q\x80\x91\x03\x90\xF3[a\0\xB4`\x04\x806\x03\x81\x01\x90a\0\xAF\x91\x90a\x07\x97V[a\x02aV[\0[a\0\xD0`\x04\x806\x03\x81\x01\x90a\0\xCB\x91\x90a\x07YV[a\x02\xC0V[\0[a\x01\x15\x82` \x015`@Q\x80`@\x01`@R\x80`\x1A\x81R` \x01\x7FCannot vote after deadline\0\0\0\0\0\0\x81RPa\x03\x85V[_a\x01\x1F\x83a\x022V[\x90Pa\x01k3`@Q\x80`@\x01`@R\x80`\x1D\x81R` \x01\x7FCannot vote if not registered\0\0\0\x81RP_a\x03\x95\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[_a\x01\x82\x823`\x02a\x03\xBF\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x14a\x01\x8BW__\xFD[a\x01\xA4\x813`\x01`\x02a\x04\x85\x90\x93\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[_\x81\x83`@Q` \x01a\x01\xB8\x92\x91\x90a\x08\x02V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x01\xE7\x81`\x01`\x03a\x05K\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x823s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83\x7F\xE4\xAB\xC58\x0F\xA6\x93\x9D\x1D\xC2;^\x90\xB3\xA8\xA0\xE3(\xF0\xF1\xA8*_B\xBF\xB7\x95\xBF\x9Cqu\x05`@Q`@Q\x80\x91\x03\x90\xA4PPPPV[_\x81`@Q` \x01a\x02D\x91\x90a\t@V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[\x80``\x01` \x81\x01\x90a\x02t\x91\x90a\tYV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x02\xAAW__\xFD[a\x02\xBD3_a\x05x\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[PV[a\x02\xE6\x82` \x015`@Q\x80``\x01`@R\x80`$\x81R` \x01a\x0Be`$\x919a\x05\xA0V[_a\x02\xF0\x83a\x022V[\x90P_\x81\x83`@Q` \x01a\x03\x06\x92\x91\x90a\x08\x02V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x03Q\x81\x85_\x015`@Q\x80``\x01`@R\x80`0\x81R` \x01a\x0B\x89`0\x919`\x03a\x05\xB0\x90\x93\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x82\x82\x7F&\x9D:$q$6\xF7}\xF1]c\xDE}#7\xA0`\xC9\x10-\xEEoF\xC9\t\xFB\x0F\xA2\xD5/\x0C`@Q`@Q\x80\x91\x03\x90\xA3PPPPV[a\x03\x91\x82B\x10\x82a\x05\xD5V[PPV[a\x03\xBA\x83_\x01\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x1B\x83a\x06\x7FV[PPPV[_2s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x04.W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04%\x90a\n\x04V[`@Q\x80\x91\x03\x90\xFD[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ T\x90P\x93\x92PPPV[2s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x04\xF3W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04\xEA\x90a\n\x04V[`@Q\x80\x91\x03\x90\xFD[\x80\x84_\x01_\x85\x81R` \x01\x90\x81R` \x01_ _\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ \x81\x90UPPPPPV[\x80\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x82\x82Ta\x05l\x91\x90a\nOV[\x92PP\x81\x90UPPPPV[a\x05\x9C\x82_\x01\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x1Ba\x06\xA2V[PPV[a\x05\xAC\x82B\x11\x82a\x05\xD5V[PPV[a\x05\xCF\x82\x85_\x01_\x86\x81R` \x01\x90\x81R` \x01_ T\x10\x15\x82a\x05\xD5V[PPPPV[\x7F=\xCD\xF6;A\xC1\x03V}r%\x97j\xD9\x14^\x86lz}\xCC\xC6\xC2w\xEA\x86\xAB\xBD&\x8F\xBA\xC9_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82`@Q` \x01a\x06\x1F\x91\x90a\n\x9CV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Qa\x06;\x91\x90a\x0B\x07V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\x06sW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x06xV[``\x91P[PPPPPV[a\x06\x9D_\x84_\x01_\x85\x81R` \x01\x90\x81R` \x01_ T\x11\x82a\x05\xD5V[PPPV[_\x82_\x01_\x83\x81R` \x01\x90\x81R` \x01_ T\x03a\x06\xFCW`\x01\x82`\x01\x01Ta\x06\xCC\x91\x90a\nOV[\x82_\x01_\x83\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x81`\x01\x01_\x81T\x80\x92\x91\x90a\x06\xF6\x90a\x0B\x1DV[\x91\x90PUP[PPV[__\xFD[__\xFD[_`\x80\x82\x84\x03\x12\x15a\x07\x1DWa\x07\x1Ca\x07\x04V[[\x81\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x078\x81a\x07&V[\x81\x14a\x07BW__\xFD[PV[_\x815\x90Pa\x07S\x81a\x07/V[\x92\x91PPV[__`\xA0\x83\x85\x03\x12\x15a\x07oWa\x07na\x07\0V[[_a\x07|\x85\x82\x86\x01a\x07\x08V[\x92PP`\x80a\x07\x8D\x85\x82\x86\x01a\x07EV[\x91PP\x92P\x92\x90PV[_`\x80\x82\x84\x03\x12\x15a\x07\xACWa\x07\xABa\x07\0V[[_a\x07\xB9\x84\x82\x85\x01a\x07\x08V[\x91PP\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x07\xD4\x81a\x07\xC2V[\x82RPPV[_` \x82\x01\x90Pa\x07\xED_\x83\x01\x84a\x07\xCBV[\x92\x91PPV[a\x07\xFC\x81a\x07&V[\x82RPPV[_`@\x82\x01\x90Pa\x08\x15_\x83\x01\x85a\x07\xCBV[a\x08\"` \x83\x01\x84a\x07\xF3V[\x93\x92PPPV[_a\x087` \x84\x01\x84a\x07EV[\x90P\x92\x91PPV[a\x08H\x81a\x07&V[\x82RPPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x08w\x82a\x08NV[\x90P\x91\x90PV[a\x08\x87\x81a\x08mV[\x81\x14a\x08\x91W__\xFD[PV[_\x815\x90Pa\x08\xA2\x81a\x08~V[\x92\x91PPV[_a\x08\xB6` \x84\x01\x84a\x08\x94V[\x90P\x92\x91PPV[a\x08\xC7\x81a\x08mV[\x82RPPV[`\x80\x82\x01a\x08\xDD_\x83\x01\x83a\x08)V[a\x08\xE9_\x85\x01\x82a\x08?V[Pa\x08\xF7` \x83\x01\x83a\x08)V[a\t\x04` \x85\x01\x82a\x08?V[Pa\t\x12`@\x83\x01\x83a\x08)V[a\t\x1F`@\x85\x01\x82a\x08?V[Pa\t-``\x83\x01\x83a\x08\xA8V[a\t:``\x85\x01\x82a\x08\xBEV[PPPPV[_`\x80\x82\x01\x90Pa\tS_\x83\x01\x84a\x08\xCDV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\tnWa\tma\x07\0V[[_a\t{\x84\x82\x85\x01a\x08\x94V[\x91PP\x92\x91PPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FCannot access OwnedCounter owned_\x82\x01R\x7F by another address\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[_a\t\xEE`3\x83a\t\x84V[\x91Pa\t\xF9\x82a\t\x94V[`@\x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\n\x1B\x81a\t\xE2V[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\nY\x82a\x07&V[\x91Pa\nd\x83a\x07&V[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\n|Wa\n{a\n\"V[[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\n\x96\x81a\n\x82V[\x82RPPV[_` \x82\x01\x90Pa\n\xAF_\x83\x01\x84a\n\x8DV[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\n\xE1\x82a\n\xB5V[a\n\xEB\x81\x85a\n\xBFV[\x93Pa\n\xFB\x81\x85` \x86\x01a\n\xC9V[\x80\x84\x01\x91PP\x92\x91PPV[_a\x0B\x12\x82\x84a\n\xD7V[\x91P\x81\x90P\x92\x91PPV[_a\x0B'\x82a\x07&V[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a\x0BYWa\x0BXa\n\"V[[`\x01\x82\x01\x90P\x91\x90PV\xFECannot decide winner before deadlineCannot set winner with less votes than threshold",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b506004361061004a575f3560e01c8063152d18c41461004e57806339db66591461006a5780638f253c751461009a5780639747a952146100b6575b5f5ffd5b61006860048036038101906100639190610759565b6100d2565b005b610084600480360381019061007f9190610797565b610232565b60405161009191906107da565b60405180910390f35b6100b460048036038101906100af9190610797565b610261565b005b6100d060048036038101906100cb9190610759565b6102c0565b005b61011582602001356040518060400160405280601a81526020017f43616e6e6f7420766f746520616674657220646561646c696e65000000000000815250610385565b5f61011f83610232565b905061016b336040518060400160405280601d81526020017f43616e6e6f7420766f7465206966206e6f7420726567697374657265640000008152505f6103959092919063ffffffff16565b5f610182823360026103bf9092919063ffffffff16565b1461018b575f5ffd5b6101a4813360016002610485909392919063ffffffff16565b5f81836040516020016101b8929190610802565b6040516020818303038152906040528051906020012090506101e7816001600361054b9092919063ffffffff16565b823373ffffffffffffffffffffffffffffffffffffffff16837fe4abc5380fa6939d1dc23b5e90b3a8a0e328f0f1a82a5f42bfb795bf9c71750560405160405180910390a450505050565b5f816040516020016102449190610940565b604051602081830303815290604052805190602001209050919050565b8060600160208101906102749190610959565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102aa575f5ffd5b6102bd335f61057890919063ffffffff16565b50565b6102e68260200135604051806060016040528060248152602001610b65602491396105a0565b5f6102f083610232565b90505f8183604051602001610306929190610802565b60405160208183030381529060405280519060200120905061035181855f0135604051806060016040528060308152602001610b896030913960036105b0909392919063ffffffff16565b82827f269d3a24712436f77df15d63de7d2337a060c9102dee6f46c909fb0fa2d52f0c60405160405180910390a350505050565b610391824210826105d5565b5050565b6103ba835f018373ffffffffffffffffffffffffffffffffffffffff165f1b8361067f565b505050565b5f3273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461042e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042590610a04565b60405180910390fd5b835f015f8481526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490509392505050565b3273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146104f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ea90610a04565b60405180910390fd5b80845f015f8581526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555050505050565b80835f015f8481526020019081526020015f205f82825461056c9190610a4f565b92505081905550505050565b61059c825f018273ffffffffffffffffffffffffffffffffffffffff165f1b6106a2565b5050565b6105ac824211826105d5565b5050565b6105cf82855f015f8681526020019081526020015f20541015826105d5565b50505050565b7f3dcdf63b41c103567d7225976ad9145e866c7a7dccc6c277ea86abbd268fbac95f1c73ffffffffffffffffffffffffffffffffffffffff168260405160200161061f9190610a9c565b60405160208183030381529060405260405161063b9190610b07565b5f60405180830381855afa9150503d805f8114610673576040519150601f19603f3d011682016040523d82523d5f602084013e610678565b606091505b5050505050565b61069d5f845f015f8581526020019081526020015f205411826105d5565b505050565b5f825f015f8381526020019081526020015f2054036106fc57600182600101546106cc9190610a4f565b825f015f8381526020019081526020015f2081905550816001015f8154809291906106f690610b1d565b91905055505b5050565b5f5ffd5b5f5ffd5b5f6080828403121561071d5761071c610704565b5b81905092915050565b5f819050919050565b61073881610726565b8114610742575f5ffd5b50565b5f813590506107538161072f565b92915050565b5f5f60a0838503121561076f5761076e610700565b5b5f61077c85828601610708565b925050608061078d85828601610745565b9150509250929050565b5f608082840312156107ac576107ab610700565b5b5f6107b984828501610708565b91505092915050565b5f819050919050565b6107d4816107c2565b82525050565b5f6020820190506107ed5f8301846107cb565b92915050565b6107fc81610726565b82525050565b5f6040820190506108155f8301856107cb565b61082260208301846107f3565b9392505050565b5f6108376020840184610745565b905092915050565b61084881610726565b82525050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6108778261084e565b9050919050565b6108878161086d565b8114610891575f5ffd5b50565b5f813590506108a28161087e565b92915050565b5f6108b66020840184610894565b905092915050565b6108c78161086d565b82525050565b608082016108dd5f830183610829565b6108e95f85018261083f565b506108f76020830183610829565b610904602085018261083f565b506109126040830183610829565b61091f604085018261083f565b5061092d60608301836108a8565b61093a60608501826108be565b50505050565b5f6080820190506109535f8301846108cd565b92915050565b5f6020828403121561096e5761096d610700565b5b5f61097b84828501610894565b91505092915050565b5f82825260208201905092915050565b7f43616e6e6f7420616363657373204f776e6564436f756e746572206f776e65645f8201527f20627920616e6f74686572206164647265737300000000000000000000000000602082015250565b5f6109ee603383610984565b91506109f982610994565b604082019050919050565b5f6020820190508181035f830152610a1b816109e2565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610a5982610726565b9150610a6483610726565b9250828201905080821115610a7c57610a7b610a22565b5b92915050565b5f8115159050919050565b610a9681610a82565b82525050565b5f602082019050610aaf5f830184610a8d565b92915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f610ae182610ab5565b610aeb8185610abf565b9350610afb818560208601610ac9565b80840191505092915050565b5f610b128284610ad7565b915081905092915050565b5f610b2782610726565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b5957610b58610a22565b5b60018201905091905056fe43616e6e6f74206465636964652077696e6e6572206265666f726520646561646c696e6543616e6e6f74207365742077696e6e65722077697468206c65737320766f746573207468616e207468726573686f6c64
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0JW_5`\xE0\x1C\x80c\x15-\x18\xC4\x14a\0NW\x80c9\xDBfY\x14a\0jW\x80c\x8F%<u\x14a\0\x9AW\x80c\x97G\xA9R\x14a\0\xB6W[__\xFD[a\0h`\x04\x806\x03\x81\x01\x90a\0c\x91\x90a\x07YV[a\0\xD2V[\0[a\0\x84`\x04\x806\x03\x81\x01\x90a\0\x7F\x91\x90a\x07\x97V[a\x022V[`@Qa\0\x91\x91\x90a\x07\xDAV[`@Q\x80\x91\x03\x90\xF3[a\0\xB4`\x04\x806\x03\x81\x01\x90a\0\xAF\x91\x90a\x07\x97V[a\x02aV[\0[a\0\xD0`\x04\x806\x03\x81\x01\x90a\0\xCB\x91\x90a\x07YV[a\x02\xC0V[\0[a\x01\x15\x82` \x015`@Q\x80`@\x01`@R\x80`\x1A\x81R` \x01\x7FCannot vote after deadline\0\0\0\0\0\0\x81RPa\x03\x85V[_a\x01\x1F\x83a\x022V[\x90Pa\x01k3`@Q\x80`@\x01`@R\x80`\x1D\x81R` \x01\x7FCannot vote if not registered\0\0\0\x81RP_a\x03\x95\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[_a\x01\x82\x823`\x02a\x03\xBF\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x14a\x01\x8BW__\xFD[a\x01\xA4\x813`\x01`\x02a\x04\x85\x90\x93\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[_\x81\x83`@Q` \x01a\x01\xB8\x92\x91\x90a\x08\x02V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x01\xE7\x81`\x01`\x03a\x05K\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x823s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83\x7F\xE4\xAB\xC58\x0F\xA6\x93\x9D\x1D\xC2;^\x90\xB3\xA8\xA0\xE3(\xF0\xF1\xA8*_B\xBF\xB7\x95\xBF\x9Cqu\x05`@Q`@Q\x80\x91\x03\x90\xA4PPPPV[_\x81`@Q` \x01a\x02D\x91\x90a\t@V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[\x80``\x01` \x81\x01\x90a\x02t\x91\x90a\tYV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x02\xAAW__\xFD[a\x02\xBD3_a\x05x\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[PV[a\x02\xE6\x82` \x015`@Q\x80``\x01`@R\x80`$\x81R` \x01a\x0Be`$\x919a\x05\xA0V[_a\x02\xF0\x83a\x022V[\x90P_\x81\x83`@Q` \x01a\x03\x06\x92\x91\x90a\x08\x02V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x03Q\x81\x85_\x015`@Q\x80``\x01`@R\x80`0\x81R` \x01a\x0B\x89`0\x919`\x03a\x05\xB0\x90\x93\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x82\x82\x7F&\x9D:$q$6\xF7}\xF1]c\xDE}#7\xA0`\xC9\x10-\xEEoF\xC9\t\xFB\x0F\xA2\xD5/\x0C`@Q`@Q\x80\x91\x03\x90\xA3PPPPV[a\x03\x91\x82B\x10\x82a\x05\xD5V[PPV[a\x03\xBA\x83_\x01\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x1B\x83a\x06\x7FV[PPPV[_2s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x04.W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04%\x90a\n\x04V[`@Q\x80\x91\x03\x90\xFD[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ T\x90P\x93\x92PPPV[2s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x04\xF3W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04\xEA\x90a\n\x04V[`@Q\x80\x91\x03\x90\xFD[\x80\x84_\x01_\x85\x81R` \x01\x90\x81R` \x01_ _\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ \x81\x90UPPPPPV[\x80\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x82\x82Ta\x05l\x91\x90a\nOV[\x92PP\x81\x90UPPPPV[a\x05\x9C\x82_\x01\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x1Ba\x06\xA2V[PPV[a\x05\xAC\x82B\x11\x82a\x05\xD5V[PPV[a\x05\xCF\x82\x85_\x01_\x86\x81R` \x01\x90\x81R` \x01_ T\x10\x15\x82a\x05\xD5V[PPPPV[\x7F=\xCD\xF6;A\xC1\x03V}r%\x97j\xD9\x14^\x86lz}\xCC\xC6\xC2w\xEA\x86\xAB\xBD&\x8F\xBA\xC9_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82`@Q` \x01a\x06\x1F\x91\x90a\n\x9CV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Qa\x06;\x91\x90a\x0B\x07V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\x06sW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x06xV[``\x91P[PPPPPV[a\x06\x9D_\x84_\x01_\x85\x81R` \x01\x90\x81R` \x01_ T\x11\x82a\x05\xD5V[PPPV[_\x82_\x01_\x83\x81R` \x01\x90\x81R` \x01_ T\x03a\x06\xFCW`\x01\x82`\x01\x01Ta\x06\xCC\x91\x90a\nOV[\x82_\x01_\x83\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x81`\x01\x01_\x81T\x80\x92\x91\x90a\x06\xF6\x90a\x0B\x1DV[\x91\x90PUP[PPV[__\xFD[__\xFD[_`\x80\x82\x84\x03\x12\x15a\x07\x1DWa\x07\x1Ca\x07\x04V[[\x81\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x078\x81a\x07&V[\x81\x14a\x07BW__\xFD[PV[_\x815\x90Pa\x07S\x81a\x07/V[\x92\x91PPV[__`\xA0\x83\x85\x03\x12\x15a\x07oWa\x07na\x07\0V[[_a\x07|\x85\x82\x86\x01a\x07\x08V[\x92PP`\x80a\x07\x8D\x85\x82\x86\x01a\x07EV[\x91PP\x92P\x92\x90PV[_`\x80\x82\x84\x03\x12\x15a\x07\xACWa\x07\xABa\x07\0V[[_a\x07\xB9\x84\x82\x85\x01a\x07\x08V[\x91PP\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x07\xD4\x81a\x07\xC2V[\x82RPPV[_` \x82\x01\x90Pa\x07\xED_\x83\x01\x84a\x07\xCBV[\x92\x91PPV[a\x07\xFC\x81a\x07&V[\x82RPPV[_`@\x82\x01\x90Pa\x08\x15_\x83\x01\x85a\x07\xCBV[a\x08\"` \x83\x01\x84a\x07\xF3V[\x93\x92PPPV[_a\x087` \x84\x01\x84a\x07EV[\x90P\x92\x91PPV[a\x08H\x81a\x07&V[\x82RPPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x08w\x82a\x08NV[\x90P\x91\x90PV[a\x08\x87\x81a\x08mV[\x81\x14a\x08\x91W__\xFD[PV[_\x815\x90Pa\x08\xA2\x81a\x08~V[\x92\x91PPV[_a\x08\xB6` \x84\x01\x84a\x08\x94V[\x90P\x92\x91PPV[a\x08\xC7\x81a\x08mV[\x82RPPV[`\x80\x82\x01a\x08\xDD_\x83\x01\x83a\x08)V[a\x08\xE9_\x85\x01\x82a\x08?V[Pa\x08\xF7` \x83\x01\x83a\x08)V[a\t\x04` \x85\x01\x82a\x08?V[Pa\t\x12`@\x83\x01\x83a\x08)V[a\t\x1F`@\x85\x01\x82a\x08?V[Pa\t-``\x83\x01\x83a\x08\xA8V[a\t:``\x85\x01\x82a\x08\xBEV[PPPPV[_`\x80\x82\x01\x90Pa\tS_\x83\x01\x84a\x08\xCDV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\tnWa\tma\x07\0V[[_a\t{\x84\x82\x85\x01a\x08\x94V[\x91PP\x92\x91PPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FCannot access OwnedCounter owned_\x82\x01R\x7F by another address\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[_a\t\xEE`3\x83a\t\x84V[\x91Pa\t\xF9\x82a\t\x94V[`@\x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\n\x1B\x81a\t\xE2V[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\nY\x82a\x07&V[\x91Pa\nd\x83a\x07&V[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\n|Wa\n{a\n\"V[[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\n\x96\x81a\n\x82V[\x82RPPV[_` \x82\x01\x90Pa\n\xAF_\x83\x01\x84a\n\x8DV[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\n\xE1\x82a\n\xB5V[a\n\xEB\x81\x85a\n\xBFV[\x93Pa\n\xFB\x81\x85` \x86\x01a\n\xC9V[\x80\x84\x01\x91PP\x92\x91PPV[_a\x0B\x12\x82\x84a\n\xD7V[\x91P\x81\x90P\x92\x91PPV[_a\x0B'\x82a\x07&V[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a\x0BYWa\x0BXa\n\"V[[`\x01\x82\x01\x90P\x91\x90PV\xFECannot decide winner before deadlineCannot set winner with less votes than threshold",
    );
    /**```solidity
struct VotingInfo { uint256 threshold; uint256 deadline; uint256 nonce; address owner; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct VotingInfo {
        #[allow(missing_docs)]
        pub threshold: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub nonce: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<VotingInfo> for UnderlyingRustTuple<'_> {
            fn from(value: VotingInfo) -> Self {
                (value.threshold, value.deadline, value.nonce, value.owner)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for VotingInfo {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    threshold: tuple.0,
                    deadline: tuple.1,
                    nonce: tuple.2,
                    owner: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for VotingInfo {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for VotingInfo {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.threshold),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.nonce),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for VotingInfo {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for VotingInfo {
            const NAME: &'static str = "VotingInfo";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "VotingInfo(uint256 threshold,uint256 deadline,uint256 nonce,address owner)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.threshold)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.deadline)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.nonce)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.owner,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for VotingInfo {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.threshold,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.deadline,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.nonce)
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.owner,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.threshold,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.deadline,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.nonce,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.owner,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Event with signature `Voted(bytes32,address,uint256)` and selector `0xe4abc5380fa6939d1dc23b5e90b3a8a0e328f0f1a82a5f42bfb795bf9c717505`.
```solidity
event Voted(bytes32 indexed votingId, address indexed voter, uint256 indexed choice);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Voted {
        #[allow(missing_docs)]
        pub votingId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub voter: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub choice: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Voted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "Voted(bytes32,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                228u8,
                171u8,
                197u8,
                56u8,
                15u8,
                166u8,
                147u8,
                157u8,
                29u8,
                194u8,
                59u8,
                94u8,
                144u8,
                179u8,
                168u8,
                160u8,
                227u8,
                40u8,
                240u8,
                241u8,
                168u8,
                42u8,
                95u8,
                66u8,
                191u8,
                183u8,
                149u8,
                191u8,
                156u8,
                113u8,
                117u8,
                5u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    votingId: topics.1,
                    voter: topics.2,
                    choice: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.votingId.clone(),
                    self.voter.clone(),
                    self.choice.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.votingId);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.voter,
                );
                out[3usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.choice);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Voted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Voted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Voted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Winner(bytes32,uint256)` and selector `0x269d3a24712436f77df15d63de7d2337a060c9102dee6f46c909fb0fa2d52f0c`.
```solidity
event Winner(bytes32 indexed votingId, uint256 indexed choice);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Winner {
        #[allow(missing_docs)]
        pub votingId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub choice: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Winner {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "Winner(bytes32,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                38u8,
                157u8,
                58u8,
                36u8,
                113u8,
                36u8,
                54u8,
                247u8,
                125u8,
                241u8,
                93u8,
                99u8,
                222u8,
                125u8,
                35u8,
                55u8,
                160u8,
                96u8,
                201u8,
                16u8,
                45u8,
                238u8,
                111u8,
                70u8,
                201u8,
                9u8,
                251u8,
                15u8,
                162u8,
                213u8,
                47u8,
                12u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    votingId: topics.1,
                    choice: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.votingId.clone(), self.choice.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.votingId);
                out[2usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.choice);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Winner {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Winner> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Winner) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Function with signature `register((uint256,uint256,uint256,address))` and selector `0x8f253c75`.
```solidity
function register(VotingInfo memory v) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct registerCall {
        #[allow(missing_docs)]
        pub v: <VotingInfo as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`register((uint256,uint256,uint256,address))`](registerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct registerReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (VotingInfo,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <VotingInfo as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<registerCall> for UnderlyingRustTuple<'_> {
                fn from(value: registerCall) -> Self {
                    (value.v,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for registerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { v: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<registerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: registerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for registerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for registerCall {
            type Parameters<'a> = (VotingInfo,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = registerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "register((uint256,uint256,uint256,address))";
            const SELECTOR: [u8; 4] = [143u8, 37u8, 60u8, 117u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<VotingInfo as alloy_sol_types::SolType>::tokenize(&self.v),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setWinner((uint256,uint256,uint256,address),uint256)` and selector `0x9747a952`.
```solidity
function setWinner(VotingInfo memory v, uint256 choice) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setWinnerCall {
        #[allow(missing_docs)]
        pub v: <VotingInfo as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub choice: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setWinner((uint256,uint256,uint256,address),uint256)`](setWinnerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setWinnerReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                VotingInfo,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <VotingInfo as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setWinnerCall> for UnderlyingRustTuple<'_> {
                fn from(value: setWinnerCall) -> Self {
                    (value.v, value.choice)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setWinnerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        v: tuple.0,
                        choice: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setWinnerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setWinnerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setWinnerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setWinnerCall {
            type Parameters<'a> = (VotingInfo, alloy::sol_types::sol_data::Uint<256>);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setWinnerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setWinner((uint256,uint256,uint256,address),uint256)";
            const SELECTOR: [u8; 4] = [151u8, 71u8, 169u8, 82u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <VotingInfo as alloy_sol_types::SolType>::tokenize(&self.v),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.choice),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `vote((uint256,uint256,uint256,address),uint256)` and selector `0x152d18c4`.
```solidity
function vote(VotingInfo memory v, uint256 choice) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct voteCall {
        #[allow(missing_docs)]
        pub v: <VotingInfo as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub choice: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`vote((uint256,uint256,uint256,address),uint256)`](voteCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct voteReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                VotingInfo,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <VotingInfo as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<voteCall> for UnderlyingRustTuple<'_> {
                fn from(value: voteCall) -> Self {
                    (value.v, value.choice)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for voteCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        v: tuple.0,
                        choice: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<voteReturn> for UnderlyingRustTuple<'_> {
                fn from(value: voteReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for voteReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for voteCall {
            type Parameters<'a> = (VotingInfo, alloy::sol_types::sol_data::Uint<256>);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = voteReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "vote((uint256,uint256,uint256,address),uint256)";
            const SELECTOR: [u8; 4] = [21u8, 45u8, 24u8, 196u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <VotingInfo as alloy_sol_types::SolType>::tokenize(&self.v),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.choice),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `votingId((uint256,uint256,uint256,address))` and selector `0x39db6659`.
```solidity
function votingId(VotingInfo memory v) external pure returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct votingIdCall {
        #[allow(missing_docs)]
        pub v: <VotingInfo as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`votingId((uint256,uint256,uint256,address))`](votingIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct votingIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (VotingInfo,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <VotingInfo as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<votingIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: votingIdCall) -> Self {
                    (value.v,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for votingIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { v: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<votingIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: votingIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for votingIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for votingIdCall {
            type Parameters<'a> = (VotingInfo,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = votingIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "votingId((uint256,uint256,uint256,address))";
            const SELECTOR: [u8; 4] = [57u8, 219u8, 102u8, 89u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<VotingInfo as alloy_sol_types::SolType>::tokenize(&self.v),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Voting`](self) function calls.
    pub enum VotingCalls {
        #[allow(missing_docs)]
        register(registerCall),
        #[allow(missing_docs)]
        setWinner(setWinnerCall),
        #[allow(missing_docs)]
        vote(voteCall),
        #[allow(missing_docs)]
        votingId(votingIdCall),
    }
    #[automatically_derived]
    impl VotingCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [21u8, 45u8, 24u8, 196u8],
            [57u8, 219u8, 102u8, 89u8],
            [143u8, 37u8, 60u8, 117u8],
            [151u8, 71u8, 169u8, 82u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for VotingCalls {
        const NAME: &'static str = "VotingCalls";
        const MIN_DATA_LENGTH: usize = 128usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::register(_) => <registerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setWinner(_) => {
                    <setWinnerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::vote(_) => <voteCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::votingId(_) => <votingIdCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<VotingCalls>] = &[
                {
                    fn vote(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <voteCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VotingCalls::vote)
                    }
                    vote
                },
                {
                    fn votingId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <votingIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VotingCalls::votingId)
                    }
                    votingId
                },
                {
                    fn register(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <registerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VotingCalls::register)
                    }
                    register
                },
                {
                    fn setWinner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <setWinnerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VotingCalls::setWinner)
                    }
                    setWinner
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::register(inner) => {
                    <registerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setWinner(inner) => {
                    <setWinnerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::vote(inner) => {
                    <voteCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::votingId(inner) => {
                    <votingIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::register(inner) => {
                    <registerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setWinner(inner) => {
                    <setWinnerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::vote(inner) => {
                    <voteCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::votingId(inner) => {
                    <votingIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`Voting`](self) events.
    pub enum VotingEvents {
        #[allow(missing_docs)]
        Voted(Voted),
        #[allow(missing_docs)]
        Winner(Winner),
    }
    #[automatically_derived]
    impl VotingEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                38u8,
                157u8,
                58u8,
                36u8,
                113u8,
                36u8,
                54u8,
                247u8,
                125u8,
                241u8,
                93u8,
                99u8,
                222u8,
                125u8,
                35u8,
                55u8,
                160u8,
                96u8,
                201u8,
                16u8,
                45u8,
                238u8,
                111u8,
                70u8,
                201u8,
                9u8,
                251u8,
                15u8,
                162u8,
                213u8,
                47u8,
                12u8,
            ],
            [
                228u8,
                171u8,
                197u8,
                56u8,
                15u8,
                166u8,
                147u8,
                157u8,
                29u8,
                194u8,
                59u8,
                94u8,
                144u8,
                179u8,
                168u8,
                160u8,
                227u8,
                40u8,
                240u8,
                241u8,
                168u8,
                42u8,
                95u8,
                66u8,
                191u8,
                183u8,
                149u8,
                191u8,
                156u8,
                113u8,
                117u8,
                5u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for VotingEvents {
        const NAME: &'static str = "VotingEvents";
        const COUNT: usize = 2usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<Voted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Voted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Voted)
                }
                Some(<Winner as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Winner as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Winner)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for VotingEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Voted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Winner(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Voted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Winner(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Voting`](self) contract instance.

See the [wrapper's documentation](`VotingInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> VotingInstance<T, P, N> {
        VotingInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<VotingInstance<T, P, N>>,
    > {
        VotingInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        VotingInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Voting`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Voting`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct VotingInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for VotingInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("VotingInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > VotingInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Voting`](self) contract instance.

See the [wrapper's documentation](`VotingInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<VotingInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> VotingInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> VotingInstance<T, P, N> {
            VotingInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > VotingInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`register`] function.
        pub fn register(
            &self,
            v: <VotingInfo as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, registerCall, N> {
            self.call_builder(&registerCall { v })
        }
        ///Creates a new call builder for the [`setWinner`] function.
        pub fn setWinner(
            &self,
            v: <VotingInfo as alloy::sol_types::SolType>::RustType,
            choice: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setWinnerCall, N> {
            self.call_builder(&setWinnerCall { v, choice })
        }
        ///Creates a new call builder for the [`vote`] function.
        pub fn vote(
            &self,
            v: <VotingInfo as alloy::sol_types::SolType>::RustType,
            choice: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, voteCall, N> {
            self.call_builder(&voteCall { v, choice })
        }
        ///Creates a new call builder for the [`votingId`] function.
        pub fn votingId(
            &self,
            v: <VotingInfo as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, votingIdCall, N> {
            self.call_builder(&votingIdCall { v })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > VotingInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`Voted`] event.
        pub fn Voted_filter(&self) -> alloy_contract::Event<T, &P, Voted, N> {
            self.event_filter::<Voted>()
        }
        ///Creates a new event filter for the [`Winner`] event.
        pub fn Winner_filter(&self) -> alloy_contract::Event<T, &P, Winner, N> {
            self.event_filter::<Winner>()
        }
    }
}
