/**

Generated by the following Solidity interface...
```solidity
interface EthereumERC20Balance {
    function getUSDCBalanceEthereum(address account) external view returns (uint256);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "getUSDCBalanceEthereum",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod EthereumERC20Balance {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f5ffd5b506106828061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c80637d6220671461002d575b5f5ffd5b610047600480360381019061004291906102ec565b61005d565b604051610054919061032f565b60405180910390f35b5f5f6370a0823160e01b836040516020016100789190610357565b60405160208183030381529060405260405160200161009892919061040d565b60405160208183030381529060405290505f60405180604001604052806040518060c001604052805f73ffffffffffffffffffffffffffffffffffffffff16815260200173a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4873ffffffffffffffffffffffffffffffffffffffff168152602001620186a081526020016103e881526020015f81526020018581525081526020016040518060400160405280600681526020017f6c6174657374000000000000000000000000000000000000000000000000000081525081525090505f610173600183610193565b905080806020019051810190610189919061045e565b9350505050919050565b60605f5f7f7a15f80d7c4f6713e4b96ee58712e00c337971f876621fab9326908fdf330d775f1c73ffffffffffffffffffffffffffffffffffffffff165a86866040516020016101e49291906105c6565b60405160208183030381529060405260405161020091906105f4565b5f604051808303818686fa925050503d805f8114610239576040519150601f19603f3d011682016040523d82523d5f602084013e61023e565b606091505b509150915081610283576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027a90610664565b60405180910390fd5b809250505092915050565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6102bb82610292565b9050919050565b6102cb816102b1565b81146102d5575f5ffd5b50565b5f813590506102e6816102c2565b92915050565b5f602082840312156103015761030061028e565b5b5f61030e848285016102d8565b91505092915050565b5f819050919050565b61032981610317565b82525050565b5f6020820190506103425f830184610320565b92915050565b610351816102b1565b82525050565b5f60208201905061036a5f830184610348565b92915050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b5f819050919050565b6103b56103b082610370565b61039b565b82525050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f6103e7826103bb565b6103f181856103c5565b93506104018185602086016103cf565b80840191505092915050565b5f61041882856103a4565b60048201915061042882846103dd565b91508190509392505050565b61043d81610317565b8114610447575f5ffd5b50565b5f8151905061045881610434565b92915050565b5f602082840312156104735761047261028e565b5b5f6104808482850161044a565b91505092915050565b610492816102b1565b82525050565b6104a181610317565b82525050565b5f82825260208201905092915050565b5f601f19601f8301169050919050565b5f6104d1826103bb565b6104db81856104a7565b93506104eb8185602086016103cf565b6104f4816104b7565b840191505092915050565b5f60c083015f8301516105145f860182610489565b5060208301516105276020860182610489565b50604083015161053a6040860182610498565b50606083015161054d6060860182610498565b5060808301516105606080860182610498565b5060a083015184820360a086015261057882826104c7565b9150508091505092915050565b5f604083015f8301518482035f86015261059f82826104ff565b915050602083015184820360208601526105b982826104c7565b9150508091505092915050565b5f6040820190506105d95f830185610320565b81810360208301526105eb8184610585565b90509392505050565b5f6105ff82846103dd565b915081905092915050565b5f82825260208201905092915050565b7f507265636f6d70696c652063616c6c206661696c6564000000000000000000005f82015250565b5f61064e60168361060a565b91506106598261061a565b602082019050919050565b5f6020820190508181035f83015261067b81610642565b905091905056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW__\xFD[Pa\x06\x82\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c}b g\x14a\0-W[__\xFD[a\0G`\x04\x806\x03\x81\x01\x90a\0B\x91\x90a\x02\xECV[a\0]V[`@Qa\0T\x91\x90a\x03/V[`@Q\x80\x91\x03\x90\xF3[__cp\xA0\x821`\xE0\x1B\x83`@Q` \x01a\0x\x91\x90a\x03WV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q` \x01a\0\x98\x92\x91\x90a\x04\rV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P_`@Q\x80`@\x01`@R\x80`@Q\x80`\xC0\x01`@R\x80_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01s\xA0\xB8i\x91\xC6!\x8B6\xC1\xD1\x9DJ.\x9E\xB0\xCE6\x06\xEBHs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01b\x01\x86\xA0\x81R` \x01a\x03\xE8\x81R` \x01_\x81R` \x01\x85\x81RP\x81R` \x01`@Q\x80`@\x01`@R\x80`\x06\x81R` \x01\x7Flatest\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x81RP\x90P_a\x01s`\x01\x83a\x01\x93V[\x90P\x80\x80` \x01\x90Q\x81\x01\x90a\x01\x89\x91\x90a\x04^V[\x93PPPP\x91\x90PV[``__\x7Fz\x15\xF8\r|Og\x13\xE4\xB9n\xE5\x87\x12\xE0\x0C3yq\xF8vb\x1F\xAB\x93&\x90\x8F\xDF3\rw_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16Z\x86\x86`@Q` \x01a\x01\xE4\x92\x91\x90a\x05\xC6V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Qa\x02\0\x91\x90a\x05\xF4V[_`@Q\x80\x83\x03\x81\x86\x86\xFA\x92PPP=\x80_\x81\x14a\x029W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x02>V[``\x91P[P\x91P\x91P\x81a\x02\x83W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x02z\x90a\x06dV[`@Q\x80\x91\x03\x90\xFD[\x80\x92PPP\x92\x91PPV[__\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x02\xBB\x82a\x02\x92V[\x90P\x91\x90PV[a\x02\xCB\x81a\x02\xB1V[\x81\x14a\x02\xD5W__\xFD[PV[_\x815\x90Pa\x02\xE6\x81a\x02\xC2V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x03\x01Wa\x03\0a\x02\x8EV[[_a\x03\x0E\x84\x82\x85\x01a\x02\xD8V[\x91PP\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x03)\x81a\x03\x17V[\x82RPPV[_` \x82\x01\x90Pa\x03B_\x83\x01\x84a\x03 V[\x92\x91PPV[a\x03Q\x81a\x02\xB1V[\x82RPPV[_` \x82\x01\x90Pa\x03j_\x83\x01\x84a\x03HV[\x92\x91PPV[_\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x16\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[a\x03\xB5a\x03\xB0\x82a\x03pV[a\x03\x9BV[\x82RPPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\x03\xE7\x82a\x03\xBBV[a\x03\xF1\x81\x85a\x03\xC5V[\x93Pa\x04\x01\x81\x85` \x86\x01a\x03\xCFV[\x80\x84\x01\x91PP\x92\x91PPV[_a\x04\x18\x82\x85a\x03\xA4V[`\x04\x82\x01\x91Pa\x04(\x82\x84a\x03\xDDV[\x91P\x81\x90P\x93\x92PPPV[a\x04=\x81a\x03\x17V[\x81\x14a\x04GW__\xFD[PV[_\x81Q\x90Pa\x04X\x81a\x044V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x04sWa\x04ra\x02\x8EV[[_a\x04\x80\x84\x82\x85\x01a\x04JV[\x91PP\x92\x91PPV[a\x04\x92\x81a\x02\xB1V[\x82RPPV[a\x04\xA1\x81a\x03\x17V[\x82RPPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\x04\xD1\x82a\x03\xBBV[a\x04\xDB\x81\x85a\x04\xA7V[\x93Pa\x04\xEB\x81\x85` \x86\x01a\x03\xCFV[a\x04\xF4\x81a\x04\xB7V[\x84\x01\x91PP\x92\x91PPV[_`\xC0\x83\x01_\x83\x01Qa\x05\x14_\x86\x01\x82a\x04\x89V[P` \x83\x01Qa\x05'` \x86\x01\x82a\x04\x89V[P`@\x83\x01Qa\x05:`@\x86\x01\x82a\x04\x98V[P``\x83\x01Qa\x05M``\x86\x01\x82a\x04\x98V[P`\x80\x83\x01Qa\x05``\x80\x86\x01\x82a\x04\x98V[P`\xA0\x83\x01Q\x84\x82\x03`\xA0\x86\x01Ra\x05x\x82\x82a\x04\xC7V[\x91PP\x80\x91PP\x92\x91PPV[_`@\x83\x01_\x83\x01Q\x84\x82\x03_\x86\x01Ra\x05\x9F\x82\x82a\x04\xFFV[\x91PP` \x83\x01Q\x84\x82\x03` \x86\x01Ra\x05\xB9\x82\x82a\x04\xC7V[\x91PP\x80\x91PP\x92\x91PPV[_`@\x82\x01\x90Pa\x05\xD9_\x83\x01\x85a\x03 V[\x81\x81\x03` \x83\x01Ra\x05\xEB\x81\x84a\x05\x85V[\x90P\x93\x92PPPV[_a\x05\xFF\x82\x84a\x03\xDDV[\x91P\x81\x90P\x92\x91PPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FPrecompile call failed\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a\x06N`\x16\x83a\x06\nV[\x91Pa\x06Y\x82a\x06\x1AV[` \x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x06{\x81a\x06BV[\x90P\x91\x90PV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b5060043610610029575f3560e01c80637d6220671461002d575b5f5ffd5b610047600480360381019061004291906102ec565b61005d565b604051610054919061032f565b60405180910390f35b5f5f6370a0823160e01b836040516020016100789190610357565b60405160208183030381529060405260405160200161009892919061040d565b60405160208183030381529060405290505f60405180604001604052806040518060c001604052805f73ffffffffffffffffffffffffffffffffffffffff16815260200173a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4873ffffffffffffffffffffffffffffffffffffffff168152602001620186a081526020016103e881526020015f81526020018581525081526020016040518060400160405280600681526020017f6c6174657374000000000000000000000000000000000000000000000000000081525081525090505f610173600183610193565b905080806020019051810190610189919061045e565b9350505050919050565b60605f5f7f7a15f80d7c4f6713e4b96ee58712e00c337971f876621fab9326908fdf330d775f1c73ffffffffffffffffffffffffffffffffffffffff165a86866040516020016101e49291906105c6565b60405160208183030381529060405260405161020091906105f4565b5f604051808303818686fa925050503d805f8114610239576040519150601f19603f3d011682016040523d82523d5f602084013e61023e565b606091505b509150915081610283576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027a90610664565b60405180910390fd5b809250505092915050565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6102bb82610292565b9050919050565b6102cb816102b1565b81146102d5575f5ffd5b50565b5f813590506102e6816102c2565b92915050565b5f602082840312156103015761030061028e565b5b5f61030e848285016102d8565b91505092915050565b5f819050919050565b61032981610317565b82525050565b5f6020820190506103425f830184610320565b92915050565b610351816102b1565b82525050565b5f60208201905061036a5f830184610348565b92915050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b5f819050919050565b6103b56103b082610370565b61039b565b82525050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f6103e7826103bb565b6103f181856103c5565b93506104018185602086016103cf565b80840191505092915050565b5f61041882856103a4565b60048201915061042882846103dd565b91508190509392505050565b61043d81610317565b8114610447575f5ffd5b50565b5f8151905061045881610434565b92915050565b5f602082840312156104735761047261028e565b5b5f6104808482850161044a565b91505092915050565b610492816102b1565b82525050565b6104a181610317565b82525050565b5f82825260208201905092915050565b5f601f19601f8301169050919050565b5f6104d1826103bb565b6104db81856104a7565b93506104eb8185602086016103cf565b6104f4816104b7565b840191505092915050565b5f60c083015f8301516105145f860182610489565b5060208301516105276020860182610489565b50604083015161053a6040860182610498565b50606083015161054d6060860182610498565b5060808301516105606080860182610498565b5060a083015184820360a086015261057882826104c7565b9150508091505092915050565b5f604083015f8301518482035f86015261059f82826104ff565b915050602083015184820360208601526105b982826104c7565b9150508091505092915050565b5f6040820190506105d95f830185610320565b81810360208301526105eb8184610585565b90509392505050565b5f6105ff82846103dd565b915081905092915050565b5f82825260208201905092915050565b7f507265636f6d70696c652063616c6c206661696c6564000000000000000000005f82015250565b5f61064e60168361060a565b91506106598261061a565b602082019050919050565b5f6020820190508181035f83015261067b81610642565b905091905056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c}b g\x14a\0-W[__\xFD[a\0G`\x04\x806\x03\x81\x01\x90a\0B\x91\x90a\x02\xECV[a\0]V[`@Qa\0T\x91\x90a\x03/V[`@Q\x80\x91\x03\x90\xF3[__cp\xA0\x821`\xE0\x1B\x83`@Q` \x01a\0x\x91\x90a\x03WV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q` \x01a\0\x98\x92\x91\x90a\x04\rV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P_`@Q\x80`@\x01`@R\x80`@Q\x80`\xC0\x01`@R\x80_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01s\xA0\xB8i\x91\xC6!\x8B6\xC1\xD1\x9DJ.\x9E\xB0\xCE6\x06\xEBHs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01b\x01\x86\xA0\x81R` \x01a\x03\xE8\x81R` \x01_\x81R` \x01\x85\x81RP\x81R` \x01`@Q\x80`@\x01`@R\x80`\x06\x81R` \x01\x7Flatest\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x81RP\x90P_a\x01s`\x01\x83a\x01\x93V[\x90P\x80\x80` \x01\x90Q\x81\x01\x90a\x01\x89\x91\x90a\x04^V[\x93PPPP\x91\x90PV[``__\x7Fz\x15\xF8\r|Og\x13\xE4\xB9n\xE5\x87\x12\xE0\x0C3yq\xF8vb\x1F\xAB\x93&\x90\x8F\xDF3\rw_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16Z\x86\x86`@Q` \x01a\x01\xE4\x92\x91\x90a\x05\xC6V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Qa\x02\0\x91\x90a\x05\xF4V[_`@Q\x80\x83\x03\x81\x86\x86\xFA\x92PPP=\x80_\x81\x14a\x029W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x02>V[``\x91P[P\x91P\x91P\x81a\x02\x83W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x02z\x90a\x06dV[`@Q\x80\x91\x03\x90\xFD[\x80\x92PPP\x92\x91PPV[__\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x02\xBB\x82a\x02\x92V[\x90P\x91\x90PV[a\x02\xCB\x81a\x02\xB1V[\x81\x14a\x02\xD5W__\xFD[PV[_\x815\x90Pa\x02\xE6\x81a\x02\xC2V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x03\x01Wa\x03\0a\x02\x8EV[[_a\x03\x0E\x84\x82\x85\x01a\x02\xD8V[\x91PP\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x03)\x81a\x03\x17V[\x82RPPV[_` \x82\x01\x90Pa\x03B_\x83\x01\x84a\x03 V[\x92\x91PPV[a\x03Q\x81a\x02\xB1V[\x82RPPV[_` \x82\x01\x90Pa\x03j_\x83\x01\x84a\x03HV[\x92\x91PPV[_\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x16\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[a\x03\xB5a\x03\xB0\x82a\x03pV[a\x03\x9BV[\x82RPPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\x03\xE7\x82a\x03\xBBV[a\x03\xF1\x81\x85a\x03\xC5V[\x93Pa\x04\x01\x81\x85` \x86\x01a\x03\xCFV[\x80\x84\x01\x91PP\x92\x91PPV[_a\x04\x18\x82\x85a\x03\xA4V[`\x04\x82\x01\x91Pa\x04(\x82\x84a\x03\xDDV[\x91P\x81\x90P\x93\x92PPPV[a\x04=\x81a\x03\x17V[\x81\x14a\x04GW__\xFD[PV[_\x81Q\x90Pa\x04X\x81a\x044V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x04sWa\x04ra\x02\x8EV[[_a\x04\x80\x84\x82\x85\x01a\x04JV[\x91PP\x92\x91PPV[a\x04\x92\x81a\x02\xB1V[\x82RPPV[a\x04\xA1\x81a\x03\x17V[\x82RPPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\x04\xD1\x82a\x03\xBBV[a\x04\xDB\x81\x85a\x04\xA7V[\x93Pa\x04\xEB\x81\x85` \x86\x01a\x03\xCFV[a\x04\xF4\x81a\x04\xB7V[\x84\x01\x91PP\x92\x91PPV[_`\xC0\x83\x01_\x83\x01Qa\x05\x14_\x86\x01\x82a\x04\x89V[P` \x83\x01Qa\x05'` \x86\x01\x82a\x04\x89V[P`@\x83\x01Qa\x05:`@\x86\x01\x82a\x04\x98V[P``\x83\x01Qa\x05M``\x86\x01\x82a\x04\x98V[P`\x80\x83\x01Qa\x05``\x80\x86\x01\x82a\x04\x98V[P`\xA0\x83\x01Q\x84\x82\x03`\xA0\x86\x01Ra\x05x\x82\x82a\x04\xC7V[\x91PP\x80\x91PP\x92\x91PPV[_`@\x83\x01_\x83\x01Q\x84\x82\x03_\x86\x01Ra\x05\x9F\x82\x82a\x04\xFFV[\x91PP` \x83\x01Q\x84\x82\x03` \x86\x01Ra\x05\xB9\x82\x82a\x04\xC7V[\x91PP\x80\x91PP\x92\x91PPV[_`@\x82\x01\x90Pa\x05\xD9_\x83\x01\x85a\x03 V[\x81\x81\x03` \x83\x01Ra\x05\xEB\x81\x84a\x05\x85V[\x90P\x93\x92PPPV[_a\x05\xFF\x82\x84a\x03\xDDV[\x91P\x81\x90P\x92\x91PPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FPrecompile call failed\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a\x06N`\x16\x83a\x06\nV[\x91Pa\x06Y\x82a\x06\x1AV[` \x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x06{\x81a\x06BV[\x90P\x91\x90PV",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getUSDCBalanceEthereum(address)` and selector `0x7d622067`.
```solidity
function getUSDCBalanceEthereum(address account) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getUSDCBalanceEthereumCall {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getUSDCBalanceEthereum(address)`](getUSDCBalanceEthereumCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getUSDCBalanceEthereumReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getUSDCBalanceEthereumCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getUSDCBalanceEthereumCall) -> Self {
                    (value.account,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getUSDCBalanceEthereumCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { account: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getUSDCBalanceEthereumReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getUSDCBalanceEthereumReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getUSDCBalanceEthereumReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getUSDCBalanceEthereumCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getUSDCBalanceEthereum(address)";
            const SELECTOR: [u8; 4] = [125u8, 98u8, 32u8, 103u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getUSDCBalanceEthereumReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getUSDCBalanceEthereumReturn = r.into();
                        r._0
                    })
            }
        }
    };
    ///Container for all the [`EthereumERC20Balance`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum EthereumERC20BalanceCalls {
        #[allow(missing_docs)]
        getUSDCBalanceEthereum(getUSDCBalanceEthereumCall),
    }
    #[automatically_derived]
    impl EthereumERC20BalanceCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[125u8, 98u8, 32u8, 103u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for EthereumERC20BalanceCalls {
        const NAME: &'static str = "EthereumERC20BalanceCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::getUSDCBalanceEthereum(_) => {
                    <getUSDCBalanceEthereumCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<EthereumERC20BalanceCalls>] = &[
                {
                    fn getUSDCBalanceEthereum(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<EthereumERC20BalanceCalls> {
                        <getUSDCBalanceEthereumCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(EthereumERC20BalanceCalls::getUSDCBalanceEthereum)
                    }
                    getUSDCBalanceEthereum
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<EthereumERC20BalanceCalls>] = &[
                {
                    fn getUSDCBalanceEthereum(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<EthereumERC20BalanceCalls> {
                        <getUSDCBalanceEthereumCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(EthereumERC20BalanceCalls::getUSDCBalanceEthereum)
                    }
                    getUSDCBalanceEthereum
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::getUSDCBalanceEthereum(inner) => {
                    <getUSDCBalanceEthereumCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::getUSDCBalanceEthereum(inner) => {
                    <getUSDCBalanceEthereumCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`EthereumERC20Balance`](self) contract instance.

See the [wrapper's documentation](`EthereumERC20BalanceInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> EthereumERC20BalanceInstance<P, N> {
        EthereumERC20BalanceInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<EthereumERC20BalanceInstance<P, N>>,
    > {
        EthereumERC20BalanceInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        EthereumERC20BalanceInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`EthereumERC20Balance`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`EthereumERC20Balance`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct EthereumERC20BalanceInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for EthereumERC20BalanceInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("EthereumERC20BalanceInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > EthereumERC20BalanceInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`EthereumERC20Balance`](self) contract instance.

See the [wrapper's documentation](`EthereumERC20BalanceInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<EthereumERC20BalanceInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> EthereumERC20BalanceInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> EthereumERC20BalanceInstance<P, N> {
            EthereumERC20BalanceInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > EthereumERC20BalanceInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`getUSDCBalanceEthereum`] function.
        pub fn getUSDCBalanceEthereum(
            &self,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, getUSDCBalanceEthereumCall, N> {
            self.call_builder(
                &getUSDCBalanceEthereumCall {
                    account,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > EthereumERC20BalanceInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
