/**

Generated by the following Solidity interface...
```solidity
interface TestMintBalancePrecompile {
    function mint(uint256 value) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "mint",
    "inputs": [
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod TestMintBalancePrecompile {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f5ffd5b5061029f8061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c8063a0712d681461002d575b5f5ffd5b6100476004803603810190610042919061016c565b610049565b005b5f7f19f1eac828959377b5b3e1c34b3d7ce4be8888ea58439116eba58a2f31ab26505f1c73ffffffffffffffffffffffffffffffffffffffff168260405160200161009491906101a6565b6040516020818303038152906040526040516100b09190610211565b5f60405180830381855afa9150503d805f81146100e8576040519150601f19603f3d011682016040523d82523d5f602084013e6100ed565b606091505b5050905080610131576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012890610281565b60405180910390fd5b5050565b5f5ffd5b5f819050919050565b61014b81610139565b8114610155575f5ffd5b50565b5f8135905061016681610142565b92915050565b5f6020828403121561018157610180610135565b5b5f61018e84828501610158565b91505092915050565b6101a081610139565b82525050565b5f6020820190506101b95f830184610197565b92915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f6101eb826101bf565b6101f581856101c9565b93506102058185602086016101d3565b80840191505092915050565b5f61021c82846101e1565b915081905092915050565b5f82825260208201905092915050565b7f507265636f6d70696c652063616c6c206661696c6564000000000000000000005f82015250565b5f61026b601683610227565b915061027682610237565b602082019050919050565b5f6020820190508181035f8301526102988161025f565b905091905056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW__\xFD[Pa\x02\x9F\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\xA0q-h\x14a\0-W[__\xFD[a\0G`\x04\x806\x03\x81\x01\x90a\0B\x91\x90a\x01lV[a\0IV[\0[_\x7F\x19\xF1\xEA\xC8(\x95\x93w\xB5\xB3\xE1\xC3K=|\xE4\xBE\x88\x88\xEAXC\x91\x16\xEB\xA5\x8A/1\xAB&P_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82`@Q` \x01a\0\x94\x91\x90a\x01\xA6V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Qa\0\xB0\x91\x90a\x02\x11V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\0\xE8W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\0\xEDV[``\x91P[PP\x90P\x80a\x011W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x01(\x90a\x02\x81V[`@Q\x80\x91\x03\x90\xFD[PPV[__\xFD[_\x81\x90P\x91\x90PV[a\x01K\x81a\x019V[\x81\x14a\x01UW__\xFD[PV[_\x815\x90Pa\x01f\x81a\x01BV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x01\x81Wa\x01\x80a\x015V[[_a\x01\x8E\x84\x82\x85\x01a\x01XV[\x91PP\x92\x91PPV[a\x01\xA0\x81a\x019V[\x82RPPV[_` \x82\x01\x90Pa\x01\xB9_\x83\x01\x84a\x01\x97V[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\x01\xEB\x82a\x01\xBFV[a\x01\xF5\x81\x85a\x01\xC9V[\x93Pa\x02\x05\x81\x85` \x86\x01a\x01\xD3V[\x80\x84\x01\x91PP\x92\x91PPV[_a\x02\x1C\x82\x84a\x01\xE1V[\x91P\x81\x90P\x92\x91PPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FPrecompile call failed\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a\x02k`\x16\x83a\x02'V[\x91Pa\x02v\x82a\x027V[` \x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x02\x98\x81a\x02_V[\x90P\x91\x90PV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b5060043610610029575f3560e01c8063a0712d681461002d575b5f5ffd5b6100476004803603810190610042919061016c565b610049565b005b5f7f19f1eac828959377b5b3e1c34b3d7ce4be8888ea58439116eba58a2f31ab26505f1c73ffffffffffffffffffffffffffffffffffffffff168260405160200161009491906101a6565b6040516020818303038152906040526040516100b09190610211565b5f60405180830381855afa9150503d805f81146100e8576040519150601f19603f3d011682016040523d82523d5f602084013e6100ed565b606091505b5050905080610131576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012890610281565b60405180910390fd5b5050565b5f5ffd5b5f819050919050565b61014b81610139565b8114610155575f5ffd5b50565b5f8135905061016681610142565b92915050565b5f6020828403121561018157610180610135565b5b5f61018e84828501610158565b91505092915050565b6101a081610139565b82525050565b5f6020820190506101b95f830184610197565b92915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f6101eb826101bf565b6101f581856101c9565b93506102058185602086016101d3565b80840191505092915050565b5f61021c82846101e1565b915081905092915050565b5f82825260208201905092915050565b7f507265636f6d70696c652063616c6c206661696c6564000000000000000000005f82015250565b5f61026b601683610227565b915061027682610237565b602082019050919050565b5f6020820190508181035f8301526102988161025f565b905091905056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\xA0q-h\x14a\0-W[__\xFD[a\0G`\x04\x806\x03\x81\x01\x90a\0B\x91\x90a\x01lV[a\0IV[\0[_\x7F\x19\xF1\xEA\xC8(\x95\x93w\xB5\xB3\xE1\xC3K=|\xE4\xBE\x88\x88\xEAXC\x91\x16\xEB\xA5\x8A/1\xAB&P_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82`@Q` \x01a\0\x94\x91\x90a\x01\xA6V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Qa\0\xB0\x91\x90a\x02\x11V[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\0\xE8W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\0\xEDV[``\x91P[PP\x90P\x80a\x011W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x01(\x90a\x02\x81V[`@Q\x80\x91\x03\x90\xFD[PPV[__\xFD[_\x81\x90P\x91\x90PV[a\x01K\x81a\x019V[\x81\x14a\x01UW__\xFD[PV[_\x815\x90Pa\x01f\x81a\x01BV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x01\x81Wa\x01\x80a\x015V[[_a\x01\x8E\x84\x82\x85\x01a\x01XV[\x91PP\x92\x91PPV[a\x01\xA0\x81a\x019V[\x82RPPV[_` \x82\x01\x90Pa\x01\xB9_\x83\x01\x84a\x01\x97V[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\x01\xEB\x82a\x01\xBFV[a\x01\xF5\x81\x85a\x01\xC9V[\x93Pa\x02\x05\x81\x85` \x86\x01a\x01\xD3V[\x80\x84\x01\x91PP\x92\x91PPV[_a\x02\x1C\x82\x84a\x01\xE1V[\x91P\x81\x90P\x92\x91PPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FPrecompile call failed\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a\x02k`\x16\x83a\x02'V[\x91Pa\x02v\x82a\x027V[` \x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x02\x98\x81a\x02_V[\x90P\x91\x90PV",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `mint(uint256)` and selector `0xa0712d68`.
```solidity
function mint(uint256 value) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mintCall {
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`mint(uint256)`](mintCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mintReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mintCall> for UnderlyingRustTuple<'_> {
                fn from(value: mintCall) -> Self {
                    (value.value,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mintCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { value: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mintReturn> for UnderlyingRustTuple<'_> {
                fn from(value: mintReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mintReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl mintReturn {
            fn _tokenize(
                &self,
            ) -> <mintCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for mintCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = mintReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "mint(uint256)";
            const SELECTOR: [u8; 4] = [160u8, 113u8, 45u8, 104u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                mintReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`TestMintBalancePrecompile`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum TestMintBalancePrecompileCalls {
        #[allow(missing_docs)]
        mint(mintCall),
    }
    #[automatically_derived]
    impl TestMintBalancePrecompileCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[160u8, 113u8, 45u8, 104u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for TestMintBalancePrecompileCalls {
        const NAME: &'static str = "TestMintBalancePrecompileCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::mint(_) => <mintCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<TestMintBalancePrecompileCalls>] = &[
                {
                    fn mint(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TestMintBalancePrecompileCalls> {
                        <mintCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(TestMintBalancePrecompileCalls::mint)
                    }
                    mint
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<TestMintBalancePrecompileCalls>] = &[
                {
                    fn mint(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<TestMintBalancePrecompileCalls> {
                        <mintCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(TestMintBalancePrecompileCalls::mint)
                    }
                    mint
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::mint(inner) => {
                    <mintCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::mint(inner) => {
                    <mintCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`TestMintBalancePrecompile`](self) contract instance.

See the [wrapper's documentation](`TestMintBalancePrecompileInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> TestMintBalancePrecompileInstance<P, N> {
        TestMintBalancePrecompileInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<TestMintBalancePrecompileInstance<P, N>>,
    > {
        TestMintBalancePrecompileInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        TestMintBalancePrecompileInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`TestMintBalancePrecompile`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`TestMintBalancePrecompile`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct TestMintBalancePrecompileInstance<
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for TestMintBalancePrecompileInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("TestMintBalancePrecompileInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > TestMintBalancePrecompileInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`TestMintBalancePrecompile`](self) contract instance.

See the [wrapper's documentation](`TestMintBalancePrecompileInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<TestMintBalancePrecompileInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> TestMintBalancePrecompileInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> TestMintBalancePrecompileInstance<P, N> {
            TestMintBalancePrecompileInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > TestMintBalancePrecompileInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`mint`] function.
        pub fn mint(
            &self,
            value: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, mintCall, N> {
            self.call_builder(&mintCall { value })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > TestMintBalancePrecompileInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
