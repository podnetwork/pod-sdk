/**

Generated by the following Solidity interface...
```solidity
interface QuorumRestrictedAction {
    event ActionAllowed(address indexed account);

    function etherThreshold() external view returns (uint256);
    function restrictedAction() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "etherThreshold",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "restrictedAction",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "ActionAllowed",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod QuorumRestrictedAction {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052670de0b6b3a76400005f553480156019575f5ffd5b50610345806100275f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c80635a7b56a31461003857806361baffe614610056575b5f5ffd5b610040610060565b60405161004d919061020f565b60405180910390f35b61005e610065565b005b5f5481565b336100c05f548273ffffffffffffffffffffffffffffffffffffffff163110156040518060400160405280601881526020017f4e6f7420656e6f7567682045746865722062616c616e63650000000000000000815250610106565b3373ffffffffffffffffffffffffffffffffffffffff167f11511a1056af152a51f79222be7a074f7d19b5a13439cd362364797976fe6cb360405160405180910390a250565b5f7f3dcdf63b41c103567d7225976ad9145e866c7a7dccc6c277ea86abbd268fbac95f1c73ffffffffffffffffffffffffffffffffffffffff16836040516020016101519190610242565b60405160208183030381529060405260405161016d91906102ad565b5f60405180830381855afa9150503d805f81146101a5576040519150601f19603f3d011682016040523d82523d5f602084013e6101aa565b606091505b505090508082906101f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e89190610325565b60405180910390fd5b50505050565b5f819050919050565b610209816101f7565b82525050565b5f6020820190506102225f830184610200565b92915050565b5f8115159050919050565b61023c81610228565b82525050565b5f6020820190506102555f830184610233565b92915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f6102878261025b565b6102918185610265565b93506102a181856020860161026f565b80840191505092915050565b5f6102b8828461027d565b915081905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f601f19601f8301169050919050565b5f6102f7826102c3565b61030181856102cd565b935061031181856020860161026f565b61031a816102dd565b840191505092915050565b5f6020820190508181035f83015261033d81846102ed565b90509291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@Rg\r\xE0\xB6\xB3\xA7d\0\0_U4\x80\x15`\x19W__\xFD[Pa\x03E\x80a\0'_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80cZ{V\xA3\x14a\08W\x80ca\xBA\xFF\xE6\x14a\0VW[__\xFD[a\0@a\0`V[`@Qa\0M\x91\x90a\x02\x0FV[`@Q\x80\x91\x03\x90\xF3[a\0^a\0eV[\0[_T\x81V[3a\0\xC0_T\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x161\x10\x15`@Q\x80`@\x01`@R\x80`\x18\x81R` \x01\x7FNot enough Ether balance\0\0\0\0\0\0\0\0\x81RPa\x01\x06V[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x11Q\x1A\x10V\xAF\x15*Q\xF7\x92\"\xBEz\x07O}\x19\xB5\xA149\xCD6#dyyv\xFEl\xB3`@Q`@Q\x80\x91\x03\x90\xA2PV[_\x7F=\xCD\xF6;A\xC1\x03V}r%\x97j\xD9\x14^\x86lz}\xCC\xC6\xC2w\xEA\x86\xAB\xBD&\x8F\xBA\xC9_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83`@Q` \x01a\x01Q\x91\x90a\x02BV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Qa\x01m\x91\x90a\x02\xADV[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\x01\xA5W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x01\xAAV[``\x91P[PP\x90P\x80\x82\x90a\x01\xF1W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x01\xE8\x91\x90a\x03%V[`@Q\x80\x91\x03\x90\xFD[PPPPV[_\x81\x90P\x91\x90PV[a\x02\t\x81a\x01\xF7V[\x82RPPV[_` \x82\x01\x90Pa\x02\"_\x83\x01\x84a\x02\0V[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\x02<\x81a\x02(V[\x82RPPV[_` \x82\x01\x90Pa\x02U_\x83\x01\x84a\x023V[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\x02\x87\x82a\x02[V[a\x02\x91\x81\x85a\x02eV[\x93Pa\x02\xA1\x81\x85` \x86\x01a\x02oV[\x80\x84\x01\x91PP\x92\x91PPV[_a\x02\xB8\x82\x84a\x02}V[\x91P\x81\x90P\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\x02\xF7\x82a\x02\xC3V[a\x03\x01\x81\x85a\x02\xCDV[\x93Pa\x03\x11\x81\x85` \x86\x01a\x02oV[a\x03\x1A\x81a\x02\xDDV[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x03=\x81\x84a\x02\xEDV[\x90P\x92\x91PPV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b5060043610610034575f3560e01c80635a7b56a31461003857806361baffe614610056575b5f5ffd5b610040610060565b60405161004d919061020f565b60405180910390f35b61005e610065565b005b5f5481565b336100c05f548273ffffffffffffffffffffffffffffffffffffffff163110156040518060400160405280601881526020017f4e6f7420656e6f7567682045746865722062616c616e63650000000000000000815250610106565b3373ffffffffffffffffffffffffffffffffffffffff167f11511a1056af152a51f79222be7a074f7d19b5a13439cd362364797976fe6cb360405160405180910390a250565b5f7f3dcdf63b41c103567d7225976ad9145e866c7a7dccc6c277ea86abbd268fbac95f1c73ffffffffffffffffffffffffffffffffffffffff16836040516020016101519190610242565b60405160208183030381529060405260405161016d91906102ad565b5f60405180830381855afa9150503d805f81146101a5576040519150601f19603f3d011682016040523d82523d5f602084013e6101aa565b606091505b505090508082906101f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e89190610325565b60405180910390fd5b50505050565b5f819050919050565b610209816101f7565b82525050565b5f6020820190506102225f830184610200565b92915050565b5f8115159050919050565b61023c81610228565b82525050565b5f6020820190506102555f830184610233565b92915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f6102878261025b565b6102918185610265565b93506102a181856020860161026f565b80840191505092915050565b5f6102b8828461027d565b915081905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f601f19601f8301169050919050565b5f6102f7826102c3565b61030181856102cd565b935061031181856020860161026f565b61031a816102dd565b840191505092915050565b5f6020820190508181035f83015261033d81846102ed565b90509291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80cZ{V\xA3\x14a\08W\x80ca\xBA\xFF\xE6\x14a\0VW[__\xFD[a\0@a\0`V[`@Qa\0M\x91\x90a\x02\x0FV[`@Q\x80\x91\x03\x90\xF3[a\0^a\0eV[\0[_T\x81V[3a\0\xC0_T\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x161\x10\x15`@Q\x80`@\x01`@R\x80`\x18\x81R` \x01\x7FNot enough Ether balance\0\0\0\0\0\0\0\0\x81RPa\x01\x06V[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x11Q\x1A\x10V\xAF\x15*Q\xF7\x92\"\xBEz\x07O}\x19\xB5\xA149\xCD6#dyyv\xFEl\xB3`@Q`@Q\x80\x91\x03\x90\xA2PV[_\x7F=\xCD\xF6;A\xC1\x03V}r%\x97j\xD9\x14^\x86lz}\xCC\xC6\xC2w\xEA\x86\xAB\xBD&\x8F\xBA\xC9_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83`@Q` \x01a\x01Q\x91\x90a\x02BV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Qa\x01m\x91\x90a\x02\xADV[_`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80_\x81\x14a\x01\xA5W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x01\xAAV[``\x91P[PP\x90P\x80\x82\x90a\x01\xF1W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x01\xE8\x91\x90a\x03%V[`@Q\x80\x91\x03\x90\xFD[PPPPV[_\x81\x90P\x91\x90PV[a\x02\t\x81a\x01\xF7V[\x82RPPV[_` \x82\x01\x90Pa\x02\"_\x83\x01\x84a\x02\0V[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\x02<\x81a\x02(V[\x82RPPV[_` \x82\x01\x90Pa\x02U_\x83\x01\x84a\x023V[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\x02\x87\x82a\x02[V[a\x02\x91\x81\x85a\x02eV[\x93Pa\x02\xA1\x81\x85` \x86\x01a\x02oV[\x80\x84\x01\x91PP\x92\x91PPV[_a\x02\xB8\x82\x84a\x02}V[\x91P\x81\x90P\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\x02\xF7\x82a\x02\xC3V[a\x03\x01\x81\x85a\x02\xCDV[\x93Pa\x03\x11\x81\x85` \x86\x01a\x02oV[a\x03\x1A\x81a\x02\xDDV[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x03=\x81\x84a\x02\xEDV[\x90P\x92\x91PPV",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `ActionAllowed(address)` and selector `0x11511a1056af152a51f79222be7a074f7d19b5a13439cd362364797976fe6cb3`.
```solidity
event ActionAllowed(address indexed account);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ActionAllowed {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ActionAllowed {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "ActionAllowed(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                17u8, 81u8, 26u8, 16u8, 86u8, 175u8, 21u8, 42u8, 81u8, 247u8, 146u8,
                34u8, 190u8, 122u8, 7u8, 79u8, 125u8, 25u8, 181u8, 161u8, 52u8, 57u8,
                205u8, 54u8, 35u8, 100u8, 121u8, 121u8, 118u8, 254u8, 108u8, 179u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { account: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.account.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ActionAllowed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ActionAllowed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ActionAllowed) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `etherThreshold()` and selector `0x5a7b56a3`.
```solidity
function etherThreshold() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct etherThresholdCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`etherThreshold()`](etherThresholdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct etherThresholdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<etherThresholdCall> for UnderlyingRustTuple<'_> {
                fn from(value: etherThresholdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for etherThresholdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<etherThresholdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: etherThresholdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for etherThresholdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for etherThresholdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "etherThreshold()";
            const SELECTOR: [u8; 4] = [90u8, 123u8, 86u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: etherThresholdReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: etherThresholdReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `restrictedAction()` and selector `0x61baffe6`.
```solidity
function restrictedAction() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct restrictedActionCall;
    ///Container type for the return parameters of the [`restrictedAction()`](restrictedActionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct restrictedActionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<restrictedActionCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: restrictedActionCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for restrictedActionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<restrictedActionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: restrictedActionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for restrictedActionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl restrictedActionReturn {
            fn _tokenize(
                &self,
            ) -> <restrictedActionCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for restrictedActionCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = restrictedActionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "restrictedAction()";
            const SELECTOR: [u8; 4] = [97u8, 186u8, 255u8, 230u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                restrictedActionReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`QuorumRestrictedAction`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum QuorumRestrictedActionCalls {
        #[allow(missing_docs)]
        etherThreshold(etherThresholdCall),
        #[allow(missing_docs)]
        restrictedAction(restrictedActionCall),
    }
    #[automatically_derived]
    impl QuorumRestrictedActionCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [90u8, 123u8, 86u8, 163u8],
            [97u8, 186u8, 255u8, 230u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for QuorumRestrictedActionCalls {
        const NAME: &'static str = "QuorumRestrictedActionCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::etherThreshold(_) => {
                    <etherThresholdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::restrictedAction(_) => {
                    <restrictedActionCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<QuorumRestrictedActionCalls>] = &[
                {
                    fn etherThreshold(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<QuorumRestrictedActionCalls> {
                        <etherThresholdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(QuorumRestrictedActionCalls::etherThreshold)
                    }
                    etherThreshold
                },
                {
                    fn restrictedAction(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<QuorumRestrictedActionCalls> {
                        <restrictedActionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(QuorumRestrictedActionCalls::restrictedAction)
                    }
                    restrictedAction
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<QuorumRestrictedActionCalls>] = &[
                {
                    fn etherThreshold(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<QuorumRestrictedActionCalls> {
                        <etherThresholdCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(QuorumRestrictedActionCalls::etherThreshold)
                    }
                    etherThreshold
                },
                {
                    fn restrictedAction(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<QuorumRestrictedActionCalls> {
                        <restrictedActionCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(QuorumRestrictedActionCalls::restrictedAction)
                    }
                    restrictedAction
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::etherThreshold(inner) => {
                    <etherThresholdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::restrictedAction(inner) => {
                    <restrictedActionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::etherThreshold(inner) => {
                    <etherThresholdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::restrictedAction(inner) => {
                    <restrictedActionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`QuorumRestrictedAction`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum QuorumRestrictedActionEvents {
        #[allow(missing_docs)]
        ActionAllowed(ActionAllowed),
    }
    #[automatically_derived]
    impl QuorumRestrictedActionEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                17u8, 81u8, 26u8, 16u8, 86u8, 175u8, 21u8, 42u8, 81u8, 247u8, 146u8,
                34u8, 190u8, 122u8, 7u8, 79u8, 125u8, 25u8, 181u8, 161u8, 52u8, 57u8,
                205u8, 54u8, 35u8, 100u8, 121u8, 121u8, 118u8, 254u8, 108u8, 179u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for QuorumRestrictedActionEvents {
        const NAME: &'static str = "QuorumRestrictedActionEvents";
        const COUNT: usize = 1usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<ActionAllowed as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ActionAllowed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::ActionAllowed)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for QuorumRestrictedActionEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ActionAllowed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ActionAllowed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`QuorumRestrictedAction`](self) contract instance.

See the [wrapper's documentation](`QuorumRestrictedActionInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> QuorumRestrictedActionInstance<P, N> {
        QuorumRestrictedActionInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<QuorumRestrictedActionInstance<P, N>>,
    > {
        QuorumRestrictedActionInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        QuorumRestrictedActionInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`QuorumRestrictedAction`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`QuorumRestrictedAction`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct QuorumRestrictedActionInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for QuorumRestrictedActionInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("QuorumRestrictedActionInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > QuorumRestrictedActionInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`QuorumRestrictedAction`](self) contract instance.

See the [wrapper's documentation](`QuorumRestrictedActionInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<QuorumRestrictedActionInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> QuorumRestrictedActionInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> QuorumRestrictedActionInstance<P, N> {
            QuorumRestrictedActionInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > QuorumRestrictedActionInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`etherThreshold`] function.
        pub fn etherThreshold(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, etherThresholdCall, N> {
            self.call_builder(&etherThresholdCall)
        }
        ///Creates a new call builder for the [`restrictedAction`] function.
        pub fn restrictedAction(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, restrictedActionCall, N> {
            self.call_builder(&restrictedActionCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > QuorumRestrictedActionInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ActionAllowed`] event.
        pub fn ActionAllowed_filter(
            &self,
        ) -> alloy_contract::Event<&P, ActionAllowed, N> {
            self.event_filter::<ActionAllowed>()
        }
    }
}
