/**

Generated by the following Solidity interface...
```solidity
interface Voting {
    event PollCreated(bytes32 indexed pollId, uint256 deadline);
    event Voted(bytes32 indexed pollId, address indexed voter, uint256 indexed choice);
    event Winner(bytes32 indexed pollId, uint256 indexed choice);

    function createPoll(uint256 deadline, uint256 maxChoice, address[] memory voters) external returns (bytes32 pollId);
    function getPollId(uint256 deadline, uint256 maxChoice, address owner, address[] memory voters) external pure returns (bytes32 pollId);
    function getVotes(bytes32 pollId) external view returns (uint256 participants, uint256[] memory votes);
    function setWinningChoice(bytes32 pollId, uint256 choice) external;
    function vote(bytes32 pollId, uint256 choice) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "createPoll",
    "inputs": [
      {
        "name": "deadline",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "maxChoice",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "voters",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [
      {
        "name": "pollId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getPollId",
    "inputs": [
      {
        "name": "deadline",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "maxChoice",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "voters",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [
      {
        "name": "pollId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "getVotes",
    "inputs": [
      {
        "name": "pollId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "participants",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "votes",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setWinningChoice",
    "inputs": [
      {
        "name": "pollId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "choice",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "vote",
    "inputs": [
      {
        "name": "pollId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "choice",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "PollCreated",
    "inputs": [
      {
        "name": "pollId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "deadline",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Voted",
    "inputs": [
      {
        "name": "pollId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "voter",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "choice",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Winner",
    "inputs": [
      {
        "name": "pollId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "choice",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod Voting {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600f57600080fd5b506118148061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063098cf9661461005c5780634c051100146100785780635fe5c1ec146100a95780639ef1204c146100d9578063a4ed285a146100f5575b600080fd5b61007660048036038101906100719190610b9d565b610125565b005b610092600480360381019061008d9190610bdd565b6103c6565b6040516100a0929190610cd7565b60405180910390f35b6100c360048036038101906100be9190610dca565b6104e7565b6040516100d09190610e61565b60405180910390f35b6100f360048036038101906100ee9190610b9d565b610549565b005b61010f600480360381019061010a9190610e7c565b610786565b60405161011c9190610e61565b60405180910390f35b6000806000848152602001908152602001600020905061017e81600001546040518060400160405280602081526020017f506f6c6c20646561646c696e6520686173206e6f742070617373656420796574815250610a11565b60008160050154116101c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101bc90610f4d565b60405180910390fd5b6000821180156101d9575080600101548211155b610218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020f90610fdf565b60405180910390fd5b600081600701541461025f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102569061104b565b60405180910390fd5b6000816004016000848152602001908152602001600020549050600081116102bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b3906110dd565b60405180910390fd5b6000826005015483600601546102d2919061112c565b9050600080600190505b8460010154811161033957858103156103265781856004016000838152602001908152602001600020541115610325578460040160008281526020019081526020016000205491505b5b808061033190611160565b9150506102dc565b50818184610347919061112c565b11610387576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037e9061121a565b60405180910390fd5b84846007018190555084867f269d3a24712436f77df15d63de7d2337a060c9102dee6f46c909fb0fa2d52f0c60405160405180910390a3505050505050565b60006060600080600085815260200190815260200160002090506000816001015411610427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041e90611286565b60405180910390fd5b6000816001015467ffffffffffffffff811115610447576104466112a6565b5b6040519080825280602002602001820160405280156104755781602001602082028036833780820191505090505b50905060005b82600101548110156104d55782600401600060018361049a91906112d5565b8152602001908152602001600020548282815181106104bc576104bb611309565b5b602002602001018181525050808060010191505061047b565b50816006015481935093505050915091565b600085858585856040516020016104ff9291906113f5565b60405160208183030381529060405280519060200120604051602001610528949392919061141d565b60405160208183030381529060405280519060200120905095945050505050565b6000806000848152602001908152602001600020905061058581600001546040518060600160405280602f81526020016117e5602f9139610a21565b600082118015610599575080600101548211155b6105d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cf90610fdf565b60405180910390fd5b600160028111156105ec576105eb611462565b5b8160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600281111561064d5761064c611462565b5b1461068d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610684906114dd565b60405180910390fd5b60028160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360028111156106f2576106f1611462565b5b0217905550806004016000838152602001908152602001600020600081548092919061071d90611160565b919050555080600501600081548092919061073790611160565b9190505550813373ffffffffffffffffffffffffffffffffffffffff16847fe4abc5380fa6939d1dc23b5e90b3a8a0e328f0f1a82a5f42bfb795bf9c71750560405160405180910390a4505050565b60006107c7856040518060400160405280601e81526020017f446561646c696e65206d75737420626520696e20746865206675747572650000815250610a21565b6000841161080a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108019061156f565b60405180910390fd5b60008383905011610850576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610847906115db565b60405180910390fd5b600061085f86863387876104e7565b90506000806000838152602001908152602001600020905060008160060154146108be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b590611647565b60405180910390fd5b868160000181905550858160010181905550338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084849050816006018190555060005b858590508110156109cb57600182600301600088888581811061094857610947611309565b5b905060200201602081019061095d9190611667565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360028111156109b9576109b8611462565b5b02179055508080600101915050610922565b50817ff859041d4addf085c6226b2e8735a155ae2a4c0213a96a2cfcb97d4fe4d38171886040516109fc9190611694565b60405180910390a28192505050949350505050565b610a1d82421182610a31565b5050565b610a2d82421082610a31565b5050565b60007f3dcdf63b41c103567d7225976ad9145e866c7a7dccc6c277ea86abbd268fbac960001c73ffffffffffffffffffffffffffffffffffffffff1683604051602001610a7e91906116ca565b604051602081830303815290604052604051610a9a9190611756565b600060405180830381855afa9150503d8060008114610ad5576040519150601f19603f3d011682016040523d82523d6000602084013e610ada565b606091505b50509050808290610b21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1891906117c2565b60405180910390fd5b50505050565b600080fd5b600080fd5b6000819050919050565b610b4481610b31565b8114610b4f57600080fd5b50565b600081359050610b6181610b3b565b92915050565b6000819050919050565b610b7a81610b67565b8114610b8557600080fd5b50565b600081359050610b9781610b71565b92915050565b60008060408385031215610bb457610bb3610b27565b5b6000610bc285828601610b52565b9250506020610bd385828601610b88565b9150509250929050565b600060208284031215610bf357610bf2610b27565b5b6000610c0184828501610b52565b91505092915050565b610c1381610b67565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610c4e81610b67565b82525050565b6000610c608383610c45565b60208301905092915050565b6000602082019050919050565b6000610c8482610c19565b610c8e8185610c24565b9350610c9983610c35565b8060005b83811015610cca578151610cb18882610c54565b9750610cbc83610c6c565b925050600181019050610c9d565b5085935050505092915050565b6000604082019050610cec6000830185610c0a565b8181036020830152610cfe8184610c79565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d3282610d07565b9050919050565b610d4281610d27565b8114610d4d57600080fd5b50565b600081359050610d5f81610d39565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610d8a57610d89610d65565b5b8235905067ffffffffffffffff811115610da757610da6610d6a565b5b602083019150836020820283011115610dc357610dc2610d6f565b5b9250929050565b600080600080600060808688031215610de657610de5610b27565b5b6000610df488828901610b88565b9550506020610e0588828901610b88565b9450506040610e1688828901610d50565b935050606086013567ffffffffffffffff811115610e3757610e36610b2c565b5b610e4388828901610d74565b92509250509295509295909350565b610e5b81610b31565b82525050565b6000602082019050610e766000830184610e52565b92915050565b60008060008060608587031215610e9657610e95610b27565b5b6000610ea487828801610b88565b9450506020610eb587828801610b88565b935050604085013567ffffffffffffffff811115610ed657610ed5610b2c565b5b610ee287828801610d74565b925092505092959194509250565b600082825260208201905092915050565b7f4e6f20766f7465732068617665206265656e2063617374000000000000000000600082015250565b6000610f37601783610ef0565b9150610f4282610f01565b602082019050919050565b60006020820190508181036000830152610f6681610f2a565b9050919050565b7f43686f696365206d757374206265206265747765656e203120616e64206d617860008201527f43686f6963650000000000000000000000000000000000000000000000000000602082015250565b6000610fc9602683610ef0565b9150610fd482610f6d565b604082019050919050565b60006020820190508181036000830152610ff881610fbc565b9050919050565b7f57696e6e65722068617320616c7265616479206265656e207365740000000000600082015250565b6000611035601b83610ef0565b915061104082610fff565b602082019050919050565b6000602082019050818103600083015261106481611028565b9050919050565b7f546869732063686f69636520686173207265636569766564206e6f20766f746560008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006110c7602183610ef0565b91506110d28261106b565b604082019050919050565b600060208201905081810360008301526110f6816110ba565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061113782610b67565b915061114283610b67565b925082820390508181111561115a576111596110fd565b5b92915050565b600061116b82610b67565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361119d5761119c6110fd565b5b600182019050919050565b7f546869732063686f69636520636f756c64207374696c6c206265206f7665727460008201527f616b656e2069662072656d61696e696e6720766f7465727320766f7465000000602082015250565b6000611204603d83610ef0565b915061120f826111a8565b604082019050919050565b60006020820190508181036000830152611233816111f7565b9050919050565b7f706f6c6c20646f65736e27742065786973740000000000000000000000000000600082015250565b6000611270601283610ef0565b915061127b8261123a565b602082019050919050565b6000602082019050818103600083015261129f81611263565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006112e082610b67565b91506112eb83610b67565b9250828201905080821115611303576113026110fd565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b6000819050919050565b61135681610d27565b82525050565b6000611368838361134d565b60208301905092915050565b60006113836020840184610d50565b905092915050565b6000602082019050919050565b60006113a48385611338565b93506113af82611343565b8060005b858110156113e8576113c58284611374565b6113cf888261135c565b97506113da8361138b565b9250506001810190506113b3565b5085925050509392505050565b6000611402828486611398565b91508190509392505050565b61141781610d27565b82525050565b60006080820190506114326000830187610c0a565b61143f6020830186610c0a565b61144c604083018561140e565b6114596060830184610e52565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f73656e6465722063616e277420766f7465000000000000000000000000000000600082015250565b60006114c7601183610ef0565b91506114d282611491565b602082019050919050565b600060208201905081810360008301526114f6816114ba565b9050919050565b7f4d617843686f696365206d7573742062652067726561746572207468616e207a60008201527f65726f0000000000000000000000000000000000000000000000000000000000602082015250565b6000611559602383610ef0565b9150611564826114fd565b604082019050919050565b600060208201905081810360008301526115888161154c565b9050919050565b7f5468657265206d757374206265206174206c65617374206f6e6520766f746572600082015250565b60006115c5602083610ef0565b91506115d08261158f565b602082019050919050565b600060208201905081810360008301526115f4816115b8565b9050919050565b7f706f6c6c20616c72656164792065786973747300000000000000000000000000600082015250565b6000611631601383610ef0565b915061163c826115fb565b602082019050919050565b6000602082019050818103600083015261166081611624565b9050919050565b60006020828403121561167d5761167c610b27565b5b600061168b84828501610d50565b91505092915050565b60006020820190506116a96000830184610c0a565b92915050565b60008115159050919050565b6116c4816116af565b82525050565b60006020820190506116df60008301846116bb565b92915050565b600081519050919050565b600081905092915050565b60005b838110156117195780820151818401526020810190506116fe565b60008484015250505050565b6000611730826116e5565b61173a81856116f0565b935061174a8185602086016116fb565b80840191505092915050565b60006117628284611725565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006117948261176d565b61179e8185610ef0565b93506117ae8185602086016116fb565b6117b781611778565b840191505092915050565b600060208201905081810360008301526117dc8184611789565b90509291505056fe506f6c6c20646561646c696e652068617320706173736564206f7220706f6c6c20646f6573206e6f74206578697374
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0FW`\0\x80\xFD[Pa\x18\x14\x80a\0\x1F`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0WW`\x005`\xE0\x1C\x80c\t\x8C\xF9f\x14a\0\\W\x80cL\x05\x11\0\x14a\0xW\x80c_\xE5\xC1\xEC\x14a\0\xA9W\x80c\x9E\xF1 L\x14a\0\xD9W\x80c\xA4\xED(Z\x14a\0\xF5W[`\0\x80\xFD[a\0v`\x04\x806\x03\x81\x01\x90a\0q\x91\x90a\x0B\x9DV[a\x01%V[\0[a\0\x92`\x04\x806\x03\x81\x01\x90a\0\x8D\x91\x90a\x0B\xDDV[a\x03\xC6V[`@Qa\0\xA0\x92\x91\x90a\x0C\xD7V[`@Q\x80\x91\x03\x90\xF3[a\0\xC3`\x04\x806\x03\x81\x01\x90a\0\xBE\x91\x90a\r\xCAV[a\x04\xE7V[`@Qa\0\xD0\x91\x90a\x0EaV[`@Q\x80\x91\x03\x90\xF3[a\0\xF3`\x04\x806\x03\x81\x01\x90a\0\xEE\x91\x90a\x0B\x9DV[a\x05IV[\0[a\x01\x0F`\x04\x806\x03\x81\x01\x90a\x01\n\x91\x90a\x0E|V[a\x07\x86V[`@Qa\x01\x1C\x91\x90a\x0EaV[`@Q\x80\x91\x03\x90\xF3[`\0\x80`\0\x84\x81R` \x01\x90\x81R` \x01`\0 \x90Pa\x01~\x81`\0\x01T`@Q\x80`@\x01`@R\x80` \x81R` \x01\x7FPoll deadline has not passed yet\x81RPa\n\x11V[`\0\x81`\x05\x01T\x11a\x01\xC5W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x01\xBC\x90a\x0FMV[`@Q\x80\x91\x03\x90\xFD[`\0\x82\x11\x80\x15a\x01\xD9WP\x80`\x01\x01T\x82\x11\x15[a\x02\x18W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x02\x0F\x90a\x0F\xDFV[`@Q\x80\x91\x03\x90\xFD[`\0\x81`\x07\x01T\x14a\x02_W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x02V\x90a\x10KV[`@Q\x80\x91\x03\x90\xFD[`\0\x81`\x04\x01`\0\x84\x81R` \x01\x90\x81R` \x01`\0 T\x90P`\0\x81\x11a\x02\xBCW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x02\xB3\x90a\x10\xDDV[`@Q\x80\x91\x03\x90\xFD[`\0\x82`\x05\x01T\x83`\x06\x01Ta\x02\xD2\x91\x90a\x11,V[\x90P`\0\x80`\x01\x90P[\x84`\x01\x01T\x81\x11a\x039W\x85\x81\x03\x15a\x03&W\x81\x85`\x04\x01`\0\x83\x81R` \x01\x90\x81R` \x01`\0 T\x11\x15a\x03%W\x84`\x04\x01`\0\x82\x81R` \x01\x90\x81R` \x01`\0 T\x91P[[\x80\x80a\x031\x90a\x11`V[\x91PPa\x02\xDCV[P\x81\x81\x84a\x03G\x91\x90a\x11,V[\x11a\x03\x87W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x03~\x90a\x12\x1AV[`@Q\x80\x91\x03\x90\xFD[\x84\x84`\x07\x01\x81\x90UP\x84\x86\x7F&\x9D:$q$6\xF7}\xF1]c\xDE}#7\xA0`\xC9\x10-\xEEoF\xC9\t\xFB\x0F\xA2\xD5/\x0C`@Q`@Q\x80\x91\x03\x90\xA3PPPPPPV[`\0```\0\x80`\0\x85\x81R` \x01\x90\x81R` \x01`\0 \x90P`\0\x81`\x01\x01T\x11a\x04'W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04\x1E\x90a\x12\x86V[`@Q\x80\x91\x03\x90\xFD[`\0\x81`\x01\x01Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04GWa\x04Fa\x12\xA6V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x04uW\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P`\0[\x82`\x01\x01T\x81\x10\x15a\x04\xD5W\x82`\x04\x01`\0`\x01\x83a\x04\x9A\x91\x90a\x12\xD5V[\x81R` \x01\x90\x81R` \x01`\0 T\x82\x82\x81Q\x81\x10a\x04\xBCWa\x04\xBBa\x13\tV[[` \x02` \x01\x01\x81\x81RPP\x80\x80`\x01\x01\x91PPa\x04{V[P\x81`\x06\x01T\x81\x93P\x93PPP\x91P\x91V[`\0\x85\x85\x85\x85\x85`@Q` \x01a\x04\xFF\x92\x91\x90a\x13\xF5V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q` \x01a\x05(\x94\x93\x92\x91\x90a\x14\x1DV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x95\x94PPPPPV[`\0\x80`\0\x84\x81R` \x01\x90\x81R` \x01`\0 \x90Pa\x05\x85\x81`\0\x01T`@Q\x80``\x01`@R\x80`/\x81R` \x01a\x17\xE5`/\x919a\n!V[`\0\x82\x11\x80\x15a\x05\x99WP\x80`\x01\x01T\x82\x11\x15[a\x05\xD8W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x05\xCF\x90a\x0F\xDFV[`@Q\x80\x91\x03\x90\xFD[`\x01`\x02\x81\x11\x15a\x05\xECWa\x05\xEBa\x14bV[[\x81`\x03\x01`\x003s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x02\x81\x11\x15a\x06MWa\x06La\x14bV[[\x14a\x06\x8DW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x06\x84\x90a\x14\xDDV[`@Q\x80\x91\x03\x90\xFD[`\x02\x81`\x03\x01`\x003s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x02\x81\x11\x15a\x06\xF2Wa\x06\xF1a\x14bV[[\x02\x17\x90UP\x80`\x04\x01`\0\x83\x81R` \x01\x90\x81R` \x01`\0 `\0\x81T\x80\x92\x91\x90a\x07\x1D\x90a\x11`V[\x91\x90PUP\x80`\x05\x01`\0\x81T\x80\x92\x91\x90a\x077\x90a\x11`V[\x91\x90PUP\x813s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x7F\xE4\xAB\xC58\x0F\xA6\x93\x9D\x1D\xC2;^\x90\xB3\xA8\xA0\xE3(\xF0\xF1\xA8*_B\xBF\xB7\x95\xBF\x9Cqu\x05`@Q`@Q\x80\x91\x03\x90\xA4PPPV[`\0a\x07\xC7\x85`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7FDeadline must be in the future\0\0\x81RPa\n!V[`\0\x84\x11a\x08\nW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x08\x01\x90a\x15oV[`@Q\x80\x91\x03\x90\xFD[`\0\x83\x83\x90P\x11a\x08PW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x08G\x90a\x15\xDBV[`@Q\x80\x91\x03\x90\xFD[`\0a\x08_\x86\x863\x87\x87a\x04\xE7V[\x90P`\0\x80`\0\x83\x81R` \x01\x90\x81R` \x01`\0 \x90P`\0\x81`\x06\x01T\x14a\x08\xBEW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x08\xB5\x90a\x16GV[`@Q\x80\x91\x03\x90\xFD[\x86\x81`\0\x01\x81\x90UP\x85\x81`\x01\x01\x81\x90UP3\x81`\x02\x01`\0a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x84\x84\x90P\x81`\x06\x01\x81\x90UP`\0[\x85\x85\x90P\x81\x10\x15a\t\xCBW`\x01\x82`\x03\x01`\0\x88\x88\x85\x81\x81\x10a\tHWa\tGa\x13\tV[[\x90P` \x02\x01` \x81\x01\x90a\t]\x91\x90a\x16gV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x02\x81\x11\x15a\t\xB9Wa\t\xB8a\x14bV[[\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa\t\"V[P\x81\x7F\xF8Y\x04\x1DJ\xDD\xF0\x85\xC6\"k.\x875\xA1U\xAE*L\x02\x13\xA9j,\xFC\xB9}O\xE4\xD3\x81q\x88`@Qa\t\xFC\x91\x90a\x16\x94V[`@Q\x80\x91\x03\x90\xA2\x81\x92PPP\x94\x93PPPPV[a\n\x1D\x82B\x11\x82a\n1V[PPV[a\n-\x82B\x10\x82a\n1V[PPV[`\0\x7F=\xCD\xF6;A\xC1\x03V}r%\x97j\xD9\x14^\x86lz}\xCC\xC6\xC2w\xEA\x86\xAB\xBD&\x8F\xBA\xC9`\0\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83`@Q` \x01a\n~\x91\x90a\x16\xCAV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Qa\n\x9A\x91\x90a\x17VV[`\0`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80`\0\x81\x14a\n\xD5W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\n\xDAV[``\x91P[PP\x90P\x80\x82\x90a\x0B!W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0B\x18\x91\x90a\x17\xC2V[`@Q\x80\x91\x03\x90\xFD[PPPPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x81\x90P\x91\x90PV[a\x0BD\x81a\x0B1V[\x81\x14a\x0BOW`\0\x80\xFD[PV[`\0\x815\x90Pa\x0Ba\x81a\x0B;V[\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\x0Bz\x81a\x0BgV[\x81\x14a\x0B\x85W`\0\x80\xFD[PV[`\0\x815\x90Pa\x0B\x97\x81a\x0BqV[\x92\x91PPV[`\0\x80`@\x83\x85\x03\x12\x15a\x0B\xB4Wa\x0B\xB3a\x0B'V[[`\0a\x0B\xC2\x85\x82\x86\x01a\x0BRV[\x92PP` a\x0B\xD3\x85\x82\x86\x01a\x0B\x88V[\x91PP\x92P\x92\x90PV[`\0` \x82\x84\x03\x12\x15a\x0B\xF3Wa\x0B\xF2a\x0B'V[[`\0a\x0C\x01\x84\x82\x85\x01a\x0BRV[\x91PP\x92\x91PPV[a\x0C\x13\x81a\x0BgV[\x82RPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x0CN\x81a\x0BgV[\x82RPPV[`\0a\x0C`\x83\x83a\x0CEV[` \x83\x01\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x0C\x84\x82a\x0C\x19V[a\x0C\x8E\x81\x85a\x0C$V[\x93Pa\x0C\x99\x83a\x0C5V[\x80`\0[\x83\x81\x10\x15a\x0C\xCAW\x81Qa\x0C\xB1\x88\x82a\x0CTV[\x97Pa\x0C\xBC\x83a\x0ClV[\x92PP`\x01\x81\x01\x90Pa\x0C\x9DV[P\x85\x93PPPP\x92\x91PPV[`\0`@\x82\x01\x90Pa\x0C\xEC`\0\x83\x01\x85a\x0C\nV[\x81\x81\x03` \x83\x01Ra\x0C\xFE\x81\x84a\x0CyV[\x90P\x93\x92PPPV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\r2\x82a\r\x07V[\x90P\x91\x90PV[a\rB\x81a\r'V[\x81\x14a\rMW`\0\x80\xFD[PV[`\0\x815\x90Pa\r_\x81a\r9V[\x92\x91PPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\x83`\x1F\x84\x01\x12a\r\x8AWa\r\x89a\reV[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\xA7Wa\r\xA6a\rjV[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\r\xC3Wa\r\xC2a\roV[[\x92P\x92\x90PV[`\0\x80`\0\x80`\0`\x80\x86\x88\x03\x12\x15a\r\xE6Wa\r\xE5a\x0B'V[[`\0a\r\xF4\x88\x82\x89\x01a\x0B\x88V[\x95PP` a\x0E\x05\x88\x82\x89\x01a\x0B\x88V[\x94PP`@a\x0E\x16\x88\x82\x89\x01a\rPV[\x93PP``\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E7Wa\x0E6a\x0B,V[[a\x0EC\x88\x82\x89\x01a\rtV[\x92P\x92PP\x92\x95P\x92\x95\x90\x93PV[a\x0E[\x81a\x0B1V[\x82RPPV[`\0` \x82\x01\x90Pa\x0Ev`\0\x83\x01\x84a\x0ERV[\x92\x91PPV[`\0\x80`\0\x80``\x85\x87\x03\x12\x15a\x0E\x96Wa\x0E\x95a\x0B'V[[`\0a\x0E\xA4\x87\x82\x88\x01a\x0B\x88V[\x94PP` a\x0E\xB5\x87\x82\x88\x01a\x0B\x88V[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E\xD6Wa\x0E\xD5a\x0B,V[[a\x0E\xE2\x87\x82\x88\x01a\rtV[\x92P\x92PP\x92\x95\x91\x94P\x92PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FNo votes have been cast\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x0F7`\x17\x83a\x0E\xF0V[\x91Pa\x0FB\x82a\x0F\x01V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0Ff\x81a\x0F*V[\x90P\x91\x90PV[\x7FChoice must be between 1 and max`\0\x82\x01R\x7FChoice\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[`\0a\x0F\xC9`&\x83a\x0E\xF0V[\x91Pa\x0F\xD4\x82a\x0FmV[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0F\xF8\x81a\x0F\xBCV[\x90P\x91\x90PV[\x7FWinner has already been set\0\0\0\0\0`\0\x82\x01RPV[`\0a\x105`\x1B\x83a\x0E\xF0V[\x91Pa\x10@\x82a\x0F\xFFV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x10d\x81a\x10(V[\x90P\x91\x90PV[\x7FThis choice has received no vote`\0\x82\x01R\x7Fs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[`\0a\x10\xC7`!\x83a\x0E\xF0V[\x91Pa\x10\xD2\x82a\x10kV[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x10\xF6\x81a\x10\xBAV[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[`\0a\x117\x82a\x0BgV[\x91Pa\x11B\x83a\x0BgV[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\x11ZWa\x11Ya\x10\xFDV[[\x92\x91PPV[`\0a\x11k\x82a\x0BgV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a\x11\x9DWa\x11\x9Ca\x10\xFDV[[`\x01\x82\x01\x90P\x91\x90PV[\x7FThis choice could still be overt`\0\x82\x01R\x7Faken if remaining voters vote\0\0\0` \x82\x01RPV[`\0a\x12\x04`=\x83a\x0E\xF0V[\x91Pa\x12\x0F\x82a\x11\xA8V[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x123\x81a\x11\xF7V[\x90P\x91\x90PV[\x7Fpoll doesn't exist\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x12p`\x12\x83a\x0E\xF0V[\x91Pa\x12{\x82a\x12:V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x12\x9F\x81a\x12cV[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[`\0a\x12\xE0\x82a\x0BgV[\x91Pa\x12\xEB\x83a\x0BgV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x13\x03Wa\x13\x02a\x10\xFDV[[\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[`\0\x81\x90P\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\x13V\x81a\r'V[\x82RPPV[`\0a\x13h\x83\x83a\x13MV[` \x83\x01\x90P\x92\x91PPV[`\0a\x13\x83` \x84\x01\x84a\rPV[\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x13\xA4\x83\x85a\x138V[\x93Pa\x13\xAF\x82a\x13CV[\x80`\0[\x85\x81\x10\x15a\x13\xE8Wa\x13\xC5\x82\x84a\x13tV[a\x13\xCF\x88\x82a\x13\\V[\x97Pa\x13\xDA\x83a\x13\x8BV[\x92PP`\x01\x81\x01\x90Pa\x13\xB3V[P\x85\x92PPP\x93\x92PPPV[`\0a\x14\x02\x82\x84\x86a\x13\x98V[\x91P\x81\x90P\x93\x92PPPV[a\x14\x17\x81a\r'V[\x82RPPV[`\0`\x80\x82\x01\x90Pa\x142`\0\x83\x01\x87a\x0C\nV[a\x14?` \x83\x01\x86a\x0C\nV[a\x14L`@\x83\x01\x85a\x14\x0EV[a\x14Y``\x83\x01\x84a\x0ERV[\x95\x94PPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`!`\x04R`$`\0\xFD[\x7Fsender can't vote\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x14\xC7`\x11\x83a\x0E\xF0V[\x91Pa\x14\xD2\x82a\x14\x91V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x14\xF6\x81a\x14\xBAV[\x90P\x91\x90PV[\x7FMaxChoice must be greater than z`\0\x82\x01R\x7Fero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[`\0a\x15Y`#\x83a\x0E\xF0V[\x91Pa\x15d\x82a\x14\xFDV[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x15\x88\x81a\x15LV[\x90P\x91\x90PV[\x7FThere must be at least one voter`\0\x82\x01RPV[`\0a\x15\xC5` \x83a\x0E\xF0V[\x91Pa\x15\xD0\x82a\x15\x8FV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x15\xF4\x81a\x15\xB8V[\x90P\x91\x90PV[\x7Fpoll already exists\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x161`\x13\x83a\x0E\xF0V[\x91Pa\x16<\x82a\x15\xFBV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x16`\x81a\x16$V[\x90P\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x16}Wa\x16|a\x0B'V[[`\0a\x16\x8B\x84\x82\x85\x01a\rPV[\x91PP\x92\x91PPV[`\0` \x82\x01\x90Pa\x16\xA9`\0\x83\x01\x84a\x0C\nV[\x92\x91PPV[`\0\x81\x15\x15\x90P\x91\x90PV[a\x16\xC4\x81a\x16\xAFV[\x82RPPV[`\0` \x82\x01\x90Pa\x16\xDF`\0\x83\x01\x84a\x16\xBBV[\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\x17\x19W\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x16\xFEV[`\0\x84\x84\x01RPPPPV[`\0a\x170\x82a\x16\xE5V[a\x17:\x81\x85a\x16\xF0V[\x93Pa\x17J\x81\x85` \x86\x01a\x16\xFBV[\x80\x84\x01\x91PP\x92\x91PPV[`\0a\x17b\x82\x84a\x17%V[\x91P\x81\x90P\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[`\0a\x17\x94\x82a\x17mV[a\x17\x9E\x81\x85a\x0E\xF0V[\x93Pa\x17\xAE\x81\x85` \x86\x01a\x16\xFBV[a\x17\xB7\x81a\x17xV[\x84\x01\x91PP\x92\x91PPV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x17\xDC\x81\x84a\x17\x89V[\x90P\x92\x91PPV\xFEPoll deadline has passed or poll does not exist",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063098cf9661461005c5780634c051100146100785780635fe5c1ec146100a95780639ef1204c146100d9578063a4ed285a146100f5575b600080fd5b61007660048036038101906100719190610b9d565b610125565b005b610092600480360381019061008d9190610bdd565b6103c6565b6040516100a0929190610cd7565b60405180910390f35b6100c360048036038101906100be9190610dca565b6104e7565b6040516100d09190610e61565b60405180910390f35b6100f360048036038101906100ee9190610b9d565b610549565b005b61010f600480360381019061010a9190610e7c565b610786565b60405161011c9190610e61565b60405180910390f35b6000806000848152602001908152602001600020905061017e81600001546040518060400160405280602081526020017f506f6c6c20646561646c696e6520686173206e6f742070617373656420796574815250610a11565b60008160050154116101c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101bc90610f4d565b60405180910390fd5b6000821180156101d9575080600101548211155b610218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020f90610fdf565b60405180910390fd5b600081600701541461025f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102569061104b565b60405180910390fd5b6000816004016000848152602001908152602001600020549050600081116102bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b3906110dd565b60405180910390fd5b6000826005015483600601546102d2919061112c565b9050600080600190505b8460010154811161033957858103156103265781856004016000838152602001908152602001600020541115610325578460040160008281526020019081526020016000205491505b5b808061033190611160565b9150506102dc565b50818184610347919061112c565b11610387576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037e9061121a565b60405180910390fd5b84846007018190555084867f269d3a24712436f77df15d63de7d2337a060c9102dee6f46c909fb0fa2d52f0c60405160405180910390a3505050505050565b60006060600080600085815260200190815260200160002090506000816001015411610427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041e90611286565b60405180910390fd5b6000816001015467ffffffffffffffff811115610447576104466112a6565b5b6040519080825280602002602001820160405280156104755781602001602082028036833780820191505090505b50905060005b82600101548110156104d55782600401600060018361049a91906112d5565b8152602001908152602001600020548282815181106104bc576104bb611309565b5b602002602001018181525050808060010191505061047b565b50816006015481935093505050915091565b600085858585856040516020016104ff9291906113f5565b60405160208183030381529060405280519060200120604051602001610528949392919061141d565b60405160208183030381529060405280519060200120905095945050505050565b6000806000848152602001908152602001600020905061058581600001546040518060600160405280602f81526020016117e5602f9139610a21565b600082118015610599575080600101548211155b6105d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cf90610fdf565b60405180910390fd5b600160028111156105ec576105eb611462565b5b8160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600281111561064d5761064c611462565b5b1461068d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610684906114dd565b60405180910390fd5b60028160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360028111156106f2576106f1611462565b5b0217905550806004016000838152602001908152602001600020600081548092919061071d90611160565b919050555080600501600081548092919061073790611160565b9190505550813373ffffffffffffffffffffffffffffffffffffffff16847fe4abc5380fa6939d1dc23b5e90b3a8a0e328f0f1a82a5f42bfb795bf9c71750560405160405180910390a4505050565b60006107c7856040518060400160405280601e81526020017f446561646c696e65206d75737420626520696e20746865206675747572650000815250610a21565b6000841161080a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108019061156f565b60405180910390fd5b60008383905011610850576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610847906115db565b60405180910390fd5b600061085f86863387876104e7565b90506000806000838152602001908152602001600020905060008160060154146108be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b590611647565b60405180910390fd5b868160000181905550858160010181905550338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084849050816006018190555060005b858590508110156109cb57600182600301600088888581811061094857610947611309565b5b905060200201602081019061095d9190611667565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360028111156109b9576109b8611462565b5b02179055508080600101915050610922565b50817ff859041d4addf085c6226b2e8735a155ae2a4c0213a96a2cfcb97d4fe4d38171886040516109fc9190611694565b60405180910390a28192505050949350505050565b610a1d82421182610a31565b5050565b610a2d82421082610a31565b5050565b60007f3dcdf63b41c103567d7225976ad9145e866c7a7dccc6c277ea86abbd268fbac960001c73ffffffffffffffffffffffffffffffffffffffff1683604051602001610a7e91906116ca565b604051602081830303815290604052604051610a9a9190611756565b600060405180830381855afa9150503d8060008114610ad5576040519150601f19603f3d011682016040523d82523d6000602084013e610ada565b606091505b50509050808290610b21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1891906117c2565b60405180910390fd5b50505050565b600080fd5b600080fd5b6000819050919050565b610b4481610b31565b8114610b4f57600080fd5b50565b600081359050610b6181610b3b565b92915050565b6000819050919050565b610b7a81610b67565b8114610b8557600080fd5b50565b600081359050610b9781610b71565b92915050565b60008060408385031215610bb457610bb3610b27565b5b6000610bc285828601610b52565b9250506020610bd385828601610b88565b9150509250929050565b600060208284031215610bf357610bf2610b27565b5b6000610c0184828501610b52565b91505092915050565b610c1381610b67565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610c4e81610b67565b82525050565b6000610c608383610c45565b60208301905092915050565b6000602082019050919050565b6000610c8482610c19565b610c8e8185610c24565b9350610c9983610c35565b8060005b83811015610cca578151610cb18882610c54565b9750610cbc83610c6c565b925050600181019050610c9d565b5085935050505092915050565b6000604082019050610cec6000830185610c0a565b8181036020830152610cfe8184610c79565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d3282610d07565b9050919050565b610d4281610d27565b8114610d4d57600080fd5b50565b600081359050610d5f81610d39565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610d8a57610d89610d65565b5b8235905067ffffffffffffffff811115610da757610da6610d6a565b5b602083019150836020820283011115610dc357610dc2610d6f565b5b9250929050565b600080600080600060808688031215610de657610de5610b27565b5b6000610df488828901610b88565b9550506020610e0588828901610b88565b9450506040610e1688828901610d50565b935050606086013567ffffffffffffffff811115610e3757610e36610b2c565b5b610e4388828901610d74565b92509250509295509295909350565b610e5b81610b31565b82525050565b6000602082019050610e766000830184610e52565b92915050565b60008060008060608587031215610e9657610e95610b27565b5b6000610ea487828801610b88565b9450506020610eb587828801610b88565b935050604085013567ffffffffffffffff811115610ed657610ed5610b2c565b5b610ee287828801610d74565b925092505092959194509250565b600082825260208201905092915050565b7f4e6f20766f7465732068617665206265656e2063617374000000000000000000600082015250565b6000610f37601783610ef0565b9150610f4282610f01565b602082019050919050565b60006020820190508181036000830152610f6681610f2a565b9050919050565b7f43686f696365206d757374206265206265747765656e203120616e64206d617860008201527f43686f6963650000000000000000000000000000000000000000000000000000602082015250565b6000610fc9602683610ef0565b9150610fd482610f6d565b604082019050919050565b60006020820190508181036000830152610ff881610fbc565b9050919050565b7f57696e6e65722068617320616c7265616479206265656e207365740000000000600082015250565b6000611035601b83610ef0565b915061104082610fff565b602082019050919050565b6000602082019050818103600083015261106481611028565b9050919050565b7f546869732063686f69636520686173207265636569766564206e6f20766f746560008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006110c7602183610ef0565b91506110d28261106b565b604082019050919050565b600060208201905081810360008301526110f6816110ba565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061113782610b67565b915061114283610b67565b925082820390508181111561115a576111596110fd565b5b92915050565b600061116b82610b67565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361119d5761119c6110fd565b5b600182019050919050565b7f546869732063686f69636520636f756c64207374696c6c206265206f7665727460008201527f616b656e2069662072656d61696e696e6720766f7465727320766f7465000000602082015250565b6000611204603d83610ef0565b915061120f826111a8565b604082019050919050565b60006020820190508181036000830152611233816111f7565b9050919050565b7f706f6c6c20646f65736e27742065786973740000000000000000000000000000600082015250565b6000611270601283610ef0565b915061127b8261123a565b602082019050919050565b6000602082019050818103600083015261129f81611263565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006112e082610b67565b91506112eb83610b67565b9250828201905080821115611303576113026110fd565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b6000819050919050565b61135681610d27565b82525050565b6000611368838361134d565b60208301905092915050565b60006113836020840184610d50565b905092915050565b6000602082019050919050565b60006113a48385611338565b93506113af82611343565b8060005b858110156113e8576113c58284611374565b6113cf888261135c565b97506113da8361138b565b9250506001810190506113b3565b5085925050509392505050565b6000611402828486611398565b91508190509392505050565b61141781610d27565b82525050565b60006080820190506114326000830187610c0a565b61143f6020830186610c0a565b61144c604083018561140e565b6114596060830184610e52565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f73656e6465722063616e277420766f7465000000000000000000000000000000600082015250565b60006114c7601183610ef0565b91506114d282611491565b602082019050919050565b600060208201905081810360008301526114f6816114ba565b9050919050565b7f4d617843686f696365206d7573742062652067726561746572207468616e207a60008201527f65726f0000000000000000000000000000000000000000000000000000000000602082015250565b6000611559602383610ef0565b9150611564826114fd565b604082019050919050565b600060208201905081810360008301526115888161154c565b9050919050565b7f5468657265206d757374206265206174206c65617374206f6e6520766f746572600082015250565b60006115c5602083610ef0565b91506115d08261158f565b602082019050919050565b600060208201905081810360008301526115f4816115b8565b9050919050565b7f706f6c6c20616c72656164792065786973747300000000000000000000000000600082015250565b6000611631601383610ef0565b915061163c826115fb565b602082019050919050565b6000602082019050818103600083015261166081611624565b9050919050565b60006020828403121561167d5761167c610b27565b5b600061168b84828501610d50565b91505092915050565b60006020820190506116a96000830184610c0a565b92915050565b60008115159050919050565b6116c4816116af565b82525050565b60006020820190506116df60008301846116bb565b92915050565b600081519050919050565b600081905092915050565b60005b838110156117195780820151818401526020810190506116fe565b60008484015250505050565b6000611730826116e5565b61173a81856116f0565b935061174a8185602086016116fb565b80840191505092915050565b60006117628284611725565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006117948261176d565b61179e8185610ef0565b93506117ae8185602086016116fb565b6117b781611778565b840191505092915050565b600060208201905081810360008301526117dc8184611789565b90509291505056fe506f6c6c20646561646c696e652068617320706173736564206f7220706f6c6c20646f6573206e6f74206578697374
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0WW`\x005`\xE0\x1C\x80c\t\x8C\xF9f\x14a\0\\W\x80cL\x05\x11\0\x14a\0xW\x80c_\xE5\xC1\xEC\x14a\0\xA9W\x80c\x9E\xF1 L\x14a\0\xD9W\x80c\xA4\xED(Z\x14a\0\xF5W[`\0\x80\xFD[a\0v`\x04\x806\x03\x81\x01\x90a\0q\x91\x90a\x0B\x9DV[a\x01%V[\0[a\0\x92`\x04\x806\x03\x81\x01\x90a\0\x8D\x91\x90a\x0B\xDDV[a\x03\xC6V[`@Qa\0\xA0\x92\x91\x90a\x0C\xD7V[`@Q\x80\x91\x03\x90\xF3[a\0\xC3`\x04\x806\x03\x81\x01\x90a\0\xBE\x91\x90a\r\xCAV[a\x04\xE7V[`@Qa\0\xD0\x91\x90a\x0EaV[`@Q\x80\x91\x03\x90\xF3[a\0\xF3`\x04\x806\x03\x81\x01\x90a\0\xEE\x91\x90a\x0B\x9DV[a\x05IV[\0[a\x01\x0F`\x04\x806\x03\x81\x01\x90a\x01\n\x91\x90a\x0E|V[a\x07\x86V[`@Qa\x01\x1C\x91\x90a\x0EaV[`@Q\x80\x91\x03\x90\xF3[`\0\x80`\0\x84\x81R` \x01\x90\x81R` \x01`\0 \x90Pa\x01~\x81`\0\x01T`@Q\x80`@\x01`@R\x80` \x81R` \x01\x7FPoll deadline has not passed yet\x81RPa\n\x11V[`\0\x81`\x05\x01T\x11a\x01\xC5W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x01\xBC\x90a\x0FMV[`@Q\x80\x91\x03\x90\xFD[`\0\x82\x11\x80\x15a\x01\xD9WP\x80`\x01\x01T\x82\x11\x15[a\x02\x18W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x02\x0F\x90a\x0F\xDFV[`@Q\x80\x91\x03\x90\xFD[`\0\x81`\x07\x01T\x14a\x02_W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x02V\x90a\x10KV[`@Q\x80\x91\x03\x90\xFD[`\0\x81`\x04\x01`\0\x84\x81R` \x01\x90\x81R` \x01`\0 T\x90P`\0\x81\x11a\x02\xBCW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x02\xB3\x90a\x10\xDDV[`@Q\x80\x91\x03\x90\xFD[`\0\x82`\x05\x01T\x83`\x06\x01Ta\x02\xD2\x91\x90a\x11,V[\x90P`\0\x80`\x01\x90P[\x84`\x01\x01T\x81\x11a\x039W\x85\x81\x03\x15a\x03&W\x81\x85`\x04\x01`\0\x83\x81R` \x01\x90\x81R` \x01`\0 T\x11\x15a\x03%W\x84`\x04\x01`\0\x82\x81R` \x01\x90\x81R` \x01`\0 T\x91P[[\x80\x80a\x031\x90a\x11`V[\x91PPa\x02\xDCV[P\x81\x81\x84a\x03G\x91\x90a\x11,V[\x11a\x03\x87W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x03~\x90a\x12\x1AV[`@Q\x80\x91\x03\x90\xFD[\x84\x84`\x07\x01\x81\x90UP\x84\x86\x7F&\x9D:$q$6\xF7}\xF1]c\xDE}#7\xA0`\xC9\x10-\xEEoF\xC9\t\xFB\x0F\xA2\xD5/\x0C`@Q`@Q\x80\x91\x03\x90\xA3PPPPPPV[`\0```\0\x80`\0\x85\x81R` \x01\x90\x81R` \x01`\0 \x90P`\0\x81`\x01\x01T\x11a\x04'W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04\x1E\x90a\x12\x86V[`@Q\x80\x91\x03\x90\xFD[`\0\x81`\x01\x01Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04GWa\x04Fa\x12\xA6V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x04uW\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P`\0[\x82`\x01\x01T\x81\x10\x15a\x04\xD5W\x82`\x04\x01`\0`\x01\x83a\x04\x9A\x91\x90a\x12\xD5V[\x81R` \x01\x90\x81R` \x01`\0 T\x82\x82\x81Q\x81\x10a\x04\xBCWa\x04\xBBa\x13\tV[[` \x02` \x01\x01\x81\x81RPP\x80\x80`\x01\x01\x91PPa\x04{V[P\x81`\x06\x01T\x81\x93P\x93PPP\x91P\x91V[`\0\x85\x85\x85\x85\x85`@Q` \x01a\x04\xFF\x92\x91\x90a\x13\xF5V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q` \x01a\x05(\x94\x93\x92\x91\x90a\x14\x1DV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x95\x94PPPPPV[`\0\x80`\0\x84\x81R` \x01\x90\x81R` \x01`\0 \x90Pa\x05\x85\x81`\0\x01T`@Q\x80``\x01`@R\x80`/\x81R` \x01a\x17\xE5`/\x919a\n!V[`\0\x82\x11\x80\x15a\x05\x99WP\x80`\x01\x01T\x82\x11\x15[a\x05\xD8W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x05\xCF\x90a\x0F\xDFV[`@Q\x80\x91\x03\x90\xFD[`\x01`\x02\x81\x11\x15a\x05\xECWa\x05\xEBa\x14bV[[\x81`\x03\x01`\x003s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x02\x81\x11\x15a\x06MWa\x06La\x14bV[[\x14a\x06\x8DW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x06\x84\x90a\x14\xDDV[`@Q\x80\x91\x03\x90\xFD[`\x02\x81`\x03\x01`\x003s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x02\x81\x11\x15a\x06\xF2Wa\x06\xF1a\x14bV[[\x02\x17\x90UP\x80`\x04\x01`\0\x83\x81R` \x01\x90\x81R` \x01`\0 `\0\x81T\x80\x92\x91\x90a\x07\x1D\x90a\x11`V[\x91\x90PUP\x80`\x05\x01`\0\x81T\x80\x92\x91\x90a\x077\x90a\x11`V[\x91\x90PUP\x813s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x7F\xE4\xAB\xC58\x0F\xA6\x93\x9D\x1D\xC2;^\x90\xB3\xA8\xA0\xE3(\xF0\xF1\xA8*_B\xBF\xB7\x95\xBF\x9Cqu\x05`@Q`@Q\x80\x91\x03\x90\xA4PPPV[`\0a\x07\xC7\x85`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7FDeadline must be in the future\0\0\x81RPa\n!V[`\0\x84\x11a\x08\nW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x08\x01\x90a\x15oV[`@Q\x80\x91\x03\x90\xFD[`\0\x83\x83\x90P\x11a\x08PW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x08G\x90a\x15\xDBV[`@Q\x80\x91\x03\x90\xFD[`\0a\x08_\x86\x863\x87\x87a\x04\xE7V[\x90P`\0\x80`\0\x83\x81R` \x01\x90\x81R` \x01`\0 \x90P`\0\x81`\x06\x01T\x14a\x08\xBEW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x08\xB5\x90a\x16GV[`@Q\x80\x91\x03\x90\xFD[\x86\x81`\0\x01\x81\x90UP\x85\x81`\x01\x01\x81\x90UP3\x81`\x02\x01`\0a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x84\x84\x90P\x81`\x06\x01\x81\x90UP`\0[\x85\x85\x90P\x81\x10\x15a\t\xCBW`\x01\x82`\x03\x01`\0\x88\x88\x85\x81\x81\x10a\tHWa\tGa\x13\tV[[\x90P` \x02\x01` \x81\x01\x90a\t]\x91\x90a\x16gV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x02\x81\x11\x15a\t\xB9Wa\t\xB8a\x14bV[[\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa\t\"V[P\x81\x7F\xF8Y\x04\x1DJ\xDD\xF0\x85\xC6\"k.\x875\xA1U\xAE*L\x02\x13\xA9j,\xFC\xB9}O\xE4\xD3\x81q\x88`@Qa\t\xFC\x91\x90a\x16\x94V[`@Q\x80\x91\x03\x90\xA2\x81\x92PPP\x94\x93PPPPV[a\n\x1D\x82B\x11\x82a\n1V[PPV[a\n-\x82B\x10\x82a\n1V[PPV[`\0\x7F=\xCD\xF6;A\xC1\x03V}r%\x97j\xD9\x14^\x86lz}\xCC\xC6\xC2w\xEA\x86\xAB\xBD&\x8F\xBA\xC9`\0\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83`@Q` \x01a\n~\x91\x90a\x16\xCAV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Qa\n\x9A\x91\x90a\x17VV[`\0`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80`\0\x81\x14a\n\xD5W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\n\xDAV[``\x91P[PP\x90P\x80\x82\x90a\x0B!W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0B\x18\x91\x90a\x17\xC2V[`@Q\x80\x91\x03\x90\xFD[PPPPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x81\x90P\x91\x90PV[a\x0BD\x81a\x0B1V[\x81\x14a\x0BOW`\0\x80\xFD[PV[`\0\x815\x90Pa\x0Ba\x81a\x0B;V[\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\x0Bz\x81a\x0BgV[\x81\x14a\x0B\x85W`\0\x80\xFD[PV[`\0\x815\x90Pa\x0B\x97\x81a\x0BqV[\x92\x91PPV[`\0\x80`@\x83\x85\x03\x12\x15a\x0B\xB4Wa\x0B\xB3a\x0B'V[[`\0a\x0B\xC2\x85\x82\x86\x01a\x0BRV[\x92PP` a\x0B\xD3\x85\x82\x86\x01a\x0B\x88V[\x91PP\x92P\x92\x90PV[`\0` \x82\x84\x03\x12\x15a\x0B\xF3Wa\x0B\xF2a\x0B'V[[`\0a\x0C\x01\x84\x82\x85\x01a\x0BRV[\x91PP\x92\x91PPV[a\x0C\x13\x81a\x0BgV[\x82RPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x0CN\x81a\x0BgV[\x82RPPV[`\0a\x0C`\x83\x83a\x0CEV[` \x83\x01\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x0C\x84\x82a\x0C\x19V[a\x0C\x8E\x81\x85a\x0C$V[\x93Pa\x0C\x99\x83a\x0C5V[\x80`\0[\x83\x81\x10\x15a\x0C\xCAW\x81Qa\x0C\xB1\x88\x82a\x0CTV[\x97Pa\x0C\xBC\x83a\x0ClV[\x92PP`\x01\x81\x01\x90Pa\x0C\x9DV[P\x85\x93PPPP\x92\x91PPV[`\0`@\x82\x01\x90Pa\x0C\xEC`\0\x83\x01\x85a\x0C\nV[\x81\x81\x03` \x83\x01Ra\x0C\xFE\x81\x84a\x0CyV[\x90P\x93\x92PPPV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\r2\x82a\r\x07V[\x90P\x91\x90PV[a\rB\x81a\r'V[\x81\x14a\rMW`\0\x80\xFD[PV[`\0\x815\x90Pa\r_\x81a\r9V[\x92\x91PPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\x83`\x1F\x84\x01\x12a\r\x8AWa\r\x89a\reV[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\xA7Wa\r\xA6a\rjV[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\r\xC3Wa\r\xC2a\roV[[\x92P\x92\x90PV[`\0\x80`\0\x80`\0`\x80\x86\x88\x03\x12\x15a\r\xE6Wa\r\xE5a\x0B'V[[`\0a\r\xF4\x88\x82\x89\x01a\x0B\x88V[\x95PP` a\x0E\x05\x88\x82\x89\x01a\x0B\x88V[\x94PP`@a\x0E\x16\x88\x82\x89\x01a\rPV[\x93PP``\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E7Wa\x0E6a\x0B,V[[a\x0EC\x88\x82\x89\x01a\rtV[\x92P\x92PP\x92\x95P\x92\x95\x90\x93PV[a\x0E[\x81a\x0B1V[\x82RPPV[`\0` \x82\x01\x90Pa\x0Ev`\0\x83\x01\x84a\x0ERV[\x92\x91PPV[`\0\x80`\0\x80``\x85\x87\x03\x12\x15a\x0E\x96Wa\x0E\x95a\x0B'V[[`\0a\x0E\xA4\x87\x82\x88\x01a\x0B\x88V[\x94PP` a\x0E\xB5\x87\x82\x88\x01a\x0B\x88V[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E\xD6Wa\x0E\xD5a\x0B,V[[a\x0E\xE2\x87\x82\x88\x01a\rtV[\x92P\x92PP\x92\x95\x91\x94P\x92PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FNo votes have been cast\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x0F7`\x17\x83a\x0E\xF0V[\x91Pa\x0FB\x82a\x0F\x01V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0Ff\x81a\x0F*V[\x90P\x91\x90PV[\x7FChoice must be between 1 and max`\0\x82\x01R\x7FChoice\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[`\0a\x0F\xC9`&\x83a\x0E\xF0V[\x91Pa\x0F\xD4\x82a\x0FmV[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0F\xF8\x81a\x0F\xBCV[\x90P\x91\x90PV[\x7FWinner has already been set\0\0\0\0\0`\0\x82\x01RPV[`\0a\x105`\x1B\x83a\x0E\xF0V[\x91Pa\x10@\x82a\x0F\xFFV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x10d\x81a\x10(V[\x90P\x91\x90PV[\x7FThis choice has received no vote`\0\x82\x01R\x7Fs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[`\0a\x10\xC7`!\x83a\x0E\xF0V[\x91Pa\x10\xD2\x82a\x10kV[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x10\xF6\x81a\x10\xBAV[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[`\0a\x117\x82a\x0BgV[\x91Pa\x11B\x83a\x0BgV[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\x11ZWa\x11Ya\x10\xFDV[[\x92\x91PPV[`\0a\x11k\x82a\x0BgV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a\x11\x9DWa\x11\x9Ca\x10\xFDV[[`\x01\x82\x01\x90P\x91\x90PV[\x7FThis choice could still be overt`\0\x82\x01R\x7Faken if remaining voters vote\0\0\0` \x82\x01RPV[`\0a\x12\x04`=\x83a\x0E\xF0V[\x91Pa\x12\x0F\x82a\x11\xA8V[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x123\x81a\x11\xF7V[\x90P\x91\x90PV[\x7Fpoll doesn't exist\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x12p`\x12\x83a\x0E\xF0V[\x91Pa\x12{\x82a\x12:V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x12\x9F\x81a\x12cV[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[`\0a\x12\xE0\x82a\x0BgV[\x91Pa\x12\xEB\x83a\x0BgV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x13\x03Wa\x13\x02a\x10\xFDV[[\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[`\0\x81\x90P\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\x13V\x81a\r'V[\x82RPPV[`\0a\x13h\x83\x83a\x13MV[` \x83\x01\x90P\x92\x91PPV[`\0a\x13\x83` \x84\x01\x84a\rPV[\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x13\xA4\x83\x85a\x138V[\x93Pa\x13\xAF\x82a\x13CV[\x80`\0[\x85\x81\x10\x15a\x13\xE8Wa\x13\xC5\x82\x84a\x13tV[a\x13\xCF\x88\x82a\x13\\V[\x97Pa\x13\xDA\x83a\x13\x8BV[\x92PP`\x01\x81\x01\x90Pa\x13\xB3V[P\x85\x92PPP\x93\x92PPPV[`\0a\x14\x02\x82\x84\x86a\x13\x98V[\x91P\x81\x90P\x93\x92PPPV[a\x14\x17\x81a\r'V[\x82RPPV[`\0`\x80\x82\x01\x90Pa\x142`\0\x83\x01\x87a\x0C\nV[a\x14?` \x83\x01\x86a\x0C\nV[a\x14L`@\x83\x01\x85a\x14\x0EV[a\x14Y``\x83\x01\x84a\x0ERV[\x95\x94PPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`!`\x04R`$`\0\xFD[\x7Fsender can't vote\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x14\xC7`\x11\x83a\x0E\xF0V[\x91Pa\x14\xD2\x82a\x14\x91V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x14\xF6\x81a\x14\xBAV[\x90P\x91\x90PV[\x7FMaxChoice must be greater than z`\0\x82\x01R\x7Fero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[`\0a\x15Y`#\x83a\x0E\xF0V[\x91Pa\x15d\x82a\x14\xFDV[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x15\x88\x81a\x15LV[\x90P\x91\x90PV[\x7FThere must be at least one voter`\0\x82\x01RPV[`\0a\x15\xC5` \x83a\x0E\xF0V[\x91Pa\x15\xD0\x82a\x15\x8FV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x15\xF4\x81a\x15\xB8V[\x90P\x91\x90PV[\x7Fpoll already exists\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x161`\x13\x83a\x0E\xF0V[\x91Pa\x16<\x82a\x15\xFBV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x16`\x81a\x16$V[\x90P\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x16}Wa\x16|a\x0B'V[[`\0a\x16\x8B\x84\x82\x85\x01a\rPV[\x91PP\x92\x91PPV[`\0` \x82\x01\x90Pa\x16\xA9`\0\x83\x01\x84a\x0C\nV[\x92\x91PPV[`\0\x81\x15\x15\x90P\x91\x90PV[a\x16\xC4\x81a\x16\xAFV[\x82RPPV[`\0` \x82\x01\x90Pa\x16\xDF`\0\x83\x01\x84a\x16\xBBV[\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\x17\x19W\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x16\xFEV[`\0\x84\x84\x01RPPPPV[`\0a\x170\x82a\x16\xE5V[a\x17:\x81\x85a\x16\xF0V[\x93Pa\x17J\x81\x85` \x86\x01a\x16\xFBV[\x80\x84\x01\x91PP\x92\x91PPV[`\0a\x17b\x82\x84a\x17%V[\x91P\x81\x90P\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[`\0a\x17\x94\x82a\x17mV[a\x17\x9E\x81\x85a\x0E\xF0V[\x93Pa\x17\xAE\x81\x85` \x86\x01a\x16\xFBV[a\x17\xB7\x81a\x17xV[\x84\x01\x91PP\x92\x91PPV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x17\xDC\x81\x84a\x17\x89V[\x90P\x92\x91PPV\xFEPoll deadline has passed or poll does not exist",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `PollCreated(bytes32,uint256)` and selector `0xf859041d4addf085c6226b2e8735a155ae2a4c0213a96a2cfcb97d4fe4d38171`.
```solidity
event PollCreated(bytes32 indexed pollId, uint256 deadline);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PollCreated {
        #[allow(missing_docs)]
        pub pollId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PollCreated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "PollCreated(bytes32,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                248u8, 89u8, 4u8, 29u8, 74u8, 221u8, 240u8, 133u8, 198u8, 34u8, 107u8,
                46u8, 135u8, 53u8, 161u8, 85u8, 174u8, 42u8, 76u8, 2u8, 19u8, 169u8,
                106u8, 44u8, 252u8, 185u8, 125u8, 79u8, 228u8, 211u8, 129u8, 113u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    pollId: topics.1,
                    deadline: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.pollId.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.pollId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PollCreated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PollCreated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &PollCreated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Voted(bytes32,address,uint256)` and selector `0xe4abc5380fa6939d1dc23b5e90b3a8a0e328f0f1a82a5f42bfb795bf9c717505`.
```solidity
event Voted(bytes32 indexed pollId, address indexed voter, uint256 indexed choice);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Voted {
        #[allow(missing_docs)]
        pub pollId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub voter: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub choice: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Voted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "Voted(bytes32,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                228u8, 171u8, 197u8, 56u8, 15u8, 166u8, 147u8, 157u8, 29u8, 194u8, 59u8,
                94u8, 144u8, 179u8, 168u8, 160u8, 227u8, 40u8, 240u8, 241u8, 168u8, 42u8,
                95u8, 66u8, 191u8, 183u8, 149u8, 191u8, 156u8, 113u8, 117u8, 5u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    pollId: topics.1,
                    voter: topics.2,
                    choice: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.pollId.clone(),
                    self.voter.clone(),
                    self.choice.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.pollId);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.voter,
                );
                out[3usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.choice);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Voted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Voted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Voted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Winner(bytes32,uint256)` and selector `0x269d3a24712436f77df15d63de7d2337a060c9102dee6f46c909fb0fa2d52f0c`.
```solidity
event Winner(bytes32 indexed pollId, uint256 indexed choice);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Winner {
        #[allow(missing_docs)]
        pub pollId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub choice: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Winner {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "Winner(bytes32,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                38u8, 157u8, 58u8, 36u8, 113u8, 36u8, 54u8, 247u8, 125u8, 241u8, 93u8,
                99u8, 222u8, 125u8, 35u8, 55u8, 160u8, 96u8, 201u8, 16u8, 45u8, 238u8,
                111u8, 70u8, 201u8, 9u8, 251u8, 15u8, 162u8, 213u8, 47u8, 12u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    pollId: topics.1,
                    choice: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.pollId.clone(), self.choice.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.pollId);
                out[2usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.choice);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Winner {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Winner> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Winner) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `createPoll(uint256,uint256,address[])` and selector `0xa4ed285a`.
```solidity
function createPoll(uint256 deadline, uint256 maxChoice, address[] memory voters) external returns (bytes32 pollId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createPollCall {
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub maxChoice: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub voters: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`createPoll(uint256,uint256,address[])`](createPollCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createPollReturn {
        #[allow(missing_docs)]
        pub pollId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createPollCall> for UnderlyingRustTuple<'_> {
                fn from(value: createPollCall) -> Self {
                    (value.deadline, value.maxChoice, value.voters)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createPollCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        deadline: tuple.0,
                        maxChoice: tuple.1,
                        voters: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createPollReturn> for UnderlyingRustTuple<'_> {
                fn from(value: createPollReturn) -> Self {
                    (value.pollId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createPollReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { pollId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for createPollCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = createPollReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "createPoll(uint256,uint256,address[])";
            const SELECTOR: [u8; 4] = [164u8, 237u8, 40u8, 90u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxChoice),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.voters),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getPollId(uint256,uint256,address,address[])` and selector `0x5fe5c1ec`.
```solidity
function getPollId(uint256 deadline, uint256 maxChoice, address owner, address[] memory voters) external pure returns (bytes32 pollId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPollIdCall {
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub maxChoice: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub voters: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getPollId(uint256,uint256,address,address[])`](getPollIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPollIdReturn {
        #[allow(missing_docs)]
        pub pollId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPollIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: getPollIdCall) -> Self {
                    (value.deadline, value.maxChoice, value.owner, value.voters)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getPollIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        deadline: tuple.0,
                        maxChoice: tuple.1,
                        owner: tuple.2,
                        voters: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPollIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getPollIdReturn) -> Self {
                    (value.pollId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getPollIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { pollId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getPollIdCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getPollIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getPollId(uint256,uint256,address,address[])";
            const SELECTOR: [u8; 4] = [95u8, 229u8, 193u8, 236u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxChoice),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.voters),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getVotes(bytes32)` and selector `0x4c051100`.
```solidity
function getVotes(bytes32 pollId) external view returns (uint256 participants, uint256[] memory votes);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVotesCall {
        #[allow(missing_docs)]
        pub pollId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getVotes(bytes32)`](getVotesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVotesReturn {
        #[allow(missing_docs)]
        pub participants: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub votes: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVotesCall> for UnderlyingRustTuple<'_> {
                fn from(value: getVotesCall) -> Self {
                    (value.pollId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVotesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { pollId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVotesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getVotesReturn) -> Self {
                    (value.participants, value.votes)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVotesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        participants: tuple.0,
                        votes: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getVotesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getVotesReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getVotes(bytes32)";
            const SELECTOR: [u8; 4] = [76u8, 5u8, 17u8, 0u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.pollId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setWinningChoice(bytes32,uint256)` and selector `0x098cf966`.
```solidity
function setWinningChoice(bytes32 pollId, uint256 choice) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setWinningChoiceCall {
        #[allow(missing_docs)]
        pub pollId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub choice: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setWinningChoice(bytes32,uint256)`](setWinningChoiceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setWinningChoiceReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setWinningChoiceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setWinningChoiceCall) -> Self {
                    (value.pollId, value.choice)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setWinningChoiceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        pollId: tuple.0,
                        choice: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setWinningChoiceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setWinningChoiceReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setWinningChoiceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setWinningChoiceCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setWinningChoiceReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setWinningChoice(bytes32,uint256)";
            const SELECTOR: [u8; 4] = [9u8, 140u8, 249u8, 102u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.pollId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.choice),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `vote(bytes32,uint256)` and selector `0x9ef1204c`.
```solidity
function vote(bytes32 pollId, uint256 choice) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct voteCall {
        #[allow(missing_docs)]
        pub pollId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub choice: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`vote(bytes32,uint256)`](voteCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct voteReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<voteCall> for UnderlyingRustTuple<'_> {
                fn from(value: voteCall) -> Self {
                    (value.pollId, value.choice)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for voteCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        pollId: tuple.0,
                        choice: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<voteReturn> for UnderlyingRustTuple<'_> {
                fn from(value: voteReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for voteReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for voteCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = voteReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "vote(bytes32,uint256)";
            const SELECTOR: [u8; 4] = [158u8, 241u8, 32u8, 76u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.pollId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.choice),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Voting`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum VotingCalls {
        #[allow(missing_docs)]
        createPoll(createPollCall),
        #[allow(missing_docs)]
        getPollId(getPollIdCall),
        #[allow(missing_docs)]
        getVotes(getVotesCall),
        #[allow(missing_docs)]
        setWinningChoice(setWinningChoiceCall),
        #[allow(missing_docs)]
        vote(voteCall),
    }
    #[automatically_derived]
    impl VotingCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [9u8, 140u8, 249u8, 102u8],
            [76u8, 5u8, 17u8, 0u8],
            [95u8, 229u8, 193u8, 236u8],
            [158u8, 241u8, 32u8, 76u8],
            [164u8, 237u8, 40u8, 90u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for VotingCalls {
        const NAME: &'static str = "VotingCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::createPoll(_) => {
                    <createPollCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getPollId(_) => {
                    <getPollIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getVotes(_) => <getVotesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setWinningChoice(_) => {
                    <setWinningChoiceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::vote(_) => <voteCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<VotingCalls>] = &[
                {
                    fn setWinningChoice(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <setWinningChoiceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VotingCalls::setWinningChoice)
                    }
                    setWinningChoice
                },
                {
                    fn getVotes(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <getVotesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VotingCalls::getVotes)
                    }
                    getVotes
                },
                {
                    fn getPollId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <getPollIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VotingCalls::getPollId)
                    }
                    getPollId
                },
                {
                    fn vote(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <voteCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VotingCalls::vote)
                    }
                    vote
                },
                {
                    fn createPoll(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <createPollCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VotingCalls::createPoll)
                    }
                    createPoll
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::createPoll(inner) => {
                    <createPollCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getPollId(inner) => {
                    <getPollIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getVotes(inner) => {
                    <getVotesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setWinningChoice(inner) => {
                    <setWinningChoiceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::vote(inner) => {
                    <voteCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::createPoll(inner) => {
                    <createPollCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getPollId(inner) => {
                    <getPollIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getVotes(inner) => {
                    <getVotesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setWinningChoice(inner) => {
                    <setWinningChoiceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::vote(inner) => {
                    <voteCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`Voting`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum VotingEvents {
        #[allow(missing_docs)]
        PollCreated(PollCreated),
        #[allow(missing_docs)]
        Voted(Voted),
        #[allow(missing_docs)]
        Winner(Winner),
    }
    #[automatically_derived]
    impl VotingEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                38u8, 157u8, 58u8, 36u8, 113u8, 36u8, 54u8, 247u8, 125u8, 241u8, 93u8,
                99u8, 222u8, 125u8, 35u8, 55u8, 160u8, 96u8, 201u8, 16u8, 45u8, 238u8,
                111u8, 70u8, 201u8, 9u8, 251u8, 15u8, 162u8, 213u8, 47u8, 12u8,
            ],
            [
                228u8, 171u8, 197u8, 56u8, 15u8, 166u8, 147u8, 157u8, 29u8, 194u8, 59u8,
                94u8, 144u8, 179u8, 168u8, 160u8, 227u8, 40u8, 240u8, 241u8, 168u8, 42u8,
                95u8, 66u8, 191u8, 183u8, 149u8, 191u8, 156u8, 113u8, 117u8, 5u8,
            ],
            [
                248u8, 89u8, 4u8, 29u8, 74u8, 221u8, 240u8, 133u8, 198u8, 34u8, 107u8,
                46u8, 135u8, 53u8, 161u8, 85u8, 174u8, 42u8, 76u8, 2u8, 19u8, 169u8,
                106u8, 44u8, 252u8, 185u8, 125u8, 79u8, 228u8, 211u8, 129u8, 113u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for VotingEvents {
        const NAME: &'static str = "VotingEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<PollCreated as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <PollCreated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::PollCreated)
                }
                Some(<Voted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Voted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Voted)
                }
                Some(<Winner as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Winner as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Winner)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for VotingEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::PollCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Voted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Winner(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::PollCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Voted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Winner(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Voting`](self) contract instance.

See the [wrapper's documentation](`VotingInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> VotingInstance<T, P, N> {
        VotingInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<VotingInstance<T, P, N>>,
    > {
        VotingInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        VotingInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Voting`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Voting`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct VotingInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for VotingInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("VotingInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > VotingInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Voting`](self) contract instance.

See the [wrapper's documentation](`VotingInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<VotingInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> VotingInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> VotingInstance<T, P, N> {
            VotingInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > VotingInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`createPoll`] function.
        pub fn createPoll(
            &self,
            deadline: alloy::sol_types::private::primitives::aliases::U256,
            maxChoice: alloy::sol_types::private::primitives::aliases::U256,
            voters: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::SolCallBuilder<T, &P, createPollCall, N> {
            self.call_builder(
                &createPollCall {
                    deadline,
                    maxChoice,
                    voters,
                },
            )
        }
        ///Creates a new call builder for the [`getPollId`] function.
        pub fn getPollId(
            &self,
            deadline: alloy::sol_types::private::primitives::aliases::U256,
            maxChoice: alloy::sol_types::private::primitives::aliases::U256,
            owner: alloy::sol_types::private::Address,
            voters: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getPollIdCall, N> {
            self.call_builder(
                &getPollIdCall {
                    deadline,
                    maxChoice,
                    owner,
                    voters,
                },
            )
        }
        ///Creates a new call builder for the [`getVotes`] function.
        pub fn getVotes(
            &self,
            pollId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getVotesCall, N> {
            self.call_builder(&getVotesCall { pollId })
        }
        ///Creates a new call builder for the [`setWinningChoice`] function.
        pub fn setWinningChoice(
            &self,
            pollId: alloy::sol_types::private::FixedBytes<32>,
            choice: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setWinningChoiceCall, N> {
            self.call_builder(
                &setWinningChoiceCall {
                    pollId,
                    choice,
                },
            )
        }
        ///Creates a new call builder for the [`vote`] function.
        pub fn vote(
            &self,
            pollId: alloy::sol_types::private::FixedBytes<32>,
            choice: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, voteCall, N> {
            self.call_builder(&voteCall { pollId, choice })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > VotingInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`PollCreated`] event.
        pub fn PollCreated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, PollCreated, N> {
            self.event_filter::<PollCreated>()
        }
        ///Creates a new event filter for the [`Voted`] event.
        pub fn Voted_filter(&self) -> alloy_contract::Event<T, &P, Voted, N> {
            self.event_filter::<Voted>()
        }
        ///Creates a new event filter for the [`Winner`] event.
        pub fn Winner_filter(&self) -> alloy_contract::Event<T, &P, Winner, N> {
            self.event_filter::<Winner>()
        }
    }
}
