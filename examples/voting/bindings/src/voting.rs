/**

Generated by the following Solidity interface...
```solidity
interface Voting {
    event PollCreated(bytes32 indexed pollId, uint256 deadline);
    event Voted(bytes32 indexed pollId, address indexed voter, uint256 indexed choice);
    event Winner(bytes32 indexed pollId, uint256 indexed choice);

    function createPoll(uint256 deadline, uint256 maxChoice, address[] memory voters) external returns (bytes32 pollId);
    function getPollId(uint256 deadline, uint256 maxChoice, address owner, address[] memory voters) external pure returns (bytes32 pollId);
    function getVotes(bytes32 pollId) external view returns (uint256 participants, uint256[] memory votes);
    function setWinningChoice(bytes32 pollId, uint256 choice) external;
    function vote(bytes32 pollId, uint256 choice) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "createPoll",
    "inputs": [
      {
        "name": "deadline",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "maxChoice",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "voters",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [
      {
        "name": "pollId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getPollId",
    "inputs": [
      {
        "name": "deadline",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "maxChoice",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "voters",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [
      {
        "name": "pollId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "getVotes",
    "inputs": [
      {
        "name": "pollId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "participants",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "votes",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setWinningChoice",
    "inputs": [
      {
        "name": "pollId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "choice",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "vote",
    "inputs": [
      {
        "name": "pollId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "choice",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "PollCreated",
    "inputs": [
      {
        "name": "pollId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "deadline",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Voted",
    "inputs": [
      {
        "name": "pollId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "voter",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "choice",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Winner",
    "inputs": [
      {
        "name": "pollId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "choice",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod Voting {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600f57600080fd5b506115668061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063098cf9661461005c5780634c051100146100785780635fe5c1ec146100a95780639ef1204c146100d9578063a4ed285a146100f5575b600080fd5b61007660048036038101906100719190610aae565b610125565b005b610092600480360381019061008d9190610aee565b6102d7565b6040516100a0929190610be8565b60405180910390f35b6100c360048036038101906100be9190610cdb565b6103f8565b6040516100d09190610d72565b60405180910390f35b6100f360048036038101906100ee9190610aae565b61045a565b005b61010f600480360381019061010a9190610d8d565b610697565b60405161011c9190610d72565b60405180910390f35b6000806000848152602001908152602001600020905061017e81600001546040518060400160405280602081526020017f506f6c6c20646561646c696e6520686173206e6f742070617373656420796574815250610922565b600082118015610192575080600101548211155b6101d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c890610e84565b60405180910390fd5b60008160040160008481526020019081526020016000205490506000826005015483600601546102019190610ed3565b9050600080600190505b8460010154811161026857858103156102555781856004016000838152602001908152602001600020541115610254578460040160008281526020019081526020016000205491505b5b808061026090610f07565b91505061020b565b506102988282856102799190610ed3565b116040518060600160405280603d81526020016114fa603d9139610932565b84846007018190555084867f269d3a24712436f77df15d63de7d2337a060c9102dee6f46c909fb0fa2d52f0c60405160405180910390a3505050505050565b60006060600080600085815260200190815260200160002090506000816001015411610338576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032f90610f9b565b60405180910390fd5b6000816001015467ffffffffffffffff81111561035857610357610fbb565b5b6040519080825280602002602001820160405280156103865781602001602082028036833780820191505090505b50905060005b82600101548110156103e6578260040160006001836103ab9190610fea565b8152602001908152602001600020548282815181106103cd576103cc61101e565b5b602002602001018181525050808060010191505061038c565b50816006015481935093505050915091565b6000858585858560405160200161041092919061110a565b604051602081830303815290604052805190602001206040516020016104399493929190611132565b60405160208183030381529060405280519060200120905095945050505050565b6000806000848152602001908152602001600020905061049681600001546040518060600160405280602f8152602001611537602f9139610a28565b6000821180156104aa575080600101548211155b6104e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e090610e84565b60405180910390fd5b600160028111156104fd576104fc611177565b5b8160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600281111561055e5761055d611177565b5b1461059e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610595906111f2565b60405180910390fd5b60028160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600281111561060357610602611177565b5b0217905550806004016000838152602001908152602001600020600081548092919061062e90610f07565b919050555080600501600081548092919061064890610f07565b9190505550813373ffffffffffffffffffffffffffffffffffffffff16847fe4abc5380fa6939d1dc23b5e90b3a8a0e328f0f1a82a5f42bfb795bf9c71750560405160405180910390a4505050565b60006106d8856040518060400160405280601e81526020017f446561646c696e65206d75737420626520696e20746865206675747572650000815250610a28565b6000841161071b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071290611284565b60405180910390fd5b60008383905011610761576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610758906112f0565b60405180910390fd5b600061077086863387876103f8565b90506000806000838152602001908152602001600020905060008160060154146107cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c69061135c565b60405180910390fd5b868160000181905550858160010181905550338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084849050816006018190555060005b858590508110156108dc5760018260030160008888858181106108595761085861101e565b5b905060200201602081019061086e919061137c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360028111156108ca576108c9611177565b5b02179055508080600101915050610833565b50817ff859041d4addf085c6226b2e8735a155ae2a4c0213a96a2cfcb97d4fe4d381718860405161090d91906113a9565b60405180910390a28192505050949350505050565b61092e82421182610932565b5050565b60007f3dcdf63b41c103567d7225976ad9145e866c7a7dccc6c277ea86abbd268fbac960001c73ffffffffffffffffffffffffffffffffffffffff168360405160200161097f91906113df565b60405160208183030381529060405260405161099b919061146b565b600060405180830381855afa9150503d80600081146109d6576040519150601f19603f3d011682016040523d82523d6000602084013e6109db565b606091505b50509050808290610a22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1991906114d7565b60405180910390fd5b50505050565b610a3482421082610932565b5050565b600080fd5b600080fd5b6000819050919050565b610a5581610a42565b8114610a6057600080fd5b50565b600081359050610a7281610a4c565b92915050565b6000819050919050565b610a8b81610a78565b8114610a9657600080fd5b50565b600081359050610aa881610a82565b92915050565b60008060408385031215610ac557610ac4610a38565b5b6000610ad385828601610a63565b9250506020610ae485828601610a99565b9150509250929050565b600060208284031215610b0457610b03610a38565b5b6000610b1284828501610a63565b91505092915050565b610b2481610a78565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610b5f81610a78565b82525050565b6000610b718383610b56565b60208301905092915050565b6000602082019050919050565b6000610b9582610b2a565b610b9f8185610b35565b9350610baa83610b46565b8060005b83811015610bdb578151610bc28882610b65565b9750610bcd83610b7d565b925050600181019050610bae565b5085935050505092915050565b6000604082019050610bfd6000830185610b1b565b8181036020830152610c0f8184610b8a565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c4382610c18565b9050919050565b610c5381610c38565b8114610c5e57600080fd5b50565b600081359050610c7081610c4a565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610c9b57610c9a610c76565b5b8235905067ffffffffffffffff811115610cb857610cb7610c7b565b5b602083019150836020820283011115610cd457610cd3610c80565b5b9250929050565b600080600080600060808688031215610cf757610cf6610a38565b5b6000610d0588828901610a99565b9550506020610d1688828901610a99565b9450506040610d2788828901610c61565b935050606086013567ffffffffffffffff811115610d4857610d47610a3d565b5b610d5488828901610c85565b92509250509295509295909350565b610d6c81610a42565b82525050565b6000602082019050610d876000830184610d63565b92915050565b60008060008060608587031215610da757610da6610a38565b5b6000610db587828801610a99565b9450506020610dc687828801610a99565b935050604085013567ffffffffffffffff811115610de757610de6610a3d565b5b610df387828801610c85565b925092505092959194509250565b600082825260208201905092915050565b7f43686f696365206d757374206265206265747765656e203120616e64206d617860008201527f43686f6963650000000000000000000000000000000000000000000000000000602082015250565b6000610e6e602683610e01565b9150610e7982610e12565b604082019050919050565b60006020820190508181036000830152610e9d81610e61565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ede82610a78565b9150610ee983610a78565b9250828203905081811115610f0157610f00610ea4565b5b92915050565b6000610f1282610a78565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610f4457610f43610ea4565b5b600182019050919050565b7f706f6c6c20646f65736e27742065786973740000000000000000000000000000600082015250565b6000610f85601283610e01565b9150610f9082610f4f565b602082019050919050565b60006020820190508181036000830152610fb481610f78565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000610ff582610a78565b915061100083610a78565b925082820190508082111561101857611017610ea4565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b6000819050919050565b61106b81610c38565b82525050565b600061107d8383611062565b60208301905092915050565b60006110986020840184610c61565b905092915050565b6000602082019050919050565b60006110b9838561104d565b93506110c482611058565b8060005b858110156110fd576110da8284611089565b6110e48882611071565b97506110ef836110a0565b9250506001810190506110c8565b5085925050509392505050565b60006111178284866110ad565b91508190509392505050565b61112c81610c38565b82525050565b60006080820190506111476000830187610b1b565b6111546020830186610b1b565b6111616040830185611123565b61116e6060830184610d63565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f73656e6465722063616e277420766f7465000000000000000000000000000000600082015250565b60006111dc601183610e01565b91506111e7826111a6565b602082019050919050565b6000602082019050818103600083015261120b816111cf565b9050919050565b7f4d617843686f696365206d7573742062652067726561746572207468616e207a60008201527f65726f0000000000000000000000000000000000000000000000000000000000602082015250565b600061126e602383610e01565b915061127982611212565b604082019050919050565b6000602082019050818103600083015261129d81611261565b9050919050565b7f5468657265206d757374206265206174206c65617374206f6e6520766f746572600082015250565b60006112da602083610e01565b91506112e5826112a4565b602082019050919050565b60006020820190508181036000830152611309816112cd565b9050919050565b7f706f6c6c20616c72656164792065786973747300000000000000000000000000600082015250565b6000611346601383610e01565b915061135182611310565b602082019050919050565b6000602082019050818103600083015261137581611339565b9050919050565b60006020828403121561139257611391610a38565b5b60006113a084828501610c61565b91505092915050565b60006020820190506113be6000830184610b1b565b92915050565b60008115159050919050565b6113d9816113c4565b82525050565b60006020820190506113f460008301846113d0565b92915050565b600081519050919050565b600081905092915050565b60005b8381101561142e578082015181840152602081019050611413565b60008484015250505050565b6000611445826113fa565b61144f8185611405565b935061145f818560208601611410565b80840191505092915050565b6000611477828461143a565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006114a982611482565b6114b38185610e01565b93506114c3818560208601611410565b6114cc8161148d565b840191505092915050565b600060208201905081810360008301526114f1818461149e565b90509291505056fe546869732063686f69636520636f756c64207374696c6c206265206f76657274616b656e2069662072656d61696e696e6720766f7465727320766f7465506f6c6c20646561646c696e652068617320706173736564206f7220706f6c6c20646f6573206e6f74206578697374
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0FW`\0\x80\xFD[Pa\x15f\x80a\0\x1F`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0WW`\x005`\xE0\x1C\x80c\t\x8C\xF9f\x14a\0\\W\x80cL\x05\x11\0\x14a\0xW\x80c_\xE5\xC1\xEC\x14a\0\xA9W\x80c\x9E\xF1 L\x14a\0\xD9W\x80c\xA4\xED(Z\x14a\0\xF5W[`\0\x80\xFD[a\0v`\x04\x806\x03\x81\x01\x90a\0q\x91\x90a\n\xAEV[a\x01%V[\0[a\0\x92`\x04\x806\x03\x81\x01\x90a\0\x8D\x91\x90a\n\xEEV[a\x02\xD7V[`@Qa\0\xA0\x92\x91\x90a\x0B\xE8V[`@Q\x80\x91\x03\x90\xF3[a\0\xC3`\x04\x806\x03\x81\x01\x90a\0\xBE\x91\x90a\x0C\xDBV[a\x03\xF8V[`@Qa\0\xD0\x91\x90a\rrV[`@Q\x80\x91\x03\x90\xF3[a\0\xF3`\x04\x806\x03\x81\x01\x90a\0\xEE\x91\x90a\n\xAEV[a\x04ZV[\0[a\x01\x0F`\x04\x806\x03\x81\x01\x90a\x01\n\x91\x90a\r\x8DV[a\x06\x97V[`@Qa\x01\x1C\x91\x90a\rrV[`@Q\x80\x91\x03\x90\xF3[`\0\x80`\0\x84\x81R` \x01\x90\x81R` \x01`\0 \x90Pa\x01~\x81`\0\x01T`@Q\x80`@\x01`@R\x80` \x81R` \x01\x7FPoll deadline has not passed yet\x81RPa\t\"V[`\0\x82\x11\x80\x15a\x01\x92WP\x80`\x01\x01T\x82\x11\x15[a\x01\xD1W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x01\xC8\x90a\x0E\x84V[`@Q\x80\x91\x03\x90\xFD[`\0\x81`\x04\x01`\0\x84\x81R` \x01\x90\x81R` \x01`\0 T\x90P`\0\x82`\x05\x01T\x83`\x06\x01Ta\x02\x01\x91\x90a\x0E\xD3V[\x90P`\0\x80`\x01\x90P[\x84`\x01\x01T\x81\x11a\x02hW\x85\x81\x03\x15a\x02UW\x81\x85`\x04\x01`\0\x83\x81R` \x01\x90\x81R` \x01`\0 T\x11\x15a\x02TW\x84`\x04\x01`\0\x82\x81R` \x01\x90\x81R` \x01`\0 T\x91P[[\x80\x80a\x02`\x90a\x0F\x07V[\x91PPa\x02\x0BV[Pa\x02\x98\x82\x82\x85a\x02y\x91\x90a\x0E\xD3V[\x11`@Q\x80``\x01`@R\x80`=\x81R` \x01a\x14\xFA`=\x919a\t2V[\x84\x84`\x07\x01\x81\x90UP\x84\x86\x7F&\x9D:$q$6\xF7}\xF1]c\xDE}#7\xA0`\xC9\x10-\xEEoF\xC9\t\xFB\x0F\xA2\xD5/\x0C`@Q`@Q\x80\x91\x03\x90\xA3PPPPPPV[`\0```\0\x80`\0\x85\x81R` \x01\x90\x81R` \x01`\0 \x90P`\0\x81`\x01\x01T\x11a\x038W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x03/\x90a\x0F\x9BV[`@Q\x80\x91\x03\x90\xFD[`\0\x81`\x01\x01Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03XWa\x03Wa\x0F\xBBV[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x03\x86W\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P`\0[\x82`\x01\x01T\x81\x10\x15a\x03\xE6W\x82`\x04\x01`\0`\x01\x83a\x03\xAB\x91\x90a\x0F\xEAV[\x81R` \x01\x90\x81R` \x01`\0 T\x82\x82\x81Q\x81\x10a\x03\xCDWa\x03\xCCa\x10\x1EV[[` \x02` \x01\x01\x81\x81RPP\x80\x80`\x01\x01\x91PPa\x03\x8CV[P\x81`\x06\x01T\x81\x93P\x93PPP\x91P\x91V[`\0\x85\x85\x85\x85\x85`@Q` \x01a\x04\x10\x92\x91\x90a\x11\nV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q` \x01a\x049\x94\x93\x92\x91\x90a\x112V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x95\x94PPPPPV[`\0\x80`\0\x84\x81R` \x01\x90\x81R` \x01`\0 \x90Pa\x04\x96\x81`\0\x01T`@Q\x80``\x01`@R\x80`/\x81R` \x01a\x157`/\x919a\n(V[`\0\x82\x11\x80\x15a\x04\xAAWP\x80`\x01\x01T\x82\x11\x15[a\x04\xE9W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04\xE0\x90a\x0E\x84V[`@Q\x80\x91\x03\x90\xFD[`\x01`\x02\x81\x11\x15a\x04\xFDWa\x04\xFCa\x11wV[[\x81`\x03\x01`\x003s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x02\x81\x11\x15a\x05^Wa\x05]a\x11wV[[\x14a\x05\x9EW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x05\x95\x90a\x11\xF2V[`@Q\x80\x91\x03\x90\xFD[`\x02\x81`\x03\x01`\x003s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x02\x81\x11\x15a\x06\x03Wa\x06\x02a\x11wV[[\x02\x17\x90UP\x80`\x04\x01`\0\x83\x81R` \x01\x90\x81R` \x01`\0 `\0\x81T\x80\x92\x91\x90a\x06.\x90a\x0F\x07V[\x91\x90PUP\x80`\x05\x01`\0\x81T\x80\x92\x91\x90a\x06H\x90a\x0F\x07V[\x91\x90PUP\x813s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x7F\xE4\xAB\xC58\x0F\xA6\x93\x9D\x1D\xC2;^\x90\xB3\xA8\xA0\xE3(\xF0\xF1\xA8*_B\xBF\xB7\x95\xBF\x9Cqu\x05`@Q`@Q\x80\x91\x03\x90\xA4PPPV[`\0a\x06\xD8\x85`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7FDeadline must be in the future\0\0\x81RPa\n(V[`\0\x84\x11a\x07\x1BW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x07\x12\x90a\x12\x84V[`@Q\x80\x91\x03\x90\xFD[`\0\x83\x83\x90P\x11a\x07aW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x07X\x90a\x12\xF0V[`@Q\x80\x91\x03\x90\xFD[`\0a\x07p\x86\x863\x87\x87a\x03\xF8V[\x90P`\0\x80`\0\x83\x81R` \x01\x90\x81R` \x01`\0 \x90P`\0\x81`\x06\x01T\x14a\x07\xCFW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x07\xC6\x90a\x13\\V[`@Q\x80\x91\x03\x90\xFD[\x86\x81`\0\x01\x81\x90UP\x85\x81`\x01\x01\x81\x90UP3\x81`\x02\x01`\0a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x84\x84\x90P\x81`\x06\x01\x81\x90UP`\0[\x85\x85\x90P\x81\x10\x15a\x08\xDCW`\x01\x82`\x03\x01`\0\x88\x88\x85\x81\x81\x10a\x08YWa\x08Xa\x10\x1EV[[\x90P` \x02\x01` \x81\x01\x90a\x08n\x91\x90a\x13|V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x02\x81\x11\x15a\x08\xCAWa\x08\xC9a\x11wV[[\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa\x083V[P\x81\x7F\xF8Y\x04\x1DJ\xDD\xF0\x85\xC6\"k.\x875\xA1U\xAE*L\x02\x13\xA9j,\xFC\xB9}O\xE4\xD3\x81q\x88`@Qa\t\r\x91\x90a\x13\xA9V[`@Q\x80\x91\x03\x90\xA2\x81\x92PPP\x94\x93PPPPV[a\t.\x82B\x11\x82a\t2V[PPV[`\0\x7F=\xCD\xF6;A\xC1\x03V}r%\x97j\xD9\x14^\x86lz}\xCC\xC6\xC2w\xEA\x86\xAB\xBD&\x8F\xBA\xC9`\0\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83`@Q` \x01a\t\x7F\x91\x90a\x13\xDFV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Qa\t\x9B\x91\x90a\x14kV[`\0`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80`\0\x81\x14a\t\xD6W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\t\xDBV[``\x91P[PP\x90P\x80\x82\x90a\n\"W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\n\x19\x91\x90a\x14\xD7V[`@Q\x80\x91\x03\x90\xFD[PPPPV[a\n4\x82B\x10\x82a\t2V[PPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x81\x90P\x91\x90PV[a\nU\x81a\nBV[\x81\x14a\n`W`\0\x80\xFD[PV[`\0\x815\x90Pa\nr\x81a\nLV[\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\n\x8B\x81a\nxV[\x81\x14a\n\x96W`\0\x80\xFD[PV[`\0\x815\x90Pa\n\xA8\x81a\n\x82V[\x92\x91PPV[`\0\x80`@\x83\x85\x03\x12\x15a\n\xC5Wa\n\xC4a\n8V[[`\0a\n\xD3\x85\x82\x86\x01a\ncV[\x92PP` a\n\xE4\x85\x82\x86\x01a\n\x99V[\x91PP\x92P\x92\x90PV[`\0` \x82\x84\x03\x12\x15a\x0B\x04Wa\x0B\x03a\n8V[[`\0a\x0B\x12\x84\x82\x85\x01a\ncV[\x91PP\x92\x91PPV[a\x0B$\x81a\nxV[\x82RPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x0B_\x81a\nxV[\x82RPPV[`\0a\x0Bq\x83\x83a\x0BVV[` \x83\x01\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x0B\x95\x82a\x0B*V[a\x0B\x9F\x81\x85a\x0B5V[\x93Pa\x0B\xAA\x83a\x0BFV[\x80`\0[\x83\x81\x10\x15a\x0B\xDBW\x81Qa\x0B\xC2\x88\x82a\x0BeV[\x97Pa\x0B\xCD\x83a\x0B}V[\x92PP`\x01\x81\x01\x90Pa\x0B\xAEV[P\x85\x93PPPP\x92\x91PPV[`\0`@\x82\x01\x90Pa\x0B\xFD`\0\x83\x01\x85a\x0B\x1BV[\x81\x81\x03` \x83\x01Ra\x0C\x0F\x81\x84a\x0B\x8AV[\x90P\x93\x92PPPV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\x0CC\x82a\x0C\x18V[\x90P\x91\x90PV[a\x0CS\x81a\x0C8V[\x81\x14a\x0C^W`\0\x80\xFD[PV[`\0\x815\x90Pa\x0Cp\x81a\x0CJV[\x92\x91PPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\x83`\x1F\x84\x01\x12a\x0C\x9BWa\x0C\x9Aa\x0CvV[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C\xB8Wa\x0C\xB7a\x0C{V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\x0C\xD4Wa\x0C\xD3a\x0C\x80V[[\x92P\x92\x90PV[`\0\x80`\0\x80`\0`\x80\x86\x88\x03\x12\x15a\x0C\xF7Wa\x0C\xF6a\n8V[[`\0a\r\x05\x88\x82\x89\x01a\n\x99V[\x95PP` a\r\x16\x88\x82\x89\x01a\n\x99V[\x94PP`@a\r'\x88\x82\x89\x01a\x0CaV[\x93PP``\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\rHWa\rGa\n=V[[a\rT\x88\x82\x89\x01a\x0C\x85V[\x92P\x92PP\x92\x95P\x92\x95\x90\x93PV[a\rl\x81a\nBV[\x82RPPV[`\0` \x82\x01\x90Pa\r\x87`\0\x83\x01\x84a\rcV[\x92\x91PPV[`\0\x80`\0\x80``\x85\x87\x03\x12\x15a\r\xA7Wa\r\xA6a\n8V[[`\0a\r\xB5\x87\x82\x88\x01a\n\x99V[\x94PP` a\r\xC6\x87\x82\x88\x01a\n\x99V[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\xE7Wa\r\xE6a\n=V[[a\r\xF3\x87\x82\x88\x01a\x0C\x85V[\x92P\x92PP\x92\x95\x91\x94P\x92PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FChoice must be between 1 and max`\0\x82\x01R\x7FChoice\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[`\0a\x0En`&\x83a\x0E\x01V[\x91Pa\x0Ey\x82a\x0E\x12V[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0E\x9D\x81a\x0EaV[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[`\0a\x0E\xDE\x82a\nxV[\x91Pa\x0E\xE9\x83a\nxV[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\x0F\x01Wa\x0F\0a\x0E\xA4V[[\x92\x91PPV[`\0a\x0F\x12\x82a\nxV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a\x0FDWa\x0FCa\x0E\xA4V[[`\x01\x82\x01\x90P\x91\x90PV[\x7Fpoll doesn't exist\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x0F\x85`\x12\x83a\x0E\x01V[\x91Pa\x0F\x90\x82a\x0FOV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0F\xB4\x81a\x0FxV[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[`\0a\x0F\xF5\x82a\nxV[\x91Pa\x10\0\x83a\nxV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x10\x18Wa\x10\x17a\x0E\xA4V[[\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[`\0\x81\x90P\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\x10k\x81a\x0C8V[\x82RPPV[`\0a\x10}\x83\x83a\x10bV[` \x83\x01\x90P\x92\x91PPV[`\0a\x10\x98` \x84\x01\x84a\x0CaV[\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x10\xB9\x83\x85a\x10MV[\x93Pa\x10\xC4\x82a\x10XV[\x80`\0[\x85\x81\x10\x15a\x10\xFDWa\x10\xDA\x82\x84a\x10\x89V[a\x10\xE4\x88\x82a\x10qV[\x97Pa\x10\xEF\x83a\x10\xA0V[\x92PP`\x01\x81\x01\x90Pa\x10\xC8V[P\x85\x92PPP\x93\x92PPPV[`\0a\x11\x17\x82\x84\x86a\x10\xADV[\x91P\x81\x90P\x93\x92PPPV[a\x11,\x81a\x0C8V[\x82RPPV[`\0`\x80\x82\x01\x90Pa\x11G`\0\x83\x01\x87a\x0B\x1BV[a\x11T` \x83\x01\x86a\x0B\x1BV[a\x11a`@\x83\x01\x85a\x11#V[a\x11n``\x83\x01\x84a\rcV[\x95\x94PPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`!`\x04R`$`\0\xFD[\x7Fsender can't vote\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x11\xDC`\x11\x83a\x0E\x01V[\x91Pa\x11\xE7\x82a\x11\xA6V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x12\x0B\x81a\x11\xCFV[\x90P\x91\x90PV[\x7FMaxChoice must be greater than z`\0\x82\x01R\x7Fero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[`\0a\x12n`#\x83a\x0E\x01V[\x91Pa\x12y\x82a\x12\x12V[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x12\x9D\x81a\x12aV[\x90P\x91\x90PV[\x7FThere must be at least one voter`\0\x82\x01RPV[`\0a\x12\xDA` \x83a\x0E\x01V[\x91Pa\x12\xE5\x82a\x12\xA4V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x13\t\x81a\x12\xCDV[\x90P\x91\x90PV[\x7Fpoll already exists\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x13F`\x13\x83a\x0E\x01V[\x91Pa\x13Q\x82a\x13\x10V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x13u\x81a\x139V[\x90P\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x13\x92Wa\x13\x91a\n8V[[`\0a\x13\xA0\x84\x82\x85\x01a\x0CaV[\x91PP\x92\x91PPV[`\0` \x82\x01\x90Pa\x13\xBE`\0\x83\x01\x84a\x0B\x1BV[\x92\x91PPV[`\0\x81\x15\x15\x90P\x91\x90PV[a\x13\xD9\x81a\x13\xC4V[\x82RPPV[`\0` \x82\x01\x90Pa\x13\xF4`\0\x83\x01\x84a\x13\xD0V[\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\x14.W\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x14\x13V[`\0\x84\x84\x01RPPPPV[`\0a\x14E\x82a\x13\xFAV[a\x14O\x81\x85a\x14\x05V[\x93Pa\x14_\x81\x85` \x86\x01a\x14\x10V[\x80\x84\x01\x91PP\x92\x91PPV[`\0a\x14w\x82\x84a\x14:V[\x91P\x81\x90P\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[`\0a\x14\xA9\x82a\x14\x82V[a\x14\xB3\x81\x85a\x0E\x01V[\x93Pa\x14\xC3\x81\x85` \x86\x01a\x14\x10V[a\x14\xCC\x81a\x14\x8DV[\x84\x01\x91PP\x92\x91PPV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x14\xF1\x81\x84a\x14\x9EV[\x90P\x92\x91PPV\xFEThis choice could still be overtaken if remaining voters votePoll deadline has passed or poll does not exist",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063098cf9661461005c5780634c051100146100785780635fe5c1ec146100a95780639ef1204c146100d9578063a4ed285a146100f5575b600080fd5b61007660048036038101906100719190610aae565b610125565b005b610092600480360381019061008d9190610aee565b6102d7565b6040516100a0929190610be8565b60405180910390f35b6100c360048036038101906100be9190610cdb565b6103f8565b6040516100d09190610d72565b60405180910390f35b6100f360048036038101906100ee9190610aae565b61045a565b005b61010f600480360381019061010a9190610d8d565b610697565b60405161011c9190610d72565b60405180910390f35b6000806000848152602001908152602001600020905061017e81600001546040518060400160405280602081526020017f506f6c6c20646561646c696e6520686173206e6f742070617373656420796574815250610922565b600082118015610192575080600101548211155b6101d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c890610e84565b60405180910390fd5b60008160040160008481526020019081526020016000205490506000826005015483600601546102019190610ed3565b9050600080600190505b8460010154811161026857858103156102555781856004016000838152602001908152602001600020541115610254578460040160008281526020019081526020016000205491505b5b808061026090610f07565b91505061020b565b506102988282856102799190610ed3565b116040518060600160405280603d81526020016114fa603d9139610932565b84846007018190555084867f269d3a24712436f77df15d63de7d2337a060c9102dee6f46c909fb0fa2d52f0c60405160405180910390a3505050505050565b60006060600080600085815260200190815260200160002090506000816001015411610338576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032f90610f9b565b60405180910390fd5b6000816001015467ffffffffffffffff81111561035857610357610fbb565b5b6040519080825280602002602001820160405280156103865781602001602082028036833780820191505090505b50905060005b82600101548110156103e6578260040160006001836103ab9190610fea565b8152602001908152602001600020548282815181106103cd576103cc61101e565b5b602002602001018181525050808060010191505061038c565b50816006015481935093505050915091565b6000858585858560405160200161041092919061110a565b604051602081830303815290604052805190602001206040516020016104399493929190611132565b60405160208183030381529060405280519060200120905095945050505050565b6000806000848152602001908152602001600020905061049681600001546040518060600160405280602f8152602001611537602f9139610a28565b6000821180156104aa575080600101548211155b6104e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e090610e84565b60405180910390fd5b600160028111156104fd576104fc611177565b5b8160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600281111561055e5761055d611177565b5b1461059e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610595906111f2565b60405180910390fd5b60028160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600281111561060357610602611177565b5b0217905550806004016000838152602001908152602001600020600081548092919061062e90610f07565b919050555080600501600081548092919061064890610f07565b9190505550813373ffffffffffffffffffffffffffffffffffffffff16847fe4abc5380fa6939d1dc23b5e90b3a8a0e328f0f1a82a5f42bfb795bf9c71750560405160405180910390a4505050565b60006106d8856040518060400160405280601e81526020017f446561646c696e65206d75737420626520696e20746865206675747572650000815250610a28565b6000841161071b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071290611284565b60405180910390fd5b60008383905011610761576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610758906112f0565b60405180910390fd5b600061077086863387876103f8565b90506000806000838152602001908152602001600020905060008160060154146107cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c69061135c565b60405180910390fd5b868160000181905550858160010181905550338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084849050816006018190555060005b858590508110156108dc5760018260030160008888858181106108595761085861101e565b5b905060200201602081019061086e919061137c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360028111156108ca576108c9611177565b5b02179055508080600101915050610833565b50817ff859041d4addf085c6226b2e8735a155ae2a4c0213a96a2cfcb97d4fe4d381718860405161090d91906113a9565b60405180910390a28192505050949350505050565b61092e82421182610932565b5050565b60007f3dcdf63b41c103567d7225976ad9145e866c7a7dccc6c277ea86abbd268fbac960001c73ffffffffffffffffffffffffffffffffffffffff168360405160200161097f91906113df565b60405160208183030381529060405260405161099b919061146b565b600060405180830381855afa9150503d80600081146109d6576040519150601f19603f3d011682016040523d82523d6000602084013e6109db565b606091505b50509050808290610a22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1991906114d7565b60405180910390fd5b50505050565b610a3482421082610932565b5050565b600080fd5b600080fd5b6000819050919050565b610a5581610a42565b8114610a6057600080fd5b50565b600081359050610a7281610a4c565b92915050565b6000819050919050565b610a8b81610a78565b8114610a9657600080fd5b50565b600081359050610aa881610a82565b92915050565b60008060408385031215610ac557610ac4610a38565b5b6000610ad385828601610a63565b9250506020610ae485828601610a99565b9150509250929050565b600060208284031215610b0457610b03610a38565b5b6000610b1284828501610a63565b91505092915050565b610b2481610a78565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610b5f81610a78565b82525050565b6000610b718383610b56565b60208301905092915050565b6000602082019050919050565b6000610b9582610b2a565b610b9f8185610b35565b9350610baa83610b46565b8060005b83811015610bdb578151610bc28882610b65565b9750610bcd83610b7d565b925050600181019050610bae565b5085935050505092915050565b6000604082019050610bfd6000830185610b1b565b8181036020830152610c0f8184610b8a565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c4382610c18565b9050919050565b610c5381610c38565b8114610c5e57600080fd5b50565b600081359050610c7081610c4a565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610c9b57610c9a610c76565b5b8235905067ffffffffffffffff811115610cb857610cb7610c7b565b5b602083019150836020820283011115610cd457610cd3610c80565b5b9250929050565b600080600080600060808688031215610cf757610cf6610a38565b5b6000610d0588828901610a99565b9550506020610d1688828901610a99565b9450506040610d2788828901610c61565b935050606086013567ffffffffffffffff811115610d4857610d47610a3d565b5b610d5488828901610c85565b92509250509295509295909350565b610d6c81610a42565b82525050565b6000602082019050610d876000830184610d63565b92915050565b60008060008060608587031215610da757610da6610a38565b5b6000610db587828801610a99565b9450506020610dc687828801610a99565b935050604085013567ffffffffffffffff811115610de757610de6610a3d565b5b610df387828801610c85565b925092505092959194509250565b600082825260208201905092915050565b7f43686f696365206d757374206265206265747765656e203120616e64206d617860008201527f43686f6963650000000000000000000000000000000000000000000000000000602082015250565b6000610e6e602683610e01565b9150610e7982610e12565b604082019050919050565b60006020820190508181036000830152610e9d81610e61565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ede82610a78565b9150610ee983610a78565b9250828203905081811115610f0157610f00610ea4565b5b92915050565b6000610f1282610a78565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610f4457610f43610ea4565b5b600182019050919050565b7f706f6c6c20646f65736e27742065786973740000000000000000000000000000600082015250565b6000610f85601283610e01565b9150610f9082610f4f565b602082019050919050565b60006020820190508181036000830152610fb481610f78565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000610ff582610a78565b915061100083610a78565b925082820190508082111561101857611017610ea4565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b6000819050919050565b61106b81610c38565b82525050565b600061107d8383611062565b60208301905092915050565b60006110986020840184610c61565b905092915050565b6000602082019050919050565b60006110b9838561104d565b93506110c482611058565b8060005b858110156110fd576110da8284611089565b6110e48882611071565b97506110ef836110a0565b9250506001810190506110c8565b5085925050509392505050565b60006111178284866110ad565b91508190509392505050565b61112c81610c38565b82525050565b60006080820190506111476000830187610b1b565b6111546020830186610b1b565b6111616040830185611123565b61116e6060830184610d63565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f73656e6465722063616e277420766f7465000000000000000000000000000000600082015250565b60006111dc601183610e01565b91506111e7826111a6565b602082019050919050565b6000602082019050818103600083015261120b816111cf565b9050919050565b7f4d617843686f696365206d7573742062652067726561746572207468616e207a60008201527f65726f0000000000000000000000000000000000000000000000000000000000602082015250565b600061126e602383610e01565b915061127982611212565b604082019050919050565b6000602082019050818103600083015261129d81611261565b9050919050565b7f5468657265206d757374206265206174206c65617374206f6e6520766f746572600082015250565b60006112da602083610e01565b91506112e5826112a4565b602082019050919050565b60006020820190508181036000830152611309816112cd565b9050919050565b7f706f6c6c20616c72656164792065786973747300000000000000000000000000600082015250565b6000611346601383610e01565b915061135182611310565b602082019050919050565b6000602082019050818103600083015261137581611339565b9050919050565b60006020828403121561139257611391610a38565b5b60006113a084828501610c61565b91505092915050565b60006020820190506113be6000830184610b1b565b92915050565b60008115159050919050565b6113d9816113c4565b82525050565b60006020820190506113f460008301846113d0565b92915050565b600081519050919050565b600081905092915050565b60005b8381101561142e578082015181840152602081019050611413565b60008484015250505050565b6000611445826113fa565b61144f8185611405565b935061145f818560208601611410565b80840191505092915050565b6000611477828461143a565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006114a982611482565b6114b38185610e01565b93506114c3818560208601611410565b6114cc8161148d565b840191505092915050565b600060208201905081810360008301526114f1818461149e565b90509291505056fe546869732063686f69636520636f756c64207374696c6c206265206f76657274616b656e2069662072656d61696e696e6720766f7465727320766f7465506f6c6c20646561646c696e652068617320706173736564206f7220706f6c6c20646f6573206e6f74206578697374
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0WW`\x005`\xE0\x1C\x80c\t\x8C\xF9f\x14a\0\\W\x80cL\x05\x11\0\x14a\0xW\x80c_\xE5\xC1\xEC\x14a\0\xA9W\x80c\x9E\xF1 L\x14a\0\xD9W\x80c\xA4\xED(Z\x14a\0\xF5W[`\0\x80\xFD[a\0v`\x04\x806\x03\x81\x01\x90a\0q\x91\x90a\n\xAEV[a\x01%V[\0[a\0\x92`\x04\x806\x03\x81\x01\x90a\0\x8D\x91\x90a\n\xEEV[a\x02\xD7V[`@Qa\0\xA0\x92\x91\x90a\x0B\xE8V[`@Q\x80\x91\x03\x90\xF3[a\0\xC3`\x04\x806\x03\x81\x01\x90a\0\xBE\x91\x90a\x0C\xDBV[a\x03\xF8V[`@Qa\0\xD0\x91\x90a\rrV[`@Q\x80\x91\x03\x90\xF3[a\0\xF3`\x04\x806\x03\x81\x01\x90a\0\xEE\x91\x90a\n\xAEV[a\x04ZV[\0[a\x01\x0F`\x04\x806\x03\x81\x01\x90a\x01\n\x91\x90a\r\x8DV[a\x06\x97V[`@Qa\x01\x1C\x91\x90a\rrV[`@Q\x80\x91\x03\x90\xF3[`\0\x80`\0\x84\x81R` \x01\x90\x81R` \x01`\0 \x90Pa\x01~\x81`\0\x01T`@Q\x80`@\x01`@R\x80` \x81R` \x01\x7FPoll deadline has not passed yet\x81RPa\t\"V[`\0\x82\x11\x80\x15a\x01\x92WP\x80`\x01\x01T\x82\x11\x15[a\x01\xD1W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x01\xC8\x90a\x0E\x84V[`@Q\x80\x91\x03\x90\xFD[`\0\x81`\x04\x01`\0\x84\x81R` \x01\x90\x81R` \x01`\0 T\x90P`\0\x82`\x05\x01T\x83`\x06\x01Ta\x02\x01\x91\x90a\x0E\xD3V[\x90P`\0\x80`\x01\x90P[\x84`\x01\x01T\x81\x11a\x02hW\x85\x81\x03\x15a\x02UW\x81\x85`\x04\x01`\0\x83\x81R` \x01\x90\x81R` \x01`\0 T\x11\x15a\x02TW\x84`\x04\x01`\0\x82\x81R` \x01\x90\x81R` \x01`\0 T\x91P[[\x80\x80a\x02`\x90a\x0F\x07V[\x91PPa\x02\x0BV[Pa\x02\x98\x82\x82\x85a\x02y\x91\x90a\x0E\xD3V[\x11`@Q\x80``\x01`@R\x80`=\x81R` \x01a\x14\xFA`=\x919a\t2V[\x84\x84`\x07\x01\x81\x90UP\x84\x86\x7F&\x9D:$q$6\xF7}\xF1]c\xDE}#7\xA0`\xC9\x10-\xEEoF\xC9\t\xFB\x0F\xA2\xD5/\x0C`@Q`@Q\x80\x91\x03\x90\xA3PPPPPPV[`\0```\0\x80`\0\x85\x81R` \x01\x90\x81R` \x01`\0 \x90P`\0\x81`\x01\x01T\x11a\x038W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x03/\x90a\x0F\x9BV[`@Q\x80\x91\x03\x90\xFD[`\0\x81`\x01\x01Tg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03XWa\x03Wa\x0F\xBBV[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x03\x86W\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P`\0[\x82`\x01\x01T\x81\x10\x15a\x03\xE6W\x82`\x04\x01`\0`\x01\x83a\x03\xAB\x91\x90a\x0F\xEAV[\x81R` \x01\x90\x81R` \x01`\0 T\x82\x82\x81Q\x81\x10a\x03\xCDWa\x03\xCCa\x10\x1EV[[` \x02` \x01\x01\x81\x81RPP\x80\x80`\x01\x01\x91PPa\x03\x8CV[P\x81`\x06\x01T\x81\x93P\x93PPP\x91P\x91V[`\0\x85\x85\x85\x85\x85`@Q` \x01a\x04\x10\x92\x91\x90a\x11\nV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q` \x01a\x049\x94\x93\x92\x91\x90a\x112V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x95\x94PPPPPV[`\0\x80`\0\x84\x81R` \x01\x90\x81R` \x01`\0 \x90Pa\x04\x96\x81`\0\x01T`@Q\x80``\x01`@R\x80`/\x81R` \x01a\x157`/\x919a\n(V[`\0\x82\x11\x80\x15a\x04\xAAWP\x80`\x01\x01T\x82\x11\x15[a\x04\xE9W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04\xE0\x90a\x0E\x84V[`@Q\x80\x91\x03\x90\xFD[`\x01`\x02\x81\x11\x15a\x04\xFDWa\x04\xFCa\x11wV[[\x81`\x03\x01`\x003s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x02\x81\x11\x15a\x05^Wa\x05]a\x11wV[[\x14a\x05\x9EW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x05\x95\x90a\x11\xF2V[`@Q\x80\x91\x03\x90\xFD[`\x02\x81`\x03\x01`\x003s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x02\x81\x11\x15a\x06\x03Wa\x06\x02a\x11wV[[\x02\x17\x90UP\x80`\x04\x01`\0\x83\x81R` \x01\x90\x81R` \x01`\0 `\0\x81T\x80\x92\x91\x90a\x06.\x90a\x0F\x07V[\x91\x90PUP\x80`\x05\x01`\0\x81T\x80\x92\x91\x90a\x06H\x90a\x0F\x07V[\x91\x90PUP\x813s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x7F\xE4\xAB\xC58\x0F\xA6\x93\x9D\x1D\xC2;^\x90\xB3\xA8\xA0\xE3(\xF0\xF1\xA8*_B\xBF\xB7\x95\xBF\x9Cqu\x05`@Q`@Q\x80\x91\x03\x90\xA4PPPV[`\0a\x06\xD8\x85`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7FDeadline must be in the future\0\0\x81RPa\n(V[`\0\x84\x11a\x07\x1BW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x07\x12\x90a\x12\x84V[`@Q\x80\x91\x03\x90\xFD[`\0\x83\x83\x90P\x11a\x07aW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x07X\x90a\x12\xF0V[`@Q\x80\x91\x03\x90\xFD[`\0a\x07p\x86\x863\x87\x87a\x03\xF8V[\x90P`\0\x80`\0\x83\x81R` \x01\x90\x81R` \x01`\0 \x90P`\0\x81`\x06\x01T\x14a\x07\xCFW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x07\xC6\x90a\x13\\V[`@Q\x80\x91\x03\x90\xFD[\x86\x81`\0\x01\x81\x90UP\x85\x81`\x01\x01\x81\x90UP3\x81`\x02\x01`\0a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x84\x84\x90P\x81`\x06\x01\x81\x90UP`\0[\x85\x85\x90P\x81\x10\x15a\x08\xDCW`\x01\x82`\x03\x01`\0\x88\x88\x85\x81\x81\x10a\x08YWa\x08Xa\x10\x1EV[[\x90P` \x02\x01` \x81\x01\x90a\x08n\x91\x90a\x13|V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x02\x81\x11\x15a\x08\xCAWa\x08\xC9a\x11wV[[\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa\x083V[P\x81\x7F\xF8Y\x04\x1DJ\xDD\xF0\x85\xC6\"k.\x875\xA1U\xAE*L\x02\x13\xA9j,\xFC\xB9}O\xE4\xD3\x81q\x88`@Qa\t\r\x91\x90a\x13\xA9V[`@Q\x80\x91\x03\x90\xA2\x81\x92PPP\x94\x93PPPPV[a\t.\x82B\x11\x82a\t2V[PPV[`\0\x7F=\xCD\xF6;A\xC1\x03V}r%\x97j\xD9\x14^\x86lz}\xCC\xC6\xC2w\xEA\x86\xAB\xBD&\x8F\xBA\xC9`\0\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83`@Q` \x01a\t\x7F\x91\x90a\x13\xDFV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Qa\t\x9B\x91\x90a\x14kV[`\0`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80`\0\x81\x14a\t\xD6W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\t\xDBV[``\x91P[PP\x90P\x80\x82\x90a\n\"W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\n\x19\x91\x90a\x14\xD7V[`@Q\x80\x91\x03\x90\xFD[PPPPV[a\n4\x82B\x10\x82a\t2V[PPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x81\x90P\x91\x90PV[a\nU\x81a\nBV[\x81\x14a\n`W`\0\x80\xFD[PV[`\0\x815\x90Pa\nr\x81a\nLV[\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\n\x8B\x81a\nxV[\x81\x14a\n\x96W`\0\x80\xFD[PV[`\0\x815\x90Pa\n\xA8\x81a\n\x82V[\x92\x91PPV[`\0\x80`@\x83\x85\x03\x12\x15a\n\xC5Wa\n\xC4a\n8V[[`\0a\n\xD3\x85\x82\x86\x01a\ncV[\x92PP` a\n\xE4\x85\x82\x86\x01a\n\x99V[\x91PP\x92P\x92\x90PV[`\0` \x82\x84\x03\x12\x15a\x0B\x04Wa\x0B\x03a\n8V[[`\0a\x0B\x12\x84\x82\x85\x01a\ncV[\x91PP\x92\x91PPV[a\x0B$\x81a\nxV[\x82RPPV[`\0\x81Q\x90P\x91\x90PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[`\0\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x0B_\x81a\nxV[\x82RPPV[`\0a\x0Bq\x83\x83a\x0BVV[` \x83\x01\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x0B\x95\x82a\x0B*V[a\x0B\x9F\x81\x85a\x0B5V[\x93Pa\x0B\xAA\x83a\x0BFV[\x80`\0[\x83\x81\x10\x15a\x0B\xDBW\x81Qa\x0B\xC2\x88\x82a\x0BeV[\x97Pa\x0B\xCD\x83a\x0B}V[\x92PP`\x01\x81\x01\x90Pa\x0B\xAEV[P\x85\x93PPPP\x92\x91PPV[`\0`@\x82\x01\x90Pa\x0B\xFD`\0\x83\x01\x85a\x0B\x1BV[\x81\x81\x03` \x83\x01Ra\x0C\x0F\x81\x84a\x0B\x8AV[\x90P\x93\x92PPPV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\x0CC\x82a\x0C\x18V[\x90P\x91\x90PV[a\x0CS\x81a\x0C8V[\x81\x14a\x0C^W`\0\x80\xFD[PV[`\0\x815\x90Pa\x0Cp\x81a\x0CJV[\x92\x91PPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\x83`\x1F\x84\x01\x12a\x0C\x9BWa\x0C\x9Aa\x0CvV[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C\xB8Wa\x0C\xB7a\x0C{V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\x0C\xD4Wa\x0C\xD3a\x0C\x80V[[\x92P\x92\x90PV[`\0\x80`\0\x80`\0`\x80\x86\x88\x03\x12\x15a\x0C\xF7Wa\x0C\xF6a\n8V[[`\0a\r\x05\x88\x82\x89\x01a\n\x99V[\x95PP` a\r\x16\x88\x82\x89\x01a\n\x99V[\x94PP`@a\r'\x88\x82\x89\x01a\x0CaV[\x93PP``\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\rHWa\rGa\n=V[[a\rT\x88\x82\x89\x01a\x0C\x85V[\x92P\x92PP\x92\x95P\x92\x95\x90\x93PV[a\rl\x81a\nBV[\x82RPPV[`\0` \x82\x01\x90Pa\r\x87`\0\x83\x01\x84a\rcV[\x92\x91PPV[`\0\x80`\0\x80``\x85\x87\x03\x12\x15a\r\xA7Wa\r\xA6a\n8V[[`\0a\r\xB5\x87\x82\x88\x01a\n\x99V[\x94PP` a\r\xC6\x87\x82\x88\x01a\n\x99V[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\xE7Wa\r\xE6a\n=V[[a\r\xF3\x87\x82\x88\x01a\x0C\x85V[\x92P\x92PP\x92\x95\x91\x94P\x92PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FChoice must be between 1 and max`\0\x82\x01R\x7FChoice\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[`\0a\x0En`&\x83a\x0E\x01V[\x91Pa\x0Ey\x82a\x0E\x12V[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0E\x9D\x81a\x0EaV[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[`\0a\x0E\xDE\x82a\nxV[\x91Pa\x0E\xE9\x83a\nxV[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\x0F\x01Wa\x0F\0a\x0E\xA4V[[\x92\x91PPV[`\0a\x0F\x12\x82a\nxV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a\x0FDWa\x0FCa\x0E\xA4V[[`\x01\x82\x01\x90P\x91\x90PV[\x7Fpoll doesn't exist\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x0F\x85`\x12\x83a\x0E\x01V[\x91Pa\x0F\x90\x82a\x0FOV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0F\xB4\x81a\x0FxV[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[`\0a\x0F\xF5\x82a\nxV[\x91Pa\x10\0\x83a\nxV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x10\x18Wa\x10\x17a\x0E\xA4V[[\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[`\0\x81\x90P\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\x10k\x81a\x0C8V[\x82RPPV[`\0a\x10}\x83\x83a\x10bV[` \x83\x01\x90P\x92\x91PPV[`\0a\x10\x98` \x84\x01\x84a\x0CaV[\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x10\xB9\x83\x85a\x10MV[\x93Pa\x10\xC4\x82a\x10XV[\x80`\0[\x85\x81\x10\x15a\x10\xFDWa\x10\xDA\x82\x84a\x10\x89V[a\x10\xE4\x88\x82a\x10qV[\x97Pa\x10\xEF\x83a\x10\xA0V[\x92PP`\x01\x81\x01\x90Pa\x10\xC8V[P\x85\x92PPP\x93\x92PPPV[`\0a\x11\x17\x82\x84\x86a\x10\xADV[\x91P\x81\x90P\x93\x92PPPV[a\x11,\x81a\x0C8V[\x82RPPV[`\0`\x80\x82\x01\x90Pa\x11G`\0\x83\x01\x87a\x0B\x1BV[a\x11T` \x83\x01\x86a\x0B\x1BV[a\x11a`@\x83\x01\x85a\x11#V[a\x11n``\x83\x01\x84a\rcV[\x95\x94PPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`!`\x04R`$`\0\xFD[\x7Fsender can't vote\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x11\xDC`\x11\x83a\x0E\x01V[\x91Pa\x11\xE7\x82a\x11\xA6V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x12\x0B\x81a\x11\xCFV[\x90P\x91\x90PV[\x7FMaxChoice must be greater than z`\0\x82\x01R\x7Fero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[`\0a\x12n`#\x83a\x0E\x01V[\x91Pa\x12y\x82a\x12\x12V[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x12\x9D\x81a\x12aV[\x90P\x91\x90PV[\x7FThere must be at least one voter`\0\x82\x01RPV[`\0a\x12\xDA` \x83a\x0E\x01V[\x91Pa\x12\xE5\x82a\x12\xA4V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x13\t\x81a\x12\xCDV[\x90P\x91\x90PV[\x7Fpoll already exists\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x13F`\x13\x83a\x0E\x01V[\x91Pa\x13Q\x82a\x13\x10V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x13u\x81a\x139V[\x90P\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x13\x92Wa\x13\x91a\n8V[[`\0a\x13\xA0\x84\x82\x85\x01a\x0CaV[\x91PP\x92\x91PPV[`\0` \x82\x01\x90Pa\x13\xBE`\0\x83\x01\x84a\x0B\x1BV[\x92\x91PPV[`\0\x81\x15\x15\x90P\x91\x90PV[a\x13\xD9\x81a\x13\xC4V[\x82RPPV[`\0` \x82\x01\x90Pa\x13\xF4`\0\x83\x01\x84a\x13\xD0V[\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\x14.W\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x14\x13V[`\0\x84\x84\x01RPPPPV[`\0a\x14E\x82a\x13\xFAV[a\x14O\x81\x85a\x14\x05V[\x93Pa\x14_\x81\x85` \x86\x01a\x14\x10V[\x80\x84\x01\x91PP\x92\x91PPV[`\0a\x14w\x82\x84a\x14:V[\x91P\x81\x90P\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[`\0a\x14\xA9\x82a\x14\x82V[a\x14\xB3\x81\x85a\x0E\x01V[\x93Pa\x14\xC3\x81\x85` \x86\x01a\x14\x10V[a\x14\xCC\x81a\x14\x8DV[\x84\x01\x91PP\x92\x91PPV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x14\xF1\x81\x84a\x14\x9EV[\x90P\x92\x91PPV\xFEThis choice could still be overtaken if remaining voters votePoll deadline has passed or poll does not exist",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `PollCreated(bytes32,uint256)` and selector `0xf859041d4addf085c6226b2e8735a155ae2a4c0213a96a2cfcb97d4fe4d38171`.
```solidity
event PollCreated(bytes32 indexed pollId, uint256 deadline);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PollCreated {
        #[allow(missing_docs)]
        pub pollId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PollCreated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "PollCreated(bytes32,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                248u8, 89u8, 4u8, 29u8, 74u8, 221u8, 240u8, 133u8, 198u8, 34u8, 107u8,
                46u8, 135u8, 53u8, 161u8, 85u8, 174u8, 42u8, 76u8, 2u8, 19u8, 169u8,
                106u8, 44u8, 252u8, 185u8, 125u8, 79u8, 228u8, 211u8, 129u8, 113u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    pollId: topics.1,
                    deadline: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.pollId.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.pollId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PollCreated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PollCreated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &PollCreated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Voted(bytes32,address,uint256)` and selector `0xe4abc5380fa6939d1dc23b5e90b3a8a0e328f0f1a82a5f42bfb795bf9c717505`.
```solidity
event Voted(bytes32 indexed pollId, address indexed voter, uint256 indexed choice);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Voted {
        #[allow(missing_docs)]
        pub pollId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub voter: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub choice: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Voted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "Voted(bytes32,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                228u8, 171u8, 197u8, 56u8, 15u8, 166u8, 147u8, 157u8, 29u8, 194u8, 59u8,
                94u8, 144u8, 179u8, 168u8, 160u8, 227u8, 40u8, 240u8, 241u8, 168u8, 42u8,
                95u8, 66u8, 191u8, 183u8, 149u8, 191u8, 156u8, 113u8, 117u8, 5u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    pollId: topics.1,
                    voter: topics.2,
                    choice: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.pollId.clone(),
                    self.voter.clone(),
                    self.choice.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.pollId);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.voter,
                );
                out[3usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.choice);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Voted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Voted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Voted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Winner(bytes32,uint256)` and selector `0x269d3a24712436f77df15d63de7d2337a060c9102dee6f46c909fb0fa2d52f0c`.
```solidity
event Winner(bytes32 indexed pollId, uint256 indexed choice);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Winner {
        #[allow(missing_docs)]
        pub pollId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub choice: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Winner {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "Winner(bytes32,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                38u8, 157u8, 58u8, 36u8, 113u8, 36u8, 54u8, 247u8, 125u8, 241u8, 93u8,
                99u8, 222u8, 125u8, 35u8, 55u8, 160u8, 96u8, 201u8, 16u8, 45u8, 238u8,
                111u8, 70u8, 201u8, 9u8, 251u8, 15u8, 162u8, 213u8, 47u8, 12u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    pollId: topics.1,
                    choice: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.pollId.clone(), self.choice.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.pollId);
                out[2usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.choice);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Winner {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Winner> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Winner) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `createPoll(uint256,uint256,address[])` and selector `0xa4ed285a`.
```solidity
function createPoll(uint256 deadline, uint256 maxChoice, address[] memory voters) external returns (bytes32 pollId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createPollCall {
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub maxChoice: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub voters: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`createPoll(uint256,uint256,address[])`](createPollCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createPollReturn {
        #[allow(missing_docs)]
        pub pollId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createPollCall> for UnderlyingRustTuple<'_> {
                fn from(value: createPollCall) -> Self {
                    (value.deadline, value.maxChoice, value.voters)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createPollCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        deadline: tuple.0,
                        maxChoice: tuple.1,
                        voters: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createPollReturn> for UnderlyingRustTuple<'_> {
                fn from(value: createPollReturn) -> Self {
                    (value.pollId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createPollReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { pollId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for createPollCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "createPoll(uint256,uint256,address[])";
            const SELECTOR: [u8; 4] = [164u8, 237u8, 40u8, 90u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxChoice),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.voters),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: createPollReturn = r.into();
                        r.pollId
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: createPollReturn = r.into();
                        r.pollId
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getPollId(uint256,uint256,address,address[])` and selector `0x5fe5c1ec`.
```solidity
function getPollId(uint256 deadline, uint256 maxChoice, address owner, address[] memory voters) external pure returns (bytes32 pollId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPollIdCall {
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub maxChoice: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub voters: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getPollId(uint256,uint256,address,address[])`](getPollIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPollIdReturn {
        #[allow(missing_docs)]
        pub pollId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPollIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: getPollIdCall) -> Self {
                    (value.deadline, value.maxChoice, value.owner, value.voters)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getPollIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        deadline: tuple.0,
                        maxChoice: tuple.1,
                        owner: tuple.2,
                        voters: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPollIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getPollIdReturn) -> Self {
                    (value.pollId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getPollIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { pollId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getPollIdCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getPollId(uint256,uint256,address,address[])";
            const SELECTOR: [u8; 4] = [95u8, 229u8, 193u8, 236u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxChoice),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.voters),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getPollIdReturn = r.into();
                        r.pollId
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getPollIdReturn = r.into();
                        r.pollId
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getVotes(bytes32)` and selector `0x4c051100`.
```solidity
function getVotes(bytes32 pollId) external view returns (uint256 participants, uint256[] memory votes);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVotesCall {
        #[allow(missing_docs)]
        pub pollId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getVotes(bytes32)`](getVotesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVotesReturn {
        #[allow(missing_docs)]
        pub participants: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub votes: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVotesCall> for UnderlyingRustTuple<'_> {
                fn from(value: getVotesCall) -> Self {
                    (value.pollId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVotesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { pollId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVotesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getVotesReturn) -> Self {
                    (value.participants, value.votes)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVotesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        participants: tuple.0,
                        votes: tuple.1,
                    }
                }
            }
        }
        impl getVotesReturn {
            fn _tokenize(
                &self,
            ) -> <getVotesCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.participants),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.votes),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getVotesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getVotesReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getVotes(bytes32)";
            const SELECTOR: [u8; 4] = [76u8, 5u8, 17u8, 0u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.pollId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                getVotesReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setWinningChoice(bytes32,uint256)` and selector `0x098cf966`.
```solidity
function setWinningChoice(bytes32 pollId, uint256 choice) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setWinningChoiceCall {
        #[allow(missing_docs)]
        pub pollId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub choice: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setWinningChoice(bytes32,uint256)`](setWinningChoiceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setWinningChoiceReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setWinningChoiceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setWinningChoiceCall) -> Self {
                    (value.pollId, value.choice)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setWinningChoiceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        pollId: tuple.0,
                        choice: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setWinningChoiceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setWinningChoiceReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setWinningChoiceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setWinningChoiceReturn {
            fn _tokenize(
                &self,
            ) -> <setWinningChoiceCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setWinningChoiceCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setWinningChoiceReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setWinningChoice(bytes32,uint256)";
            const SELECTOR: [u8; 4] = [9u8, 140u8, 249u8, 102u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.pollId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.choice),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setWinningChoiceReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `vote(bytes32,uint256)` and selector `0x9ef1204c`.
```solidity
function vote(bytes32 pollId, uint256 choice) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct voteCall {
        #[allow(missing_docs)]
        pub pollId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub choice: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`vote(bytes32,uint256)`](voteCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct voteReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<voteCall> for UnderlyingRustTuple<'_> {
                fn from(value: voteCall) -> Self {
                    (value.pollId, value.choice)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for voteCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        pollId: tuple.0,
                        choice: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<voteReturn> for UnderlyingRustTuple<'_> {
                fn from(value: voteReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for voteReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl voteReturn {
            fn _tokenize(
                &self,
            ) -> <voteCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for voteCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = voteReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "vote(bytes32,uint256)";
            const SELECTOR: [u8; 4] = [158u8, 241u8, 32u8, 76u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.pollId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.choice),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                voteReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Voting`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum VotingCalls {
        #[allow(missing_docs)]
        createPoll(createPollCall),
        #[allow(missing_docs)]
        getPollId(getPollIdCall),
        #[allow(missing_docs)]
        getVotes(getVotesCall),
        #[allow(missing_docs)]
        setWinningChoice(setWinningChoiceCall),
        #[allow(missing_docs)]
        vote(voteCall),
    }
    #[automatically_derived]
    impl VotingCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [9u8, 140u8, 249u8, 102u8],
            [76u8, 5u8, 17u8, 0u8],
            [95u8, 229u8, 193u8, 236u8],
            [158u8, 241u8, 32u8, 76u8],
            [164u8, 237u8, 40u8, 90u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for VotingCalls {
        const NAME: &'static str = "VotingCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::createPoll(_) => {
                    <createPollCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getPollId(_) => {
                    <getPollIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getVotes(_) => <getVotesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setWinningChoice(_) => {
                    <setWinningChoiceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::vote(_) => <voteCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(&[u8]) -> alloy_sol_types::Result<VotingCalls>] = &[
                {
                    fn setWinningChoice(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <setWinningChoiceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(VotingCalls::setWinningChoice)
                    }
                    setWinningChoice
                },
                {
                    fn getVotes(data: &[u8]) -> alloy_sol_types::Result<VotingCalls> {
                        <getVotesCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(VotingCalls::getVotes)
                    }
                    getVotes
                },
                {
                    fn getPollId(data: &[u8]) -> alloy_sol_types::Result<VotingCalls> {
                        <getPollIdCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(VotingCalls::getPollId)
                    }
                    getPollId
                },
                {
                    fn vote(data: &[u8]) -> alloy_sol_types::Result<VotingCalls> {
                        <voteCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(VotingCalls::vote)
                    }
                    vote
                },
                {
                    fn createPoll(data: &[u8]) -> alloy_sol_types::Result<VotingCalls> {
                        <createPollCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(VotingCalls::createPoll)
                    }
                    createPoll
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<VotingCalls>] = &[
                {
                    fn setWinningChoice(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <setWinningChoiceCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(VotingCalls::setWinningChoice)
                    }
                    setWinningChoice
                },
                {
                    fn getVotes(data: &[u8]) -> alloy_sol_types::Result<VotingCalls> {
                        <getVotesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(VotingCalls::getVotes)
                    }
                    getVotes
                },
                {
                    fn getPollId(data: &[u8]) -> alloy_sol_types::Result<VotingCalls> {
                        <getPollIdCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(VotingCalls::getPollId)
                    }
                    getPollId
                },
                {
                    fn vote(data: &[u8]) -> alloy_sol_types::Result<VotingCalls> {
                        <voteCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(VotingCalls::vote)
                    }
                    vote
                },
                {
                    fn createPoll(data: &[u8]) -> alloy_sol_types::Result<VotingCalls> {
                        <createPollCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(VotingCalls::createPoll)
                    }
                    createPoll
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::createPoll(inner) => {
                    <createPollCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getPollId(inner) => {
                    <getPollIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getVotes(inner) => {
                    <getVotesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setWinningChoice(inner) => {
                    <setWinningChoiceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::vote(inner) => {
                    <voteCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::createPoll(inner) => {
                    <createPollCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getPollId(inner) => {
                    <getPollIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getVotes(inner) => {
                    <getVotesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setWinningChoice(inner) => {
                    <setWinningChoiceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::vote(inner) => {
                    <voteCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`Voting`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum VotingEvents {
        #[allow(missing_docs)]
        PollCreated(PollCreated),
        #[allow(missing_docs)]
        Voted(Voted),
        #[allow(missing_docs)]
        Winner(Winner),
    }
    #[automatically_derived]
    impl VotingEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                38u8, 157u8, 58u8, 36u8, 113u8, 36u8, 54u8, 247u8, 125u8, 241u8, 93u8,
                99u8, 222u8, 125u8, 35u8, 55u8, 160u8, 96u8, 201u8, 16u8, 45u8, 238u8,
                111u8, 70u8, 201u8, 9u8, 251u8, 15u8, 162u8, 213u8, 47u8, 12u8,
            ],
            [
                228u8, 171u8, 197u8, 56u8, 15u8, 166u8, 147u8, 157u8, 29u8, 194u8, 59u8,
                94u8, 144u8, 179u8, 168u8, 160u8, 227u8, 40u8, 240u8, 241u8, 168u8, 42u8,
                95u8, 66u8, 191u8, 183u8, 149u8, 191u8, 156u8, 113u8, 117u8, 5u8,
            ],
            [
                248u8, 89u8, 4u8, 29u8, 74u8, 221u8, 240u8, 133u8, 198u8, 34u8, 107u8,
                46u8, 135u8, 53u8, 161u8, 85u8, 174u8, 42u8, 76u8, 2u8, 19u8, 169u8,
                106u8, 44u8, 252u8, 185u8, 125u8, 79u8, 228u8, 211u8, 129u8, 113u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for VotingEvents {
        const NAME: &'static str = "VotingEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<PollCreated as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <PollCreated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::PollCreated)
                }
                Some(<Voted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Voted as alloy_sol_types::SolEvent>::decode_raw_log(topics, data)
                        .map(Self::Voted)
                }
                Some(<Winner as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Winner as alloy_sol_types::SolEvent>::decode_raw_log(topics, data)
                        .map(Self::Winner)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for VotingEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::PollCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Voted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Winner(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::PollCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Voted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Winner(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Voting`](self) contract instance.

See the [wrapper's documentation](`VotingInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(address: alloy_sol_types::private::Address, provider: P) -> VotingInstance<P, N> {
        VotingInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<VotingInstance<P, N>>,
    > {
        VotingInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        VotingInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`Voting`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Voting`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct VotingInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for VotingInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("VotingInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > VotingInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`Voting`](self) contract instance.

See the [wrapper's documentation](`VotingInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<VotingInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> VotingInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> VotingInstance<P, N> {
            VotingInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > VotingInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`createPoll`] function.
        pub fn createPoll(
            &self,
            deadline: alloy::sol_types::private::primitives::aliases::U256,
            maxChoice: alloy::sol_types::private::primitives::aliases::U256,
            voters: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::SolCallBuilder<&P, createPollCall, N> {
            self.call_builder(
                &createPollCall {
                    deadline,
                    maxChoice,
                    voters,
                },
            )
        }
        ///Creates a new call builder for the [`getPollId`] function.
        pub fn getPollId(
            &self,
            deadline: alloy::sol_types::private::primitives::aliases::U256,
            maxChoice: alloy::sol_types::private::primitives::aliases::U256,
            owner: alloy::sol_types::private::Address,
            voters: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::SolCallBuilder<&P, getPollIdCall, N> {
            self.call_builder(
                &getPollIdCall {
                    deadline,
                    maxChoice,
                    owner,
                    voters,
                },
            )
        }
        ///Creates a new call builder for the [`getVotes`] function.
        pub fn getVotes(
            &self,
            pollId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, getVotesCall, N> {
            self.call_builder(&getVotesCall { pollId })
        }
        ///Creates a new call builder for the [`setWinningChoice`] function.
        pub fn setWinningChoice(
            &self,
            pollId: alloy::sol_types::private::FixedBytes<32>,
            choice: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, setWinningChoiceCall, N> {
            self.call_builder(
                &setWinningChoiceCall {
                    pollId,
                    choice,
                },
            )
        }
        ///Creates a new call builder for the [`vote`] function.
        pub fn vote(
            &self,
            pollId: alloy::sol_types::private::FixedBytes<32>,
            choice: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, voteCall, N> {
            self.call_builder(&voteCall { pollId, choice })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > VotingInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`PollCreated`] event.
        pub fn PollCreated_filter(&self) -> alloy_contract::Event<&P, PollCreated, N> {
            self.event_filter::<PollCreated>()
        }
        ///Creates a new event filter for the [`Voted`] event.
        pub fn Voted_filter(&self) -> alloy_contract::Event<&P, Voted, N> {
            self.event_filter::<Voted>()
        }
        ///Creates a new event filter for the [`Winner`] event.
        pub fn Winner_filter(&self) -> alloy_contract::Event<&P, Winner, N> {
            self.event_filter::<Winner>()
        }
    }
}
