/**

Generated by the following Solidity interface...
```solidity
interface Voting {
    event ProposalCreated(bytes32 indexed proposalId, uint256 deadline);
    event ProposalExecuted(bytes32 indexed proposalId);
    event VoteCast(bytes32 indexed proposalId, address indexed voter, uint8 choice);

    function castVote(bytes32 proposalId, uint8 choice) external;
    function createProposal(uint256 deadline, uint256 threshold, address[] memory voters) external returns (bytes32 proposalId);
    function execute(bytes32 proposalId) external;
    function getProposalId(uint256 deadline, address proposer, address[] memory voters) external pure returns (bytes32 proposalId);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "castVote",
    "inputs": [
      {
        "name": "proposalId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "choice",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "createProposal",
    "inputs": [
      {
        "name": "deadline",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "threshold",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "voters",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [
      {
        "name": "proposalId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "execute",
    "inputs": [
      {
        "name": "proposalId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getProposalId",
    "inputs": [
      {
        "name": "deadline",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "voters",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [
      {
        "name": "proposalId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "event",
    "name": "ProposalCreated",
    "inputs": [
      {
        "name": "proposalId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "deadline",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ProposalExecuted",
    "inputs": [
      {
        "name": "proposalId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "VoteCast",
    "inputs": [
      {
        "name": "proposalId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "voter",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "choice",
        "type": "uint8",
        "indexed": false,
        "internalType": "uint8"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod Voting {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600f57600080fd5b506114df8061001f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806366f0689714610051578063823597dc14610081578063b4b0713e146100b1578063e751f271146100cd575b600080fd5b61006b60048036038101906100669190610ae2565b6100e9565b6040516100789190610b6f565b60405180910390f35b61009b60048036038101906100969190610be8565b61036a565b6040516100a89190610b6f565b60405180910390f35b6100cb60048036038101906100c69190610cc1565b6103c9565b005b6100e760048036038101906100e29190610d01565b6105bd565b005b600061012a856040518060400160405280601e81526020017f446561646c696e65206d75737420626520696e20746865206675747572650000815250610722565b6000841161016d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016490610d8b565b60405180910390fd5b600083839050116101b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101aa90610df7565b60405180910390fd5b60006101c18633868661036a565b9050600080600083815260200190815260200160002090506000816005015414610220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021790610e63565b60405180910390fd5b868160000181905550338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084849050816005018190555060005b858590508110156103245760018260030160008888858181106102a1576102a0610e83565b5b90506020020160208101906102b69190610eb2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600281111561031257610311610edf565b5b0217905550808060010191505061027b565b50817f28a5430ca2cbb228c6215ff41c7eacb763704d50f8f4c6ea19f11814e3bc1ccb886040516103559190610f1d565b60405180910390a28192505050949350505050565b600084848484604051602001610381929190610ff5565b604051602081830303815290604052805190602001206040516020016103a99392919061101d565b604051602081830303815290604052805190602001209050949350505050565b6000806000848152602001908152602001600020905061040581600001546040518060600160405280603781526020016114a860379139610722565b6001600281111561041957610418610edf565b5b8160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600281111561047a57610479610edf565b5b146104ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b1906110a0565b60405180910390fd5b60006104d2843360026107329092919063ffffffff16565b14610512576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105099061110c565b60405180910390fd5b61052b8333600160026107fe909392919063ffffffff16565b610569838360405160200161054192919061113b565b604051602081830303815290604052805190602001206001806108db9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff16837fd8a95ca05e9a2656fe21d836329d9cd77830e7fef7acb7c0fd3bf5421ea7ad9a846040516105b09190611164565b60405180910390a3505050565b600080600083815260200190815260200160002090506105f981600001546040518060600160405280602481526020016114846024913961090c565b8060060160009054906101000a900460ff161561064b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610642906111cb565b60405180910390fd5b6000826001604051602001610661929190611230565b6040516020818303038152906040528051906020012090506106ca8183600101546040518060400160405280601481526020017f4e6f7420656e6f7567682079657320766f746573000000000000000000000000815250600161091c909392919063ffffffff16565b60018260060160006101000a81548160ff0219169083151502179055506106f083610944565b827f7b1bcf1ccf901a11589afff5504d59fd0a53780eed2a952adade0348985139e060405160405180910390a2505050565b61072e82421082610947565b5050565b60003273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146107a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610799906112cb565b60405180910390fd5b83600001600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509392505050565b3273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461086c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610863906112cb565b60405180910390fd5b8084600001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108ce919061131a565b9250508190555050505050565b808360000160008481526020019081526020016000206000828254610900919061131a565b92505081905550505050565b61091882421182610947565b5050565b61093e8285600001600086815260200190815260200160002054101582610947565b50505050565b50565b60007f3dcdf63b41c103567d7225976ad9145e866c7a7dccc6c277ea86abbd268fbac960001c73ffffffffffffffffffffffffffffffffffffffff16836040516020016109949190611369565b6040516020818303038152906040526040516109b091906113f5565b600060405180830381855afa9150503d80600081146109eb576040519150601f19603f3d011682016040523d82523d6000602084013e6109f0565b606091505b50509050808290610a37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2e9190611461565b60405180910390fd5b50505050565b600080fd5b600080fd5b6000819050919050565b610a5a81610a47565b8114610a6557600080fd5b50565b600081359050610a7781610a51565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610aa257610aa1610a7d565b5b8235905067ffffffffffffffff811115610abf57610abe610a82565b5b602083019150836020820283011115610adb57610ada610a87565b5b9250929050565b60008060008060608587031215610afc57610afb610a3d565b5b6000610b0a87828801610a68565b9450506020610b1b87828801610a68565b935050604085013567ffffffffffffffff811115610b3c57610b3b610a42565b5b610b4887828801610a8c565b925092505092959194509250565b6000819050919050565b610b6981610b56565b82525050565b6000602082019050610b846000830184610b60565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bb582610b8a565b9050919050565b610bc581610baa565b8114610bd057600080fd5b50565b600081359050610be281610bbc565b92915050565b60008060008060608587031215610c0257610c01610a3d565b5b6000610c1087828801610a68565b9450506020610c2187828801610bd3565b935050604085013567ffffffffffffffff811115610c4257610c41610a42565b5b610c4e87828801610a8c565b925092505092959194509250565b610c6581610b56565b8114610c7057600080fd5b50565b600081359050610c8281610c5c565b92915050565b600060ff82169050919050565b610c9e81610c88565b8114610ca957600080fd5b50565b600081359050610cbb81610c95565b92915050565b60008060408385031215610cd857610cd7610a3d565b5b6000610ce685828601610c73565b9250506020610cf785828601610cac565b9150509250929050565b600060208284031215610d1757610d16610a3d565b5b6000610d2584828501610c73565b91505092915050565b600082825260208201905092915050565b7f5468726573686f6c642073686f756c64206e6f74206265203000000000000000600082015250565b6000610d75601983610d2e565b9150610d8082610d3f565b602082019050919050565b60006020820190508181036000830152610da481610d68565b9050919050565b7f5468657265206d757374206265206174206c65617374206f6e6520766f746572600082015250565b6000610de1602083610d2e565b9150610dec82610dab565b602082019050919050565b60006020820190508181036000830152610e1081610dd4565b9050919050565b7f70726f706f73616c20616c726561647920657869737473000000000000000000600082015250565b6000610e4d601783610d2e565b9150610e5882610e17565b602082019050919050565b60006020820190508181036000830152610e7c81610e40565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610ec857610ec7610a3d565b5b6000610ed684828501610bd3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610f1781610a47565b82525050565b6000602082019050610f326000830184610f0e565b92915050565b600081905092915050565b6000819050919050565b610f5681610baa565b82525050565b6000610f688383610f4d565b60208301905092915050565b6000610f836020840184610bd3565b905092915050565b6000602082019050919050565b6000610fa48385610f38565b9350610faf82610f43565b8060005b85811015610fe857610fc58284610f74565b610fcf8882610f5c565b9750610fda83610f8b565b925050600181019050610fb3565b5085925050509392505050565b6000611002828486610f98565b91508190509392505050565b61101781610baa565b82525050565b60006060820190506110326000830186610f0e565b61103f602083018561100e565b61104c6040830184610b60565b949350505050565b7f73656e646572206e6f74206120766f7465720000000000000000000000000000600082015250565b600061108a601283610d2e565b915061109582611054565b602082019050919050565b600060208201905081810360008301526110b98161107d565b9050919050565b7f616c726561647920766f74656400000000000000000000000000000000000000600082015250565b60006110f6600d83610d2e565b9150611101826110c0565b602082019050919050565b60006020820190508181036000830152611125816110e9565b9050919050565b61113581610c88565b82525050565b60006040820190506111506000830185610b60565b61115d602083018461112c565b9392505050565b6000602082019050611179600083018461112c565b92915050565b7f50726f706f73616c20616c726561647920657865637574656400000000000000600082015250565b60006111b5601983610d2e565b91506111c08261117f565b602082019050919050565b600060208201905081810360008301526111e4816111a8565b9050919050565b6000819050919050565b6000819050919050565b600061121a611215611210846111eb565b6111f5565b610c88565b9050919050565b61122a816111ff565b82525050565b60006040820190506112456000830185610b60565b6112526020830184611221565b9392505050565b7f43616e6e6f7420616363657373204f776e6564436f756e746572206f776e656460008201527f20627920616e6f74686572206164647265737300000000000000000000000000602082015250565b60006112b5603383610d2e565b91506112c082611259565b604082019050919050565b600060208201905081810360008301526112e4816112a8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061132582610a47565b915061133083610a47565b9250828201905080821115611348576113476112eb565b5b92915050565b60008115159050919050565b6113638161134e565b82525050565b600060208201905061137e600083018461135a565b92915050565b600081519050919050565b600081905092915050565b60005b838110156113b857808201518184015260208101905061139d565b60008484015250505050565b60006113cf82611384565b6113d9818561138f565b93506113e981856020860161139a565b80840191505092915050565b600061140182846113c4565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006114338261140c565b61143d8185610d2e565b935061144d81856020860161139a565b61145681611417565b840191505092915050565b6000602082019050818103600083015261147b8184611428565b90509291505056fe50726f706f73616c20646561646c696e6520686173206e6f74207061737365642079657450726f706f73616c20646561646c696e652068617320706173736564206f722070726f706f73616c20646f6573206e6f74206578697374
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0FW`\0\x80\xFD[Pa\x14\xDF\x80a\0\x1F`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0LW`\x005`\xE0\x1C\x80cf\xF0h\x97\x14a\0QW\x80c\x825\x97\xDC\x14a\0\x81W\x80c\xB4\xB0q>\x14a\0\xB1W\x80c\xE7Q\xF2q\x14a\0\xCDW[`\0\x80\xFD[a\0k`\x04\x806\x03\x81\x01\x90a\0f\x91\x90a\n\xE2V[a\0\xE9V[`@Qa\0x\x91\x90a\x0BoV[`@Q\x80\x91\x03\x90\xF3[a\0\x9B`\x04\x806\x03\x81\x01\x90a\0\x96\x91\x90a\x0B\xE8V[a\x03jV[`@Qa\0\xA8\x91\x90a\x0BoV[`@Q\x80\x91\x03\x90\xF3[a\0\xCB`\x04\x806\x03\x81\x01\x90a\0\xC6\x91\x90a\x0C\xC1V[a\x03\xC9V[\0[a\0\xE7`\x04\x806\x03\x81\x01\x90a\0\xE2\x91\x90a\r\x01V[a\x05\xBDV[\0[`\0a\x01*\x85`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7FDeadline must be in the future\0\0\x81RPa\x07\"V[`\0\x84\x11a\x01mW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x01d\x90a\r\x8BV[`@Q\x80\x91\x03\x90\xFD[`\0\x83\x83\x90P\x11a\x01\xB3W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x01\xAA\x90a\r\xF7V[`@Q\x80\x91\x03\x90\xFD[`\0a\x01\xC1\x863\x86\x86a\x03jV[\x90P`\0\x80`\0\x83\x81R` \x01\x90\x81R` \x01`\0 \x90P`\0\x81`\x05\x01T\x14a\x02 W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x02\x17\x90a\x0EcV[`@Q\x80\x91\x03\x90\xFD[\x86\x81`\0\x01\x81\x90UP3\x81`\x02\x01`\0a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x84\x84\x90P\x81`\x05\x01\x81\x90UP`\0[\x85\x85\x90P\x81\x10\x15a\x03$W`\x01\x82`\x03\x01`\0\x88\x88\x85\x81\x81\x10a\x02\xA1Wa\x02\xA0a\x0E\x83V[[\x90P` \x02\x01` \x81\x01\x90a\x02\xB6\x91\x90a\x0E\xB2V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x02\x81\x11\x15a\x03\x12Wa\x03\x11a\x0E\xDFV[[\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa\x02{V[P\x81\x7F(\xA5C\x0C\xA2\xCB\xB2(\xC6!_\xF4\x1C~\xAC\xB7cpMP\xF8\xF4\xC6\xEA\x19\xF1\x18\x14\xE3\xBC\x1C\xCB\x88`@Qa\x03U\x91\x90a\x0F\x1DV[`@Q\x80\x91\x03\x90\xA2\x81\x92PPP\x94\x93PPPPV[`\0\x84\x84\x84\x84`@Q` \x01a\x03\x81\x92\x91\x90a\x0F\xF5V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q` \x01a\x03\xA9\x93\x92\x91\x90a\x10\x1DV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x94\x93PPPPV[`\0\x80`\0\x84\x81R` \x01\x90\x81R` \x01`\0 \x90Pa\x04\x05\x81`\0\x01T`@Q\x80``\x01`@R\x80`7\x81R` \x01a\x14\xA8`7\x919a\x07\"V[`\x01`\x02\x81\x11\x15a\x04\x19Wa\x04\x18a\x0E\xDFV[[\x81`\x03\x01`\x003s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x02\x81\x11\x15a\x04zWa\x04ya\x0E\xDFV[[\x14a\x04\xBAW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04\xB1\x90a\x10\xA0V[`@Q\x80\x91\x03\x90\xFD[`\0a\x04\xD2\x843`\x02a\x072\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x14a\x05\x12W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x05\t\x90a\x11\x0CV[`@Q\x80\x91\x03\x90\xFD[a\x05+\x833`\x01`\x02a\x07\xFE\x90\x93\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[a\x05i\x83\x83`@Q` \x01a\x05A\x92\x91\x90a\x11;V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `\x01\x80a\x08\xDB\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83\x7F\xD8\xA9\\\xA0^\x9A&V\xFE!\xD862\x9D\x9C\xD7x0\xE7\xFE\xF7\xAC\xB7\xC0\xFD;\xF5B\x1E\xA7\xAD\x9A\x84`@Qa\x05\xB0\x91\x90a\x11dV[`@Q\x80\x91\x03\x90\xA3PPPV[`\0\x80`\0\x83\x81R` \x01\x90\x81R` \x01`\0 \x90Pa\x05\xF9\x81`\0\x01T`@Q\x80``\x01`@R\x80`$\x81R` \x01a\x14\x84`$\x919a\t\x0CV[\x80`\x06\x01`\0\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x06KW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x06B\x90a\x11\xCBV[`@Q\x80\x91\x03\x90\xFD[`\0\x82`\x01`@Q` \x01a\x06a\x92\x91\x90a\x120V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x06\xCA\x81\x83`\x01\x01T`@Q\x80`@\x01`@R\x80`\x14\x81R` \x01\x7FNot enough yes votes\0\0\0\0\0\0\0\0\0\0\0\0\x81RP`\x01a\t\x1C\x90\x93\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[`\x01\x82`\x06\x01`\0a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UPa\x06\xF0\x83a\tDV[\x82\x7F{\x1B\xCF\x1C\xCF\x90\x1A\x11X\x9A\xFF\xF5PMY\xFD\nSx\x0E\xED*\x95*\xDA\xDE\x03H\x98Q9\xE0`@Q`@Q\x80\x91\x03\x90\xA2PPPV[a\x07.\x82B\x10\x82a\tGV[PPV[`\x002s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x07\xA2W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x07\x99\x90a\x12\xCBV[`@Q\x80\x91\x03\x90\xFD[\x83`\0\x01`\0\x84\x81R` \x01\x90\x81R` \x01`\0 `\0\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 T\x90P\x93\x92PPPV[2s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x08lW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x08c\x90a\x12\xCBV[`@Q\x80\x91\x03\x90\xFD[\x80\x84`\0\x01`\0\x85\x81R` \x01\x90\x81R` \x01`\0 `\0\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0\x82\x82Ta\x08\xCE\x91\x90a\x13\x1AV[\x92PP\x81\x90UPPPPPV[\x80\x83`\0\x01`\0\x84\x81R` \x01\x90\x81R` \x01`\0 `\0\x82\x82Ta\t\0\x91\x90a\x13\x1AV[\x92PP\x81\x90UPPPPV[a\t\x18\x82B\x11\x82a\tGV[PPV[a\t>\x82\x85`\0\x01`\0\x86\x81R` \x01\x90\x81R` \x01`\0 T\x10\x15\x82a\tGV[PPPPV[PV[`\0\x7F=\xCD\xF6;A\xC1\x03V}r%\x97j\xD9\x14^\x86lz}\xCC\xC6\xC2w\xEA\x86\xAB\xBD&\x8F\xBA\xC9`\0\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83`@Q` \x01a\t\x94\x91\x90a\x13iV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Qa\t\xB0\x91\x90a\x13\xF5V[`\0`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80`\0\x81\x14a\t\xEBW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\t\xF0V[``\x91P[PP\x90P\x80\x82\x90a\n7W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\n.\x91\x90a\x14aV[`@Q\x80\x91\x03\x90\xFD[PPPPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x81\x90P\x91\x90PV[a\nZ\x81a\nGV[\x81\x14a\neW`\0\x80\xFD[PV[`\0\x815\x90Pa\nw\x81a\nQV[\x92\x91PPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\x83`\x1F\x84\x01\x12a\n\xA2Wa\n\xA1a\n}V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n\xBFWa\n\xBEa\n\x82V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\n\xDBWa\n\xDAa\n\x87V[[\x92P\x92\x90PV[`\0\x80`\0\x80``\x85\x87\x03\x12\x15a\n\xFCWa\n\xFBa\n=V[[`\0a\x0B\n\x87\x82\x88\x01a\nhV[\x94PP` a\x0B\x1B\x87\x82\x88\x01a\nhV[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B<Wa\x0B;a\nBV[[a\x0BH\x87\x82\x88\x01a\n\x8CV[\x92P\x92PP\x92\x95\x91\x94P\x92PV[`\0\x81\x90P\x91\x90PV[a\x0Bi\x81a\x0BVV[\x82RPPV[`\0` \x82\x01\x90Pa\x0B\x84`\0\x83\x01\x84a\x0B`V[\x92\x91PPV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\x0B\xB5\x82a\x0B\x8AV[\x90P\x91\x90PV[a\x0B\xC5\x81a\x0B\xAAV[\x81\x14a\x0B\xD0W`\0\x80\xFD[PV[`\0\x815\x90Pa\x0B\xE2\x81a\x0B\xBCV[\x92\x91PPV[`\0\x80`\0\x80``\x85\x87\x03\x12\x15a\x0C\x02Wa\x0C\x01a\n=V[[`\0a\x0C\x10\x87\x82\x88\x01a\nhV[\x94PP` a\x0C!\x87\x82\x88\x01a\x0B\xD3V[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0CBWa\x0CAa\nBV[[a\x0CN\x87\x82\x88\x01a\n\x8CV[\x92P\x92PP\x92\x95\x91\x94P\x92PV[a\x0Ce\x81a\x0BVV[\x81\x14a\x0CpW`\0\x80\xFD[PV[`\0\x815\x90Pa\x0C\x82\x81a\x0C\\V[\x92\x91PPV[`\0`\xFF\x82\x16\x90P\x91\x90PV[a\x0C\x9E\x81a\x0C\x88V[\x81\x14a\x0C\xA9W`\0\x80\xFD[PV[`\0\x815\x90Pa\x0C\xBB\x81a\x0C\x95V[\x92\x91PPV[`\0\x80`@\x83\x85\x03\x12\x15a\x0C\xD8Wa\x0C\xD7a\n=V[[`\0a\x0C\xE6\x85\x82\x86\x01a\x0CsV[\x92PP` a\x0C\xF7\x85\x82\x86\x01a\x0C\xACV[\x91PP\x92P\x92\x90PV[`\0` \x82\x84\x03\x12\x15a\r\x17Wa\r\x16a\n=V[[`\0a\r%\x84\x82\x85\x01a\x0CsV[\x91PP\x92\x91PPV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FThreshold should not be 0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\ru`\x19\x83a\r.V[\x91Pa\r\x80\x82a\r?V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\r\xA4\x81a\rhV[\x90P\x91\x90PV[\x7FThere must be at least one voter`\0\x82\x01RPV[`\0a\r\xE1` \x83a\r.V[\x91Pa\r\xEC\x82a\r\xABV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0E\x10\x81a\r\xD4V[\x90P\x91\x90PV[\x7Fproposal already exists\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x0EM`\x17\x83a\r.V[\x91Pa\x0EX\x82a\x0E\x17V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0E|\x81a\x0E@V[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[`\0` \x82\x84\x03\x12\x15a\x0E\xC8Wa\x0E\xC7a\n=V[[`\0a\x0E\xD6\x84\x82\x85\x01a\x0B\xD3V[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`!`\x04R`$`\0\xFD[a\x0F\x17\x81a\nGV[\x82RPPV[`\0` \x82\x01\x90Pa\x0F2`\0\x83\x01\x84a\x0F\x0EV[\x92\x91PPV[`\0\x81\x90P\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\x0FV\x81a\x0B\xAAV[\x82RPPV[`\0a\x0Fh\x83\x83a\x0FMV[` \x83\x01\x90P\x92\x91PPV[`\0a\x0F\x83` \x84\x01\x84a\x0B\xD3V[\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x0F\xA4\x83\x85a\x0F8V[\x93Pa\x0F\xAF\x82a\x0FCV[\x80`\0[\x85\x81\x10\x15a\x0F\xE8Wa\x0F\xC5\x82\x84a\x0FtV[a\x0F\xCF\x88\x82a\x0F\\V[\x97Pa\x0F\xDA\x83a\x0F\x8BV[\x92PP`\x01\x81\x01\x90Pa\x0F\xB3V[P\x85\x92PPP\x93\x92PPPV[`\0a\x10\x02\x82\x84\x86a\x0F\x98V[\x91P\x81\x90P\x93\x92PPPV[a\x10\x17\x81a\x0B\xAAV[\x82RPPV[`\0``\x82\x01\x90Pa\x102`\0\x83\x01\x86a\x0F\x0EV[a\x10?` \x83\x01\x85a\x10\x0EV[a\x10L`@\x83\x01\x84a\x0B`V[\x94\x93PPPPV[\x7Fsender not a voter\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x10\x8A`\x12\x83a\r.V[\x91Pa\x10\x95\x82a\x10TV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x10\xB9\x81a\x10}V[\x90P\x91\x90PV[\x7Falready voted\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x10\xF6`\r\x83a\r.V[\x91Pa\x11\x01\x82a\x10\xC0V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x11%\x81a\x10\xE9V[\x90P\x91\x90PV[a\x115\x81a\x0C\x88V[\x82RPPV[`\0`@\x82\x01\x90Pa\x11P`\0\x83\x01\x85a\x0B`V[a\x11]` \x83\x01\x84a\x11,V[\x93\x92PPPV[`\0` \x82\x01\x90Pa\x11y`\0\x83\x01\x84a\x11,V[\x92\x91PPV[\x7FProposal already executed\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x11\xB5`\x19\x83a\r.V[\x91Pa\x11\xC0\x82a\x11\x7FV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x11\xE4\x81a\x11\xA8V[\x90P\x91\x90PV[`\0\x81\x90P\x91\x90PV[`\0\x81\x90P\x91\x90PV[`\0a\x12\x1Aa\x12\x15a\x12\x10\x84a\x11\xEBV[a\x11\xF5V[a\x0C\x88V[\x90P\x91\x90PV[a\x12*\x81a\x11\xFFV[\x82RPPV[`\0`@\x82\x01\x90Pa\x12E`\0\x83\x01\x85a\x0B`V[a\x12R` \x83\x01\x84a\x12!V[\x93\x92PPPV[\x7FCannot access OwnedCounter owned`\0\x82\x01R\x7F by another address\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[`\0a\x12\xB5`3\x83a\r.V[\x91Pa\x12\xC0\x82a\x12YV[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x12\xE4\x81a\x12\xA8V[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[`\0a\x13%\x82a\nGV[\x91Pa\x130\x83a\nGV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x13HWa\x13Ga\x12\xEBV[[\x92\x91PPV[`\0\x81\x15\x15\x90P\x91\x90PV[a\x13c\x81a\x13NV[\x82RPPV[`\0` \x82\x01\x90Pa\x13~`\0\x83\x01\x84a\x13ZV[\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\x13\xB8W\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x13\x9DV[`\0\x84\x84\x01RPPPPV[`\0a\x13\xCF\x82a\x13\x84V[a\x13\xD9\x81\x85a\x13\x8FV[\x93Pa\x13\xE9\x81\x85` \x86\x01a\x13\x9AV[\x80\x84\x01\x91PP\x92\x91PPV[`\0a\x14\x01\x82\x84a\x13\xC4V[\x91P\x81\x90P\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[`\0a\x143\x82a\x14\x0CV[a\x14=\x81\x85a\r.V[\x93Pa\x14M\x81\x85` \x86\x01a\x13\x9AV[a\x14V\x81a\x14\x17V[\x84\x01\x91PP\x92\x91PPV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x14{\x81\x84a\x14(V[\x90P\x92\x91PPV\xFEProposal deadline has not passed yetProposal deadline has passed or proposal does not exist",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806366f0689714610051578063823597dc14610081578063b4b0713e146100b1578063e751f271146100cd575b600080fd5b61006b60048036038101906100669190610ae2565b6100e9565b6040516100789190610b6f565b60405180910390f35b61009b60048036038101906100969190610be8565b61036a565b6040516100a89190610b6f565b60405180910390f35b6100cb60048036038101906100c69190610cc1565b6103c9565b005b6100e760048036038101906100e29190610d01565b6105bd565b005b600061012a856040518060400160405280601e81526020017f446561646c696e65206d75737420626520696e20746865206675747572650000815250610722565b6000841161016d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016490610d8b565b60405180910390fd5b600083839050116101b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101aa90610df7565b60405180910390fd5b60006101c18633868661036a565b9050600080600083815260200190815260200160002090506000816005015414610220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021790610e63565b60405180910390fd5b868160000181905550338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084849050816005018190555060005b858590508110156103245760018260030160008888858181106102a1576102a0610e83565b5b90506020020160208101906102b69190610eb2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600281111561031257610311610edf565b5b0217905550808060010191505061027b565b50817f28a5430ca2cbb228c6215ff41c7eacb763704d50f8f4c6ea19f11814e3bc1ccb886040516103559190610f1d565b60405180910390a28192505050949350505050565b600084848484604051602001610381929190610ff5565b604051602081830303815290604052805190602001206040516020016103a99392919061101d565b604051602081830303815290604052805190602001209050949350505050565b6000806000848152602001908152602001600020905061040581600001546040518060600160405280603781526020016114a860379139610722565b6001600281111561041957610418610edf565b5b8160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600281111561047a57610479610edf565b5b146104ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b1906110a0565b60405180910390fd5b60006104d2843360026107329092919063ffffffff16565b14610512576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105099061110c565b60405180910390fd5b61052b8333600160026107fe909392919063ffffffff16565b610569838360405160200161054192919061113b565b604051602081830303815290604052805190602001206001806108db9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff16837fd8a95ca05e9a2656fe21d836329d9cd77830e7fef7acb7c0fd3bf5421ea7ad9a846040516105b09190611164565b60405180910390a3505050565b600080600083815260200190815260200160002090506105f981600001546040518060600160405280602481526020016114846024913961090c565b8060060160009054906101000a900460ff161561064b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610642906111cb565b60405180910390fd5b6000826001604051602001610661929190611230565b6040516020818303038152906040528051906020012090506106ca8183600101546040518060400160405280601481526020017f4e6f7420656e6f7567682079657320766f746573000000000000000000000000815250600161091c909392919063ffffffff16565b60018260060160006101000a81548160ff0219169083151502179055506106f083610944565b827f7b1bcf1ccf901a11589afff5504d59fd0a53780eed2a952adade0348985139e060405160405180910390a2505050565b61072e82421082610947565b5050565b60003273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146107a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610799906112cb565b60405180910390fd5b83600001600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509392505050565b3273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461086c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610863906112cb565b60405180910390fd5b8084600001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108ce919061131a565b9250508190555050505050565b808360000160008481526020019081526020016000206000828254610900919061131a565b92505081905550505050565b61091882421182610947565b5050565b61093e8285600001600086815260200190815260200160002054101582610947565b50505050565b50565b60007f3dcdf63b41c103567d7225976ad9145e866c7a7dccc6c277ea86abbd268fbac960001c73ffffffffffffffffffffffffffffffffffffffff16836040516020016109949190611369565b6040516020818303038152906040526040516109b091906113f5565b600060405180830381855afa9150503d80600081146109eb576040519150601f19603f3d011682016040523d82523d6000602084013e6109f0565b606091505b50509050808290610a37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2e9190611461565b60405180910390fd5b50505050565b600080fd5b600080fd5b6000819050919050565b610a5a81610a47565b8114610a6557600080fd5b50565b600081359050610a7781610a51565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610aa257610aa1610a7d565b5b8235905067ffffffffffffffff811115610abf57610abe610a82565b5b602083019150836020820283011115610adb57610ada610a87565b5b9250929050565b60008060008060608587031215610afc57610afb610a3d565b5b6000610b0a87828801610a68565b9450506020610b1b87828801610a68565b935050604085013567ffffffffffffffff811115610b3c57610b3b610a42565b5b610b4887828801610a8c565b925092505092959194509250565b6000819050919050565b610b6981610b56565b82525050565b6000602082019050610b846000830184610b60565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bb582610b8a565b9050919050565b610bc581610baa565b8114610bd057600080fd5b50565b600081359050610be281610bbc565b92915050565b60008060008060608587031215610c0257610c01610a3d565b5b6000610c1087828801610a68565b9450506020610c2187828801610bd3565b935050604085013567ffffffffffffffff811115610c4257610c41610a42565b5b610c4e87828801610a8c565b925092505092959194509250565b610c6581610b56565b8114610c7057600080fd5b50565b600081359050610c8281610c5c565b92915050565b600060ff82169050919050565b610c9e81610c88565b8114610ca957600080fd5b50565b600081359050610cbb81610c95565b92915050565b60008060408385031215610cd857610cd7610a3d565b5b6000610ce685828601610c73565b9250506020610cf785828601610cac565b9150509250929050565b600060208284031215610d1757610d16610a3d565b5b6000610d2584828501610c73565b91505092915050565b600082825260208201905092915050565b7f5468726573686f6c642073686f756c64206e6f74206265203000000000000000600082015250565b6000610d75601983610d2e565b9150610d8082610d3f565b602082019050919050565b60006020820190508181036000830152610da481610d68565b9050919050565b7f5468657265206d757374206265206174206c65617374206f6e6520766f746572600082015250565b6000610de1602083610d2e565b9150610dec82610dab565b602082019050919050565b60006020820190508181036000830152610e1081610dd4565b9050919050565b7f70726f706f73616c20616c726561647920657869737473000000000000000000600082015250565b6000610e4d601783610d2e565b9150610e5882610e17565b602082019050919050565b60006020820190508181036000830152610e7c81610e40565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610ec857610ec7610a3d565b5b6000610ed684828501610bd3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610f1781610a47565b82525050565b6000602082019050610f326000830184610f0e565b92915050565b600081905092915050565b6000819050919050565b610f5681610baa565b82525050565b6000610f688383610f4d565b60208301905092915050565b6000610f836020840184610bd3565b905092915050565b6000602082019050919050565b6000610fa48385610f38565b9350610faf82610f43565b8060005b85811015610fe857610fc58284610f74565b610fcf8882610f5c565b9750610fda83610f8b565b925050600181019050610fb3565b5085925050509392505050565b6000611002828486610f98565b91508190509392505050565b61101781610baa565b82525050565b60006060820190506110326000830186610f0e565b61103f602083018561100e565b61104c6040830184610b60565b949350505050565b7f73656e646572206e6f74206120766f7465720000000000000000000000000000600082015250565b600061108a601283610d2e565b915061109582611054565b602082019050919050565b600060208201905081810360008301526110b98161107d565b9050919050565b7f616c726561647920766f74656400000000000000000000000000000000000000600082015250565b60006110f6600d83610d2e565b9150611101826110c0565b602082019050919050565b60006020820190508181036000830152611125816110e9565b9050919050565b61113581610c88565b82525050565b60006040820190506111506000830185610b60565b61115d602083018461112c565b9392505050565b6000602082019050611179600083018461112c565b92915050565b7f50726f706f73616c20616c726561647920657865637574656400000000000000600082015250565b60006111b5601983610d2e565b91506111c08261117f565b602082019050919050565b600060208201905081810360008301526111e4816111a8565b9050919050565b6000819050919050565b6000819050919050565b600061121a611215611210846111eb565b6111f5565b610c88565b9050919050565b61122a816111ff565b82525050565b60006040820190506112456000830185610b60565b6112526020830184611221565b9392505050565b7f43616e6e6f7420616363657373204f776e6564436f756e746572206f776e656460008201527f20627920616e6f74686572206164647265737300000000000000000000000000602082015250565b60006112b5603383610d2e565b91506112c082611259565b604082019050919050565b600060208201905081810360008301526112e4816112a8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061132582610a47565b915061133083610a47565b9250828201905080821115611348576113476112eb565b5b92915050565b60008115159050919050565b6113638161134e565b82525050565b600060208201905061137e600083018461135a565b92915050565b600081519050919050565b600081905092915050565b60005b838110156113b857808201518184015260208101905061139d565b60008484015250505050565b60006113cf82611384565b6113d9818561138f565b93506113e981856020860161139a565b80840191505092915050565b600061140182846113c4565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006114338261140c565b61143d8185610d2e565b935061144d81856020860161139a565b61145681611417565b840191505092915050565b6000602082019050818103600083015261147b8184611428565b90509291505056fe50726f706f73616c20646561646c696e6520686173206e6f74207061737365642079657450726f706f73616c20646561646c696e652068617320706173736564206f722070726f706f73616c20646f6573206e6f74206578697374
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0LW`\x005`\xE0\x1C\x80cf\xF0h\x97\x14a\0QW\x80c\x825\x97\xDC\x14a\0\x81W\x80c\xB4\xB0q>\x14a\0\xB1W\x80c\xE7Q\xF2q\x14a\0\xCDW[`\0\x80\xFD[a\0k`\x04\x806\x03\x81\x01\x90a\0f\x91\x90a\n\xE2V[a\0\xE9V[`@Qa\0x\x91\x90a\x0BoV[`@Q\x80\x91\x03\x90\xF3[a\0\x9B`\x04\x806\x03\x81\x01\x90a\0\x96\x91\x90a\x0B\xE8V[a\x03jV[`@Qa\0\xA8\x91\x90a\x0BoV[`@Q\x80\x91\x03\x90\xF3[a\0\xCB`\x04\x806\x03\x81\x01\x90a\0\xC6\x91\x90a\x0C\xC1V[a\x03\xC9V[\0[a\0\xE7`\x04\x806\x03\x81\x01\x90a\0\xE2\x91\x90a\r\x01V[a\x05\xBDV[\0[`\0a\x01*\x85`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7FDeadline must be in the future\0\0\x81RPa\x07\"V[`\0\x84\x11a\x01mW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x01d\x90a\r\x8BV[`@Q\x80\x91\x03\x90\xFD[`\0\x83\x83\x90P\x11a\x01\xB3W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x01\xAA\x90a\r\xF7V[`@Q\x80\x91\x03\x90\xFD[`\0a\x01\xC1\x863\x86\x86a\x03jV[\x90P`\0\x80`\0\x83\x81R` \x01\x90\x81R` \x01`\0 \x90P`\0\x81`\x05\x01T\x14a\x02 W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x02\x17\x90a\x0EcV[`@Q\x80\x91\x03\x90\xFD[\x86\x81`\0\x01\x81\x90UP3\x81`\x02\x01`\0a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x84\x84\x90P\x81`\x05\x01\x81\x90UP`\0[\x85\x85\x90P\x81\x10\x15a\x03$W`\x01\x82`\x03\x01`\0\x88\x88\x85\x81\x81\x10a\x02\xA1Wa\x02\xA0a\x0E\x83V[[\x90P` \x02\x01` \x81\x01\x90a\x02\xB6\x91\x90a\x0E\xB2V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x02\x81\x11\x15a\x03\x12Wa\x03\x11a\x0E\xDFV[[\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa\x02{V[P\x81\x7F(\xA5C\x0C\xA2\xCB\xB2(\xC6!_\xF4\x1C~\xAC\xB7cpMP\xF8\xF4\xC6\xEA\x19\xF1\x18\x14\xE3\xBC\x1C\xCB\x88`@Qa\x03U\x91\x90a\x0F\x1DV[`@Q\x80\x91\x03\x90\xA2\x81\x92PPP\x94\x93PPPPV[`\0\x84\x84\x84\x84`@Q` \x01a\x03\x81\x92\x91\x90a\x0F\xF5V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q` \x01a\x03\xA9\x93\x92\x91\x90a\x10\x1DV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x94\x93PPPPV[`\0\x80`\0\x84\x81R` \x01\x90\x81R` \x01`\0 \x90Pa\x04\x05\x81`\0\x01T`@Q\x80``\x01`@R\x80`7\x81R` \x01a\x14\xA8`7\x919a\x07\"V[`\x01`\x02\x81\x11\x15a\x04\x19Wa\x04\x18a\x0E\xDFV[[\x81`\x03\x01`\x003s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x02\x81\x11\x15a\x04zWa\x04ya\x0E\xDFV[[\x14a\x04\xBAW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04\xB1\x90a\x10\xA0V[`@Q\x80\x91\x03\x90\xFD[`\0a\x04\xD2\x843`\x02a\x072\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x14a\x05\x12W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x05\t\x90a\x11\x0CV[`@Q\x80\x91\x03\x90\xFD[a\x05+\x833`\x01`\x02a\x07\xFE\x90\x93\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[a\x05i\x83\x83`@Q` \x01a\x05A\x92\x91\x90a\x11;V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `\x01\x80a\x08\xDB\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83\x7F\xD8\xA9\\\xA0^\x9A&V\xFE!\xD862\x9D\x9C\xD7x0\xE7\xFE\xF7\xAC\xB7\xC0\xFD;\xF5B\x1E\xA7\xAD\x9A\x84`@Qa\x05\xB0\x91\x90a\x11dV[`@Q\x80\x91\x03\x90\xA3PPPV[`\0\x80`\0\x83\x81R` \x01\x90\x81R` \x01`\0 \x90Pa\x05\xF9\x81`\0\x01T`@Q\x80``\x01`@R\x80`$\x81R` \x01a\x14\x84`$\x919a\t\x0CV[\x80`\x06\x01`\0\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x06KW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x06B\x90a\x11\xCBV[`@Q\x80\x91\x03\x90\xFD[`\0\x82`\x01`@Q` \x01a\x06a\x92\x91\x90a\x120V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x06\xCA\x81\x83`\x01\x01T`@Q\x80`@\x01`@R\x80`\x14\x81R` \x01\x7FNot enough yes votes\0\0\0\0\0\0\0\0\0\0\0\0\x81RP`\x01a\t\x1C\x90\x93\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[`\x01\x82`\x06\x01`\0a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UPa\x06\xF0\x83a\tDV[\x82\x7F{\x1B\xCF\x1C\xCF\x90\x1A\x11X\x9A\xFF\xF5PMY\xFD\nSx\x0E\xED*\x95*\xDA\xDE\x03H\x98Q9\xE0`@Q`@Q\x80\x91\x03\x90\xA2PPPV[a\x07.\x82B\x10\x82a\tGV[PPV[`\x002s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x07\xA2W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x07\x99\x90a\x12\xCBV[`@Q\x80\x91\x03\x90\xFD[\x83`\0\x01`\0\x84\x81R` \x01\x90\x81R` \x01`\0 `\0\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 T\x90P\x93\x92PPPV[2s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x08lW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x08c\x90a\x12\xCBV[`@Q\x80\x91\x03\x90\xFD[\x80\x84`\0\x01`\0\x85\x81R` \x01\x90\x81R` \x01`\0 `\0\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0\x82\x82Ta\x08\xCE\x91\x90a\x13\x1AV[\x92PP\x81\x90UPPPPPV[\x80\x83`\0\x01`\0\x84\x81R` \x01\x90\x81R` \x01`\0 `\0\x82\x82Ta\t\0\x91\x90a\x13\x1AV[\x92PP\x81\x90UPPPPV[a\t\x18\x82B\x11\x82a\tGV[PPV[a\t>\x82\x85`\0\x01`\0\x86\x81R` \x01\x90\x81R` \x01`\0 T\x10\x15\x82a\tGV[PPPPV[PV[`\0\x7F=\xCD\xF6;A\xC1\x03V}r%\x97j\xD9\x14^\x86lz}\xCC\xC6\xC2w\xEA\x86\xAB\xBD&\x8F\xBA\xC9`\0\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83`@Q` \x01a\t\x94\x91\x90a\x13iV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Qa\t\xB0\x91\x90a\x13\xF5V[`\0`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80`\0\x81\x14a\t\xEBW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\t\xF0V[``\x91P[PP\x90P\x80\x82\x90a\n7W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\n.\x91\x90a\x14aV[`@Q\x80\x91\x03\x90\xFD[PPPPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x81\x90P\x91\x90PV[a\nZ\x81a\nGV[\x81\x14a\neW`\0\x80\xFD[PV[`\0\x815\x90Pa\nw\x81a\nQV[\x92\x91PPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\x83`\x1F\x84\x01\x12a\n\xA2Wa\n\xA1a\n}V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n\xBFWa\n\xBEa\n\x82V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\n\xDBWa\n\xDAa\n\x87V[[\x92P\x92\x90PV[`\0\x80`\0\x80``\x85\x87\x03\x12\x15a\n\xFCWa\n\xFBa\n=V[[`\0a\x0B\n\x87\x82\x88\x01a\nhV[\x94PP` a\x0B\x1B\x87\x82\x88\x01a\nhV[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B<Wa\x0B;a\nBV[[a\x0BH\x87\x82\x88\x01a\n\x8CV[\x92P\x92PP\x92\x95\x91\x94P\x92PV[`\0\x81\x90P\x91\x90PV[a\x0Bi\x81a\x0BVV[\x82RPPV[`\0` \x82\x01\x90Pa\x0B\x84`\0\x83\x01\x84a\x0B`V[\x92\x91PPV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\x0B\xB5\x82a\x0B\x8AV[\x90P\x91\x90PV[a\x0B\xC5\x81a\x0B\xAAV[\x81\x14a\x0B\xD0W`\0\x80\xFD[PV[`\0\x815\x90Pa\x0B\xE2\x81a\x0B\xBCV[\x92\x91PPV[`\0\x80`\0\x80``\x85\x87\x03\x12\x15a\x0C\x02Wa\x0C\x01a\n=V[[`\0a\x0C\x10\x87\x82\x88\x01a\nhV[\x94PP` a\x0C!\x87\x82\x88\x01a\x0B\xD3V[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0CBWa\x0CAa\nBV[[a\x0CN\x87\x82\x88\x01a\n\x8CV[\x92P\x92PP\x92\x95\x91\x94P\x92PV[a\x0Ce\x81a\x0BVV[\x81\x14a\x0CpW`\0\x80\xFD[PV[`\0\x815\x90Pa\x0C\x82\x81a\x0C\\V[\x92\x91PPV[`\0`\xFF\x82\x16\x90P\x91\x90PV[a\x0C\x9E\x81a\x0C\x88V[\x81\x14a\x0C\xA9W`\0\x80\xFD[PV[`\0\x815\x90Pa\x0C\xBB\x81a\x0C\x95V[\x92\x91PPV[`\0\x80`@\x83\x85\x03\x12\x15a\x0C\xD8Wa\x0C\xD7a\n=V[[`\0a\x0C\xE6\x85\x82\x86\x01a\x0CsV[\x92PP` a\x0C\xF7\x85\x82\x86\x01a\x0C\xACV[\x91PP\x92P\x92\x90PV[`\0` \x82\x84\x03\x12\x15a\r\x17Wa\r\x16a\n=V[[`\0a\r%\x84\x82\x85\x01a\x0CsV[\x91PP\x92\x91PPV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FThreshold should not be 0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\ru`\x19\x83a\r.V[\x91Pa\r\x80\x82a\r?V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\r\xA4\x81a\rhV[\x90P\x91\x90PV[\x7FThere must be at least one voter`\0\x82\x01RPV[`\0a\r\xE1` \x83a\r.V[\x91Pa\r\xEC\x82a\r\xABV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0E\x10\x81a\r\xD4V[\x90P\x91\x90PV[\x7Fproposal already exists\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x0EM`\x17\x83a\r.V[\x91Pa\x0EX\x82a\x0E\x17V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0E|\x81a\x0E@V[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[`\0` \x82\x84\x03\x12\x15a\x0E\xC8Wa\x0E\xC7a\n=V[[`\0a\x0E\xD6\x84\x82\x85\x01a\x0B\xD3V[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`!`\x04R`$`\0\xFD[a\x0F\x17\x81a\nGV[\x82RPPV[`\0` \x82\x01\x90Pa\x0F2`\0\x83\x01\x84a\x0F\x0EV[\x92\x91PPV[`\0\x81\x90P\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\x0FV\x81a\x0B\xAAV[\x82RPPV[`\0a\x0Fh\x83\x83a\x0FMV[` \x83\x01\x90P\x92\x91PPV[`\0a\x0F\x83` \x84\x01\x84a\x0B\xD3V[\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x0F\xA4\x83\x85a\x0F8V[\x93Pa\x0F\xAF\x82a\x0FCV[\x80`\0[\x85\x81\x10\x15a\x0F\xE8Wa\x0F\xC5\x82\x84a\x0FtV[a\x0F\xCF\x88\x82a\x0F\\V[\x97Pa\x0F\xDA\x83a\x0F\x8BV[\x92PP`\x01\x81\x01\x90Pa\x0F\xB3V[P\x85\x92PPP\x93\x92PPPV[`\0a\x10\x02\x82\x84\x86a\x0F\x98V[\x91P\x81\x90P\x93\x92PPPV[a\x10\x17\x81a\x0B\xAAV[\x82RPPV[`\0``\x82\x01\x90Pa\x102`\0\x83\x01\x86a\x0F\x0EV[a\x10?` \x83\x01\x85a\x10\x0EV[a\x10L`@\x83\x01\x84a\x0B`V[\x94\x93PPPPV[\x7Fsender not a voter\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x10\x8A`\x12\x83a\r.V[\x91Pa\x10\x95\x82a\x10TV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x10\xB9\x81a\x10}V[\x90P\x91\x90PV[\x7Falready voted\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x10\xF6`\r\x83a\r.V[\x91Pa\x11\x01\x82a\x10\xC0V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x11%\x81a\x10\xE9V[\x90P\x91\x90PV[a\x115\x81a\x0C\x88V[\x82RPPV[`\0`@\x82\x01\x90Pa\x11P`\0\x83\x01\x85a\x0B`V[a\x11]` \x83\x01\x84a\x11,V[\x93\x92PPPV[`\0` \x82\x01\x90Pa\x11y`\0\x83\x01\x84a\x11,V[\x92\x91PPV[\x7FProposal already executed\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x11\xB5`\x19\x83a\r.V[\x91Pa\x11\xC0\x82a\x11\x7FV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x11\xE4\x81a\x11\xA8V[\x90P\x91\x90PV[`\0\x81\x90P\x91\x90PV[`\0\x81\x90P\x91\x90PV[`\0a\x12\x1Aa\x12\x15a\x12\x10\x84a\x11\xEBV[a\x11\xF5V[a\x0C\x88V[\x90P\x91\x90PV[a\x12*\x81a\x11\xFFV[\x82RPPV[`\0`@\x82\x01\x90Pa\x12E`\0\x83\x01\x85a\x0B`V[a\x12R` \x83\x01\x84a\x12!V[\x93\x92PPPV[\x7FCannot access OwnedCounter owned`\0\x82\x01R\x7F by another address\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[`\0a\x12\xB5`3\x83a\r.V[\x91Pa\x12\xC0\x82a\x12YV[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x12\xE4\x81a\x12\xA8V[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[`\0a\x13%\x82a\nGV[\x91Pa\x130\x83a\nGV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x13HWa\x13Ga\x12\xEBV[[\x92\x91PPV[`\0\x81\x15\x15\x90P\x91\x90PV[a\x13c\x81a\x13NV[\x82RPPV[`\0` \x82\x01\x90Pa\x13~`\0\x83\x01\x84a\x13ZV[\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\x13\xB8W\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x13\x9DV[`\0\x84\x84\x01RPPPPV[`\0a\x13\xCF\x82a\x13\x84V[a\x13\xD9\x81\x85a\x13\x8FV[\x93Pa\x13\xE9\x81\x85` \x86\x01a\x13\x9AV[\x80\x84\x01\x91PP\x92\x91PPV[`\0a\x14\x01\x82\x84a\x13\xC4V[\x91P\x81\x90P\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[`\0a\x143\x82a\x14\x0CV[a\x14=\x81\x85a\r.V[\x93Pa\x14M\x81\x85` \x86\x01a\x13\x9AV[a\x14V\x81a\x14\x17V[\x84\x01\x91PP\x92\x91PPV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x14{\x81\x84a\x14(V[\x90P\x92\x91PPV\xFEProposal deadline has not passed yetProposal deadline has passed or proposal does not exist",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `ProposalCreated(bytes32,uint256)` and selector `0x28a5430ca2cbb228c6215ff41c7eacb763704d50f8f4c6ea19f11814e3bc1ccb`.
```solidity
event ProposalCreated(bytes32 indexed proposalId, uint256 deadline);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ProposalCreated {
        #[allow(missing_docs)]
        pub proposalId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ProposalCreated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "ProposalCreated(bytes32,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                40u8, 165u8, 67u8, 12u8, 162u8, 203u8, 178u8, 40u8, 198u8, 33u8, 95u8,
                244u8, 28u8, 126u8, 172u8, 183u8, 99u8, 112u8, 77u8, 80u8, 248u8, 244u8,
                198u8, 234u8, 25u8, 241u8, 24u8, 20u8, 227u8, 188u8, 28u8, 203u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    proposalId: topics.1,
                    deadline: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.proposalId.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.proposalId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ProposalCreated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ProposalCreated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ProposalCreated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `ProposalExecuted(bytes32)` and selector `0x7b1bcf1ccf901a11589afff5504d59fd0a53780eed2a952adade0348985139e0`.
```solidity
event ProposalExecuted(bytes32 indexed proposalId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ProposalExecuted {
        #[allow(missing_docs)]
        pub proposalId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ProposalExecuted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "ProposalExecuted(bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                123u8, 27u8, 207u8, 28u8, 207u8, 144u8, 26u8, 17u8, 88u8, 154u8, 255u8,
                245u8, 80u8, 77u8, 89u8, 253u8, 10u8, 83u8, 120u8, 14u8, 237u8, 42u8,
                149u8, 42u8, 218u8, 222u8, 3u8, 72u8, 152u8, 81u8, 57u8, 224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { proposalId: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.proposalId.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.proposalId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ProposalExecuted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ProposalExecuted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ProposalExecuted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `VoteCast(bytes32,address,uint8)` and selector `0xd8a95ca05e9a2656fe21d836329d9cd77830e7fef7acb7c0fd3bf5421ea7ad9a`.
```solidity
event VoteCast(bytes32 indexed proposalId, address indexed voter, uint8 choice);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct VoteCast {
        #[allow(missing_docs)]
        pub proposalId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub voter: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub choice: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for VoteCast {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "VoteCast(bytes32,address,uint8)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                216u8, 169u8, 92u8, 160u8, 94u8, 154u8, 38u8, 86u8, 254u8, 33u8, 216u8,
                54u8, 50u8, 157u8, 156u8, 215u8, 120u8, 48u8, 231u8, 254u8, 247u8, 172u8,
                183u8, 192u8, 253u8, 59u8, 245u8, 66u8, 30u8, 167u8, 173u8, 154u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    proposalId: topics.1,
                    voter: topics.2,
                    choice: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.choice),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.proposalId.clone(),
                    self.voter.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.proposalId);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.voter,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for VoteCast {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&VoteCast> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &VoteCast) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `castVote(bytes32,uint8)` and selector `0xb4b0713e`.
```solidity
function castVote(bytes32 proposalId, uint8 choice) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct castVoteCall {
        #[allow(missing_docs)]
        pub proposalId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub choice: u8,
    }
    ///Container type for the return parameters of the [`castVote(bytes32,uint8)`](castVoteCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct castVoteReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<8>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                u8,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<castVoteCall> for UnderlyingRustTuple<'_> {
                fn from(value: castVoteCall) -> Self {
                    (value.proposalId, value.choice)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for castVoteCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposalId: tuple.0,
                        choice: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<castVoteReturn> for UnderlyingRustTuple<'_> {
                fn from(value: castVoteReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for castVoteReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for castVoteCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<8>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = castVoteReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "castVote(bytes32,uint8)";
            const SELECTOR: [u8; 4] = [180u8, 176u8, 113u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.proposalId),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.choice),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `createProposal(uint256,uint256,address[])` and selector `0x66f06897`.
```solidity
function createProposal(uint256 deadline, uint256 threshold, address[] memory voters) external returns (bytes32 proposalId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createProposalCall {
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub threshold: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub voters: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`createProposal(uint256,uint256,address[])`](createProposalCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createProposalReturn {
        #[allow(missing_docs)]
        pub proposalId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createProposalCall> for UnderlyingRustTuple<'_> {
                fn from(value: createProposalCall) -> Self {
                    (value.deadline, value.threshold, value.voters)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createProposalCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        deadline: tuple.0,
                        threshold: tuple.1,
                        voters: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createProposalReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: createProposalReturn) -> Self {
                    (value.proposalId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for createProposalReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposalId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for createProposalCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = createProposalReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "createProposal(uint256,uint256,address[])";
            const SELECTOR: [u8; 4] = [102u8, 240u8, 104u8, 151u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.threshold),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.voters),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `execute(bytes32)` and selector `0xe751f271`.
```solidity
function execute(bytes32 proposalId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeCall {
        #[allow(missing_docs)]
        pub proposalId: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`execute(bytes32)`](executeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeCall) -> Self {
                    (value.proposalId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposalId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: executeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "execute(bytes32)";
            const SELECTOR: [u8; 4] = [231u8, 81u8, 242u8, 113u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.proposalId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getProposalId(uint256,address,address[])` and selector `0x823597dc`.
```solidity
function getProposalId(uint256 deadline, address proposer, address[] memory voters) external pure returns (bytes32 proposalId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getProposalIdCall {
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub voters: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getProposalId(uint256,address,address[])`](getProposalIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getProposalIdReturn {
        #[allow(missing_docs)]
        pub proposalId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getProposalIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: getProposalIdCall) -> Self {
                    (value.deadline, value.proposer, value.voters)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getProposalIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        deadline: tuple.0,
                        proposer: tuple.1,
                        voters: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getProposalIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getProposalIdReturn) -> Self {
                    (value.proposalId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getProposalIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposalId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getProposalIdCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getProposalIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getProposalId(uint256,address,address[])";
            const SELECTOR: [u8; 4] = [130u8, 53u8, 151u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.voters),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Voting`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum VotingCalls {
        #[allow(missing_docs)]
        castVote(castVoteCall),
        #[allow(missing_docs)]
        createProposal(createProposalCall),
        #[allow(missing_docs)]
        execute(executeCall),
        #[allow(missing_docs)]
        getProposalId(getProposalIdCall),
    }
    #[automatically_derived]
    impl VotingCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [102u8, 240u8, 104u8, 151u8],
            [130u8, 53u8, 151u8, 220u8],
            [180u8, 176u8, 113u8, 62u8],
            [231u8, 81u8, 242u8, 113u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for VotingCalls {
        const NAME: &'static str = "VotingCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::castVote(_) => <castVoteCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::createProposal(_) => {
                    <createProposalCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::execute(_) => <executeCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::getProposalId(_) => {
                    <getProposalIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<VotingCalls>] = &[
                {
                    fn createProposal(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <createProposalCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VotingCalls::createProposal)
                    }
                    createProposal
                },
                {
                    fn getProposalId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <getProposalIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VotingCalls::getProposalId)
                    }
                    getProposalId
                },
                {
                    fn castVote(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <castVoteCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VotingCalls::castVote)
                    }
                    castVote
                },
                {
                    fn execute(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <executeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VotingCalls::execute)
                    }
                    execute
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::castVote(inner) => {
                    <castVoteCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::createProposal(inner) => {
                    <createProposalCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::execute(inner) => {
                    <executeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getProposalId(inner) => {
                    <getProposalIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::castVote(inner) => {
                    <castVoteCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::createProposal(inner) => {
                    <createProposalCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::execute(inner) => {
                    <executeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::getProposalId(inner) => {
                    <getProposalIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`Voting`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum VotingEvents {
        #[allow(missing_docs)]
        ProposalCreated(ProposalCreated),
        #[allow(missing_docs)]
        ProposalExecuted(ProposalExecuted),
        #[allow(missing_docs)]
        VoteCast(VoteCast),
    }
    #[automatically_derived]
    impl VotingEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                40u8, 165u8, 67u8, 12u8, 162u8, 203u8, 178u8, 40u8, 198u8, 33u8, 95u8,
                244u8, 28u8, 126u8, 172u8, 183u8, 99u8, 112u8, 77u8, 80u8, 248u8, 244u8,
                198u8, 234u8, 25u8, 241u8, 24u8, 20u8, 227u8, 188u8, 28u8, 203u8,
            ],
            [
                123u8, 27u8, 207u8, 28u8, 207u8, 144u8, 26u8, 17u8, 88u8, 154u8, 255u8,
                245u8, 80u8, 77u8, 89u8, 253u8, 10u8, 83u8, 120u8, 14u8, 237u8, 42u8,
                149u8, 42u8, 218u8, 222u8, 3u8, 72u8, 152u8, 81u8, 57u8, 224u8,
            ],
            [
                216u8, 169u8, 92u8, 160u8, 94u8, 154u8, 38u8, 86u8, 254u8, 33u8, 216u8,
                54u8, 50u8, 157u8, 156u8, 215u8, 120u8, 48u8, 231u8, 254u8, 247u8, 172u8,
                183u8, 192u8, 253u8, 59u8, 245u8, 66u8, 30u8, 167u8, 173u8, 154u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for VotingEvents {
        const NAME: &'static str = "VotingEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<ProposalCreated as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ProposalCreated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ProposalCreated)
                }
                Some(<ProposalExecuted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ProposalExecuted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ProposalExecuted)
                }
                Some(<VoteCast as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <VoteCast as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::VoteCast)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for VotingEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ProposalCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ProposalExecuted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::VoteCast(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ProposalCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ProposalExecuted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::VoteCast(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Voting`](self) contract instance.

See the [wrapper's documentation](`VotingInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> VotingInstance<T, P, N> {
        VotingInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<VotingInstance<T, P, N>>,
    > {
        VotingInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        VotingInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Voting`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Voting`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct VotingInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for VotingInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("VotingInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > VotingInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Voting`](self) contract instance.

See the [wrapper's documentation](`VotingInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<VotingInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> VotingInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> VotingInstance<T, P, N> {
            VotingInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > VotingInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`castVote`] function.
        pub fn castVote(
            &self,
            proposalId: alloy::sol_types::private::FixedBytes<32>,
            choice: u8,
        ) -> alloy_contract::SolCallBuilder<T, &P, castVoteCall, N> {
            self.call_builder(&castVoteCall { proposalId, choice })
        }
        ///Creates a new call builder for the [`createProposal`] function.
        pub fn createProposal(
            &self,
            deadline: alloy::sol_types::private::primitives::aliases::U256,
            threshold: alloy::sol_types::private::primitives::aliases::U256,
            voters: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::SolCallBuilder<T, &P, createProposalCall, N> {
            self.call_builder(
                &createProposalCall {
                    deadline,
                    threshold,
                    voters,
                },
            )
        }
        ///Creates a new call builder for the [`execute`] function.
        pub fn execute(
            &self,
            proposalId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeCall, N> {
            self.call_builder(&executeCall { proposalId })
        }
        ///Creates a new call builder for the [`getProposalId`] function.
        pub fn getProposalId(
            &self,
            deadline: alloy::sol_types::private::primitives::aliases::U256,
            proposer: alloy::sol_types::private::Address,
            voters: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getProposalIdCall, N> {
            self.call_builder(
                &getProposalIdCall {
                    deadline,
                    proposer,
                    voters,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > VotingInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ProposalCreated`] event.
        pub fn ProposalCreated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ProposalCreated, N> {
            self.event_filter::<ProposalCreated>()
        }
        ///Creates a new event filter for the [`ProposalExecuted`] event.
        pub fn ProposalExecuted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ProposalExecuted, N> {
            self.event_filter::<ProposalExecuted>()
        }
        ///Creates a new event filter for the [`VoteCast`] event.
        pub fn VoteCast_filter(&self) -> alloy_contract::Event<T, &P, VoteCast, N> {
            self.event_filter::<VoteCast>()
        }
    }
}
