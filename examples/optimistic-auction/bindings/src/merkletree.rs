/**

Generated by the following Solidity interface...
```solidity
interface MerkleTree {
    struct MultiProof {
        bytes32[] path;
        bool[] flags;
    }
    struct Proof {
        bytes32[] path;
    }

    error MerkleProofInvalidMultiproof();

    function hashLeaf(bytes memory prefix, bytes32 leaf) external pure returns (bytes32);
    function verify(bytes32 root, bytes32 leaf, Proof memory proof) external pure returns (bool);
    function verifyMulti(bytes32 root, bytes32[] memory leaves, MultiProof memory proof) external pure returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "hashLeaf",
    "inputs": [
      {
        "name": "prefix",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "leaf",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "verify",
    "inputs": [
      {
        "name": "root",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "leaf",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "proof",
        "type": "tuple",
        "internalType": "struct MerkleTree.Proof",
        "components": [
          {
            "name": "path",
            "type": "bytes32[]",
            "internalType": "bytes32[]"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "verifyMulti",
    "inputs": [
      {
        "name": "root",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "leaves",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      },
      {
        "name": "proof",
        "type": "tuple",
        "internalType": "struct MerkleTree.MultiProof",
        "components": [
          {
            "name": "path",
            "type": "bytes32[]",
            "internalType": "bytes32[]"
          },
          {
            "name": "flags",
            "type": "bool[]",
            "internalType": "bool[]"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "error",
    "name": "MerkleProofInvalidMultiproof",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MerkleTree {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x610c5c610052600b82828239805160001a6073146045577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063976ec70c14610050578063c3a4b51e14610080578063fad6e488146100b0575b600080fd5b61006a60048036038101906100659190610807565b6100e0565b60405161007791906108a1565b60405180910390f35b61009a60048036038101906100959190610914565b6100ff565b6040516100a791906108a1565b60405180910390f35b6100ca60048036038101906100c59190610a38565b610119565b6040516100d79190610aa3565b60405180910390f35b60006100f682600001518360200151868661014c565b90509392505050565b600061011082600001518585610165565b90509392505050565b6000828260405160200161012e929190610b50565b60405160208183030381529060405280519060200120905092915050565b60008261015a86868561017c565b149050949350505050565b6000826101728584610445565b1490509392505050565b600080825190506000845190506001816101969190610bb1565b8651836101a39190610bb1565b146101da576040517f3514049200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008167ffffffffffffffff8111156101f6576101f5610537565b5b6040519080825280602002602001820160405280156102245781602001602082028036833780820191505090505b5090506000806000805b8581101561037857600087851061026b5785848061024b90610be5565b95508151811061025e5761025d610c2d565b5b6020026020010151610293565b89858061027790610be5565b96508151811061028a57610289610c2d565b5b60200260200101515b905060008b83815181106102aa576102a9610c2d565b5b60200260200101516102e2578c84806102c290610be5565b9550815181106102d5576102d4610c2d565b5b602002602001015161033e565b888610610315578685806102f590610be5565b96508151811061030857610307610c2d565b5b602002602001015161033d565b8a868061032190610be5565b97508151811061033457610333610c2d565b5b60200260200101515b5b905061034a8282610495565b87848151811061035d5761035c610c2d565b5b6020026020010181815250505050808060010191505061022e565b5060008511156103e757895181146103bc576040517f3514049200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8360018603815181106103d2576103d1610c2d565b5b6020026020010151965050505050505061043e565b6000861115610419578760008151811061040457610403610c2d565b5b6020026020010151965050505050505061043e565b8960008151811061042d5761042c610c2d565b5b602002602001015196505050505050505b9392505050565b60008082905060005b845181101561048a5761047b8286838151811061046e5761046d610c2d565b5b6020026020010151610495565b9150808060010191505061044e565b508091505092915050565b60008183106104ad576104a882846104c0565b6104b8565b6104b783836104c0565b5b905092915050565b600082600052816020526040600020905092915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6104fe816104eb565b811461050957600080fd5b50565b60008135905061051b816104f5565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61056f82610526565b810181811067ffffffffffffffff8211171561058e5761058d610537565b5b80604052505050565b60006105a16104d7565b90506105ad8282610566565b919050565b600067ffffffffffffffff8211156105cd576105cc610537565b5b602082029050602081019050919050565b600080fd5b60006105f66105f1846105b2565b610597565b90508083825260208201905060208402830185811115610619576106186105de565b5b835b81811015610642578061062e888261050c565b84526020840193505060208101905061061b565b5050509392505050565b600082601f83011261066157610660610521565b5b81356106718482602086016105e3565b91505092915050565b600080fd5b600080fd5b600067ffffffffffffffff82111561069f5761069e610537565b5b602082029050602081019050919050565b60008115159050919050565b6106c5816106b0565b81146106d057600080fd5b50565b6000813590506106e2816106bc565b92915050565b60006106fb6106f684610684565b610597565b9050808382526020820190506020840283018581111561071e5761071d6105de565b5b835b81811015610747578061073388826106d3565b845260208401935050602081019050610720565b5050509392505050565b600082601f83011261076657610765610521565b5b81356107768482602086016106e8565b91505092915050565b6000604082840312156107955761079461067a565b5b61079f6040610597565b9050600082013567ffffffffffffffff8111156107bf576107be61067f565b5b6107cb8482850161064c565b600083015250602082013567ffffffffffffffff8111156107ef576107ee61067f565b5b6107fb84828501610751565b60208301525092915050565b6000806000606084860312156108205761081f6104e1565b5b600061082e8682870161050c565b935050602084013567ffffffffffffffff81111561084f5761084e6104e6565b5b61085b8682870161064c565b925050604084013567ffffffffffffffff81111561087c5761087b6104e6565b5b6108888682870161077f565b9150509250925092565b61089b816106b0565b82525050565b60006020820190506108b66000830184610892565b92915050565b6000602082840312156108d2576108d161067a565b5b6108dc6020610597565b9050600082013567ffffffffffffffff8111156108fc576108fb61067f565b5b6109088482850161064c565b60008301525092915050565b60008060006060848603121561092d5761092c6104e1565b5b600061093b8682870161050c565b935050602061094c8682870161050c565b925050604084013567ffffffffffffffff81111561096d5761096c6104e6565b5b610979868287016108bc565b9150509250925092565b600080fd5b600067ffffffffffffffff8211156109a3576109a2610537565b5b6109ac82610526565b9050602081019050919050565b82818337600083830152505050565b60006109db6109d684610988565b610597565b9050828152602081018484840111156109f7576109f6610983565b5b610a028482856109b9565b509392505050565b600082601f830112610a1f57610a1e610521565b5b8135610a2f8482602086016109c8565b91505092915050565b60008060408385031215610a4f57610a4e6104e1565b5b600083013567ffffffffffffffff811115610a6d57610a6c6104e6565b5b610a7985828601610a0a565b9250506020610a8a8582860161050c565b9150509250929050565b610a9d816104eb565b82525050565b6000602082019050610ab86000830184610a94565b92915050565b600081519050919050565b600081905092915050565b60005b83811015610af2578082015181840152602081019050610ad7565b60008484015250505050565b6000610b0982610abe565b610b138185610ac9565b9350610b23818560208601610ad4565b80840191505092915050565b6000819050919050565b610b4a610b45826104eb565b610b2f565b82525050565b6000610b5c8285610afe565b9150610b688284610b39565b6020820191508190509392505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bbc82610b78565b9150610bc783610b78565b9250828201905080821115610bdf57610bde610b82565b5b92915050565b6000610bf082610b78565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c2257610c21610b82565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x0C\\a\0R`\x0B\x82\x82\x829\x80Q`\0\x1A`s\x14`EW\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\0`\x04R`$`\0\xFD[0`\0R`s\x81S\x82\x81\xF3\xFEs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\0KW`\x005`\xE0\x1C\x80c\x97n\xC7\x0C\x14a\0PW\x80c\xC3\xA4\xB5\x1E\x14a\0\x80W\x80c\xFA\xD6\xE4\x88\x14a\0\xB0W[`\0\x80\xFD[a\0j`\x04\x806\x03\x81\x01\x90a\0e\x91\x90a\x08\x07V[a\0\xE0V[`@Qa\0w\x91\x90a\x08\xA1V[`@Q\x80\x91\x03\x90\xF3[a\0\x9A`\x04\x806\x03\x81\x01\x90a\0\x95\x91\x90a\t\x14V[a\0\xFFV[`@Qa\0\xA7\x91\x90a\x08\xA1V[`@Q\x80\x91\x03\x90\xF3[a\0\xCA`\x04\x806\x03\x81\x01\x90a\0\xC5\x91\x90a\n8V[a\x01\x19V[`@Qa\0\xD7\x91\x90a\n\xA3V[`@Q\x80\x91\x03\x90\xF3[`\0a\0\xF6\x82`\0\x01Q\x83` \x01Q\x86\x86a\x01LV[\x90P\x93\x92PPPV[`\0a\x01\x10\x82`\0\x01Q\x85\x85a\x01eV[\x90P\x93\x92PPPV[`\0\x82\x82`@Q` \x01a\x01.\x92\x91\x90a\x0BPV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x92\x91PPV[`\0\x82a\x01Z\x86\x86\x85a\x01|V[\x14\x90P\x94\x93PPPPV[`\0\x82a\x01r\x85\x84a\x04EV[\x14\x90P\x93\x92PPPV[`\0\x80\x82Q\x90P`\0\x84Q\x90P`\x01\x81a\x01\x96\x91\x90a\x0B\xB1V[\x86Q\x83a\x01\xA3\x91\x90a\x0B\xB1V[\x14a\x01\xDAW`@Q\x7F5\x14\x04\x92\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\0\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\xF6Wa\x01\xF5a\x057V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x02$W\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P`\0\x80`\0\x80[\x85\x81\x10\x15a\x03xW`\0\x87\x85\x10a\x02kW\x85\x84\x80a\x02K\x90a\x0B\xE5V[\x95P\x81Q\x81\x10a\x02^Wa\x02]a\x0C-V[[` \x02` \x01\x01Qa\x02\x93V[\x89\x85\x80a\x02w\x90a\x0B\xE5V[\x96P\x81Q\x81\x10a\x02\x8AWa\x02\x89a\x0C-V[[` \x02` \x01\x01Q[\x90P`\0\x8B\x83\x81Q\x81\x10a\x02\xAAWa\x02\xA9a\x0C-V[[` \x02` \x01\x01Qa\x02\xE2W\x8C\x84\x80a\x02\xC2\x90a\x0B\xE5V[\x95P\x81Q\x81\x10a\x02\xD5Wa\x02\xD4a\x0C-V[[` \x02` \x01\x01Qa\x03>V[\x88\x86\x10a\x03\x15W\x86\x85\x80a\x02\xF5\x90a\x0B\xE5V[\x96P\x81Q\x81\x10a\x03\x08Wa\x03\x07a\x0C-V[[` \x02` \x01\x01Qa\x03=V[\x8A\x86\x80a\x03!\x90a\x0B\xE5V[\x97P\x81Q\x81\x10a\x034Wa\x033a\x0C-V[[` \x02` \x01\x01Q[[\x90Pa\x03J\x82\x82a\x04\x95V[\x87\x84\x81Q\x81\x10a\x03]Wa\x03\\a\x0C-V[[` \x02` \x01\x01\x81\x81RPPPP\x80\x80`\x01\x01\x91PPa\x02.V[P`\0\x85\x11\x15a\x03\xE7W\x89Q\x81\x14a\x03\xBCW`@Q\x7F5\x14\x04\x92\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x83`\x01\x86\x03\x81Q\x81\x10a\x03\xD2Wa\x03\xD1a\x0C-V[[` \x02` \x01\x01Q\x96PPPPPPPa\x04>V[`\0\x86\x11\x15a\x04\x19W\x87`\0\x81Q\x81\x10a\x04\x04Wa\x04\x03a\x0C-V[[` \x02` \x01\x01Q\x96PPPPPPPa\x04>V[\x89`\0\x81Q\x81\x10a\x04-Wa\x04,a\x0C-V[[` \x02` \x01\x01Q\x96PPPPPPP[\x93\x92PPPV[`\0\x80\x82\x90P`\0[\x84Q\x81\x10\x15a\x04\x8AWa\x04{\x82\x86\x83\x81Q\x81\x10a\x04nWa\x04ma\x0C-V[[` \x02` \x01\x01Qa\x04\x95V[\x91P\x80\x80`\x01\x01\x91PPa\x04NV[P\x80\x91PP\x92\x91PPV[`\0\x81\x83\x10a\x04\xADWa\x04\xA8\x82\x84a\x04\xC0V[a\x04\xB8V[a\x04\xB7\x83\x83a\x04\xC0V[[\x90P\x92\x91PPV[`\0\x82`\0R\x81` R`@`\0 \x90P\x92\x91PPV[`\0`@Q\x90P\x90V[`\0\x80\xFD[`\0\x80\xFD[`\0\x81\x90P\x91\x90PV[a\x04\xFE\x81a\x04\xEBV[\x81\x14a\x05\tW`\0\x80\xFD[PV[`\0\x815\x90Pa\x05\x1B\x81a\x04\xF5V[\x92\x91PPV[`\0\x80\xFD[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[a\x05o\x82a\x05&V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x05\x8EWa\x05\x8Da\x057V[[\x80`@RPPPV[`\0a\x05\xA1a\x04\xD7V[\x90Pa\x05\xAD\x82\x82a\x05fV[\x91\x90PV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x05\xCDWa\x05\xCCa\x057V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0\x80\xFD[`\0a\x05\xF6a\x05\xF1\x84a\x05\xB2V[a\x05\x97V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x06\x19Wa\x06\x18a\x05\xDEV[[\x83[\x81\x81\x10\x15a\x06BW\x80a\x06.\x88\x82a\x05\x0CV[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x06\x1BV[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x06aWa\x06`a\x05!V[[\x815a\x06q\x84\x82` \x86\x01a\x05\xE3V[\x91PP\x92\x91PPV[`\0\x80\xFD[`\0\x80\xFD[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x06\x9FWa\x06\x9Ea\x057V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0\x81\x15\x15\x90P\x91\x90PV[a\x06\xC5\x81a\x06\xB0V[\x81\x14a\x06\xD0W`\0\x80\xFD[PV[`\0\x815\x90Pa\x06\xE2\x81a\x06\xBCV[\x92\x91PPV[`\0a\x06\xFBa\x06\xF6\x84a\x06\x84V[a\x05\x97V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x07\x1EWa\x07\x1Da\x05\xDEV[[\x83[\x81\x81\x10\x15a\x07GW\x80a\x073\x88\x82a\x06\xD3V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x07 V[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x07fWa\x07ea\x05!V[[\x815a\x07v\x84\x82` \x86\x01a\x06\xE8V[\x91PP\x92\x91PPV[`\0`@\x82\x84\x03\x12\x15a\x07\x95Wa\x07\x94a\x06zV[[a\x07\x9F`@a\x05\x97V[\x90P`\0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\xBFWa\x07\xBEa\x06\x7FV[[a\x07\xCB\x84\x82\x85\x01a\x06LV[`\0\x83\x01RP` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\xEFWa\x07\xEEa\x06\x7FV[[a\x07\xFB\x84\x82\x85\x01a\x07QV[` \x83\x01RP\x92\x91PPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x08 Wa\x08\x1Fa\x04\xE1V[[`\0a\x08.\x86\x82\x87\x01a\x05\x0CV[\x93PP` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08OWa\x08Na\x04\xE6V[[a\x08[\x86\x82\x87\x01a\x06LV[\x92PP`@\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08|Wa\x08{a\x04\xE6V[[a\x08\x88\x86\x82\x87\x01a\x07\x7FV[\x91PP\x92P\x92P\x92V[a\x08\x9B\x81a\x06\xB0V[\x82RPPV[`\0` \x82\x01\x90Pa\x08\xB6`\0\x83\x01\x84a\x08\x92V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x08\xD2Wa\x08\xD1a\x06zV[[a\x08\xDC` a\x05\x97V[\x90P`\0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08\xFCWa\x08\xFBa\x06\x7FV[[a\t\x08\x84\x82\x85\x01a\x06LV[`\0\x83\x01RP\x92\x91PPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\t-Wa\t,a\x04\xE1V[[`\0a\t;\x86\x82\x87\x01a\x05\x0CV[\x93PP` a\tL\x86\x82\x87\x01a\x05\x0CV[\x92PP`@\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\tmWa\tla\x04\xE6V[[a\ty\x86\x82\x87\x01a\x08\xBCV[\x91PP\x92P\x92P\x92V[`\0\x80\xFD[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\t\xA3Wa\t\xA2a\x057V[[a\t\xAC\x82a\x05&V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837`\0\x83\x83\x01RPPPV[`\0a\t\xDBa\t\xD6\x84a\t\x88V[a\x05\x97V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\t\xF7Wa\t\xF6a\t\x83V[[a\n\x02\x84\x82\x85a\t\xB9V[P\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\n\x1FWa\n\x1Ea\x05!V[[\x815a\n/\x84\x82` \x86\x01a\t\xC8V[\x91PP\x92\x91PPV[`\0\x80`@\x83\x85\x03\x12\x15a\nOWa\nNa\x04\xE1V[[`\0\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\nmWa\nla\x04\xE6V[[a\ny\x85\x82\x86\x01a\n\nV[\x92PP` a\n\x8A\x85\x82\x86\x01a\x05\x0CV[\x91PP\x92P\x92\x90PV[a\n\x9D\x81a\x04\xEBV[\x82RPPV[`\0` \x82\x01\x90Pa\n\xB8`\0\x83\x01\x84a\n\x94V[\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\n\xF2W\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\n\xD7V[`\0\x84\x84\x01RPPPPV[`\0a\x0B\t\x82a\n\xBEV[a\x0B\x13\x81\x85a\n\xC9V[\x93Pa\x0B#\x81\x85` \x86\x01a\n\xD4V[\x80\x84\x01\x91PP\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\x0BJa\x0BE\x82a\x04\xEBV[a\x0B/V[\x82RPPV[`\0a\x0B\\\x82\x85a\n\xFEV[\x91Pa\x0Bh\x82\x84a\x0B9V[` \x82\x01\x91P\x81\x90P\x93\x92PPPV[`\0\x81\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[`\0a\x0B\xBC\x82a\x0BxV[\x91Pa\x0B\xC7\x83a\x0BxV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x0B\xDFWa\x0B\xDEa\x0B\x82V[[\x92\x91PPV[`\0a\x0B\xF0\x82a\x0BxV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a\x0C\"Wa\x0C!a\x0B\x82V[[`\x01\x82\x01\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063976ec70c14610050578063c3a4b51e14610080578063fad6e488146100b0575b600080fd5b61006a60048036038101906100659190610807565b6100e0565b60405161007791906108a1565b60405180910390f35b61009a60048036038101906100959190610914565b6100ff565b6040516100a791906108a1565b60405180910390f35b6100ca60048036038101906100c59190610a38565b610119565b6040516100d79190610aa3565b60405180910390f35b60006100f682600001518360200151868661014c565b90509392505050565b600061011082600001518585610165565b90509392505050565b6000828260405160200161012e929190610b50565b60405160208183030381529060405280519060200120905092915050565b60008261015a86868561017c565b149050949350505050565b6000826101728584610445565b1490509392505050565b600080825190506000845190506001816101969190610bb1565b8651836101a39190610bb1565b146101da576040517f3514049200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008167ffffffffffffffff8111156101f6576101f5610537565b5b6040519080825280602002602001820160405280156102245781602001602082028036833780820191505090505b5090506000806000805b8581101561037857600087851061026b5785848061024b90610be5565b95508151811061025e5761025d610c2d565b5b6020026020010151610293565b89858061027790610be5565b96508151811061028a57610289610c2d565b5b60200260200101515b905060008b83815181106102aa576102a9610c2d565b5b60200260200101516102e2578c84806102c290610be5565b9550815181106102d5576102d4610c2d565b5b602002602001015161033e565b888610610315578685806102f590610be5565b96508151811061030857610307610c2d565b5b602002602001015161033d565b8a868061032190610be5565b97508151811061033457610333610c2d565b5b60200260200101515b5b905061034a8282610495565b87848151811061035d5761035c610c2d565b5b6020026020010181815250505050808060010191505061022e565b5060008511156103e757895181146103bc576040517f3514049200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8360018603815181106103d2576103d1610c2d565b5b6020026020010151965050505050505061043e565b6000861115610419578760008151811061040457610403610c2d565b5b6020026020010151965050505050505061043e565b8960008151811061042d5761042c610c2d565b5b602002602001015196505050505050505b9392505050565b60008082905060005b845181101561048a5761047b8286838151811061046e5761046d610c2d565b5b6020026020010151610495565b9150808060010191505061044e565b508091505092915050565b60008183106104ad576104a882846104c0565b6104b8565b6104b783836104c0565b5b905092915050565b600082600052816020526040600020905092915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6104fe816104eb565b811461050957600080fd5b50565b60008135905061051b816104f5565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61056f82610526565b810181811067ffffffffffffffff8211171561058e5761058d610537565b5b80604052505050565b60006105a16104d7565b90506105ad8282610566565b919050565b600067ffffffffffffffff8211156105cd576105cc610537565b5b602082029050602081019050919050565b600080fd5b60006105f66105f1846105b2565b610597565b90508083825260208201905060208402830185811115610619576106186105de565b5b835b81811015610642578061062e888261050c565b84526020840193505060208101905061061b565b5050509392505050565b600082601f83011261066157610660610521565b5b81356106718482602086016105e3565b91505092915050565b600080fd5b600080fd5b600067ffffffffffffffff82111561069f5761069e610537565b5b602082029050602081019050919050565b60008115159050919050565b6106c5816106b0565b81146106d057600080fd5b50565b6000813590506106e2816106bc565b92915050565b60006106fb6106f684610684565b610597565b9050808382526020820190506020840283018581111561071e5761071d6105de565b5b835b81811015610747578061073388826106d3565b845260208401935050602081019050610720565b5050509392505050565b600082601f83011261076657610765610521565b5b81356107768482602086016106e8565b91505092915050565b6000604082840312156107955761079461067a565b5b61079f6040610597565b9050600082013567ffffffffffffffff8111156107bf576107be61067f565b5b6107cb8482850161064c565b600083015250602082013567ffffffffffffffff8111156107ef576107ee61067f565b5b6107fb84828501610751565b60208301525092915050565b6000806000606084860312156108205761081f6104e1565b5b600061082e8682870161050c565b935050602084013567ffffffffffffffff81111561084f5761084e6104e6565b5b61085b8682870161064c565b925050604084013567ffffffffffffffff81111561087c5761087b6104e6565b5b6108888682870161077f565b9150509250925092565b61089b816106b0565b82525050565b60006020820190506108b66000830184610892565b92915050565b6000602082840312156108d2576108d161067a565b5b6108dc6020610597565b9050600082013567ffffffffffffffff8111156108fc576108fb61067f565b5b6109088482850161064c565b60008301525092915050565b60008060006060848603121561092d5761092c6104e1565b5b600061093b8682870161050c565b935050602061094c8682870161050c565b925050604084013567ffffffffffffffff81111561096d5761096c6104e6565b5b610979868287016108bc565b9150509250925092565b600080fd5b600067ffffffffffffffff8211156109a3576109a2610537565b5b6109ac82610526565b9050602081019050919050565b82818337600083830152505050565b60006109db6109d684610988565b610597565b9050828152602081018484840111156109f7576109f6610983565b5b610a028482856109b9565b509392505050565b600082601f830112610a1f57610a1e610521565b5b8135610a2f8482602086016109c8565b91505092915050565b60008060408385031215610a4f57610a4e6104e1565b5b600083013567ffffffffffffffff811115610a6d57610a6c6104e6565b5b610a7985828601610a0a565b9250506020610a8a8582860161050c565b9150509250929050565b610a9d816104eb565b82525050565b6000602082019050610ab86000830184610a94565b92915050565b600081519050919050565b600081905092915050565b60005b83811015610af2578082015181840152602081019050610ad7565b60008484015250505050565b6000610b0982610abe565b610b138185610ac9565b9350610b23818560208601610ad4565b80840191505092915050565b6000819050919050565b610b4a610b45826104eb565b610b2f565b82525050565b6000610b5c8285610afe565b9150610b688284610b39565b6020820191508190509392505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bbc82610b78565b9150610bc783610b78565b9250828201905080821115610bdf57610bde610b82565b5b92915050565b6000610bf082610b78565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c2257610c21610b82565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\0KW`\x005`\xE0\x1C\x80c\x97n\xC7\x0C\x14a\0PW\x80c\xC3\xA4\xB5\x1E\x14a\0\x80W\x80c\xFA\xD6\xE4\x88\x14a\0\xB0W[`\0\x80\xFD[a\0j`\x04\x806\x03\x81\x01\x90a\0e\x91\x90a\x08\x07V[a\0\xE0V[`@Qa\0w\x91\x90a\x08\xA1V[`@Q\x80\x91\x03\x90\xF3[a\0\x9A`\x04\x806\x03\x81\x01\x90a\0\x95\x91\x90a\t\x14V[a\0\xFFV[`@Qa\0\xA7\x91\x90a\x08\xA1V[`@Q\x80\x91\x03\x90\xF3[a\0\xCA`\x04\x806\x03\x81\x01\x90a\0\xC5\x91\x90a\n8V[a\x01\x19V[`@Qa\0\xD7\x91\x90a\n\xA3V[`@Q\x80\x91\x03\x90\xF3[`\0a\0\xF6\x82`\0\x01Q\x83` \x01Q\x86\x86a\x01LV[\x90P\x93\x92PPPV[`\0a\x01\x10\x82`\0\x01Q\x85\x85a\x01eV[\x90P\x93\x92PPPV[`\0\x82\x82`@Q` \x01a\x01.\x92\x91\x90a\x0BPV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x92\x91PPV[`\0\x82a\x01Z\x86\x86\x85a\x01|V[\x14\x90P\x94\x93PPPPV[`\0\x82a\x01r\x85\x84a\x04EV[\x14\x90P\x93\x92PPPV[`\0\x80\x82Q\x90P`\0\x84Q\x90P`\x01\x81a\x01\x96\x91\x90a\x0B\xB1V[\x86Q\x83a\x01\xA3\x91\x90a\x0B\xB1V[\x14a\x01\xDAW`@Q\x7F5\x14\x04\x92\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\0\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\xF6Wa\x01\xF5a\x057V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x02$W\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P`\0\x80`\0\x80[\x85\x81\x10\x15a\x03xW`\0\x87\x85\x10a\x02kW\x85\x84\x80a\x02K\x90a\x0B\xE5V[\x95P\x81Q\x81\x10a\x02^Wa\x02]a\x0C-V[[` \x02` \x01\x01Qa\x02\x93V[\x89\x85\x80a\x02w\x90a\x0B\xE5V[\x96P\x81Q\x81\x10a\x02\x8AWa\x02\x89a\x0C-V[[` \x02` \x01\x01Q[\x90P`\0\x8B\x83\x81Q\x81\x10a\x02\xAAWa\x02\xA9a\x0C-V[[` \x02` \x01\x01Qa\x02\xE2W\x8C\x84\x80a\x02\xC2\x90a\x0B\xE5V[\x95P\x81Q\x81\x10a\x02\xD5Wa\x02\xD4a\x0C-V[[` \x02` \x01\x01Qa\x03>V[\x88\x86\x10a\x03\x15W\x86\x85\x80a\x02\xF5\x90a\x0B\xE5V[\x96P\x81Q\x81\x10a\x03\x08Wa\x03\x07a\x0C-V[[` \x02` \x01\x01Qa\x03=V[\x8A\x86\x80a\x03!\x90a\x0B\xE5V[\x97P\x81Q\x81\x10a\x034Wa\x033a\x0C-V[[` \x02` \x01\x01Q[[\x90Pa\x03J\x82\x82a\x04\x95V[\x87\x84\x81Q\x81\x10a\x03]Wa\x03\\a\x0C-V[[` \x02` \x01\x01\x81\x81RPPPP\x80\x80`\x01\x01\x91PPa\x02.V[P`\0\x85\x11\x15a\x03\xE7W\x89Q\x81\x14a\x03\xBCW`@Q\x7F5\x14\x04\x92\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x83`\x01\x86\x03\x81Q\x81\x10a\x03\xD2Wa\x03\xD1a\x0C-V[[` \x02` \x01\x01Q\x96PPPPPPPa\x04>V[`\0\x86\x11\x15a\x04\x19W\x87`\0\x81Q\x81\x10a\x04\x04Wa\x04\x03a\x0C-V[[` \x02` \x01\x01Q\x96PPPPPPPa\x04>V[\x89`\0\x81Q\x81\x10a\x04-Wa\x04,a\x0C-V[[` \x02` \x01\x01Q\x96PPPPPPP[\x93\x92PPPV[`\0\x80\x82\x90P`\0[\x84Q\x81\x10\x15a\x04\x8AWa\x04{\x82\x86\x83\x81Q\x81\x10a\x04nWa\x04ma\x0C-V[[` \x02` \x01\x01Qa\x04\x95V[\x91P\x80\x80`\x01\x01\x91PPa\x04NV[P\x80\x91PP\x92\x91PPV[`\0\x81\x83\x10a\x04\xADWa\x04\xA8\x82\x84a\x04\xC0V[a\x04\xB8V[a\x04\xB7\x83\x83a\x04\xC0V[[\x90P\x92\x91PPV[`\0\x82`\0R\x81` R`@`\0 \x90P\x92\x91PPV[`\0`@Q\x90P\x90V[`\0\x80\xFD[`\0\x80\xFD[`\0\x81\x90P\x91\x90PV[a\x04\xFE\x81a\x04\xEBV[\x81\x14a\x05\tW`\0\x80\xFD[PV[`\0\x815\x90Pa\x05\x1B\x81a\x04\xF5V[\x92\x91PPV[`\0\x80\xFD[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`A`\x04R`$`\0\xFD[a\x05o\x82a\x05&V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x05\x8EWa\x05\x8Da\x057V[[\x80`@RPPPV[`\0a\x05\xA1a\x04\xD7V[\x90Pa\x05\xAD\x82\x82a\x05fV[\x91\x90PV[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x05\xCDWa\x05\xCCa\x057V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0\x80\xFD[`\0a\x05\xF6a\x05\xF1\x84a\x05\xB2V[a\x05\x97V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x06\x19Wa\x06\x18a\x05\xDEV[[\x83[\x81\x81\x10\x15a\x06BW\x80a\x06.\x88\x82a\x05\x0CV[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x06\x1BV[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x06aWa\x06`a\x05!V[[\x815a\x06q\x84\x82` \x86\x01a\x05\xE3V[\x91PP\x92\x91PPV[`\0\x80\xFD[`\0\x80\xFD[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x06\x9FWa\x06\x9Ea\x057V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[`\0\x81\x15\x15\x90P\x91\x90PV[a\x06\xC5\x81a\x06\xB0V[\x81\x14a\x06\xD0W`\0\x80\xFD[PV[`\0\x815\x90Pa\x06\xE2\x81a\x06\xBCV[\x92\x91PPV[`\0a\x06\xFBa\x06\xF6\x84a\x06\x84V[a\x05\x97V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x07\x1EWa\x07\x1Da\x05\xDEV[[\x83[\x81\x81\x10\x15a\x07GW\x80a\x073\x88\x82a\x06\xD3V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x07 V[PPP\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\x07fWa\x07ea\x05!V[[\x815a\x07v\x84\x82` \x86\x01a\x06\xE8V[\x91PP\x92\x91PPV[`\0`@\x82\x84\x03\x12\x15a\x07\x95Wa\x07\x94a\x06zV[[a\x07\x9F`@a\x05\x97V[\x90P`\0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\xBFWa\x07\xBEa\x06\x7FV[[a\x07\xCB\x84\x82\x85\x01a\x06LV[`\0\x83\x01RP` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\xEFWa\x07\xEEa\x06\x7FV[[a\x07\xFB\x84\x82\x85\x01a\x07QV[` \x83\x01RP\x92\x91PPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x08 Wa\x08\x1Fa\x04\xE1V[[`\0a\x08.\x86\x82\x87\x01a\x05\x0CV[\x93PP` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08OWa\x08Na\x04\xE6V[[a\x08[\x86\x82\x87\x01a\x06LV[\x92PP`@\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08|Wa\x08{a\x04\xE6V[[a\x08\x88\x86\x82\x87\x01a\x07\x7FV[\x91PP\x92P\x92P\x92V[a\x08\x9B\x81a\x06\xB0V[\x82RPPV[`\0` \x82\x01\x90Pa\x08\xB6`\0\x83\x01\x84a\x08\x92V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x08\xD2Wa\x08\xD1a\x06zV[[a\x08\xDC` a\x05\x97V[\x90P`\0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08\xFCWa\x08\xFBa\x06\x7FV[[a\t\x08\x84\x82\x85\x01a\x06LV[`\0\x83\x01RP\x92\x91PPV[`\0\x80`\0``\x84\x86\x03\x12\x15a\t-Wa\t,a\x04\xE1V[[`\0a\t;\x86\x82\x87\x01a\x05\x0CV[\x93PP` a\tL\x86\x82\x87\x01a\x05\x0CV[\x92PP`@\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\tmWa\tla\x04\xE6V[[a\ty\x86\x82\x87\x01a\x08\xBCV[\x91PP\x92P\x92P\x92V[`\0\x80\xFD[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\t\xA3Wa\t\xA2a\x057V[[a\t\xAC\x82a\x05&V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837`\0\x83\x83\x01RPPPV[`\0a\t\xDBa\t\xD6\x84a\t\x88V[a\x05\x97V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\t\xF7Wa\t\xF6a\t\x83V[[a\n\x02\x84\x82\x85a\t\xB9V[P\x93\x92PPPV[`\0\x82`\x1F\x83\x01\x12a\n\x1FWa\n\x1Ea\x05!V[[\x815a\n/\x84\x82` \x86\x01a\t\xC8V[\x91PP\x92\x91PPV[`\0\x80`@\x83\x85\x03\x12\x15a\nOWa\nNa\x04\xE1V[[`\0\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\nmWa\nla\x04\xE6V[[a\ny\x85\x82\x86\x01a\n\nV[\x92PP` a\n\x8A\x85\x82\x86\x01a\x05\x0CV[\x91PP\x92P\x92\x90PV[a\n\x9D\x81a\x04\xEBV[\x82RPPV[`\0` \x82\x01\x90Pa\n\xB8`\0\x83\x01\x84a\n\x94V[\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\n\xF2W\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\n\xD7V[`\0\x84\x84\x01RPPPPV[`\0a\x0B\t\x82a\n\xBEV[a\x0B\x13\x81\x85a\n\xC9V[\x93Pa\x0B#\x81\x85` \x86\x01a\n\xD4V[\x80\x84\x01\x91PP\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\x0BJa\x0BE\x82a\x04\xEBV[a\x0B/V[\x82RPPV[`\0a\x0B\\\x82\x85a\n\xFEV[\x91Pa\x0Bh\x82\x84a\x0B9V[` \x82\x01\x91P\x81\x90P\x93\x92PPPV[`\0\x81\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[`\0a\x0B\xBC\x82a\x0BxV[\x91Pa\x0B\xC7\x83a\x0BxV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x0B\xDFWa\x0B\xDEa\x0B\x82V[[\x92\x91PPV[`\0a\x0B\xF0\x82a\x0BxV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a\x0C\"Wa\x0C!a\x0B\x82V[[`\x01\x82\x01\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct MultiProof { bytes32[] path; bool[] flags; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MultiProof {
        #[allow(missing_docs)]
        pub path: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
        #[allow(missing_docs)]
        pub flags: alloy::sol_types::private::Vec<bool>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Array<
                alloy::sol_types::sol_data::FixedBytes<32>,
            >,
            alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bool>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<32>>,
            alloy::sol_types::private::Vec<bool>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MultiProof> for UnderlyingRustTuple<'_> {
            fn from(value: MultiProof) -> Self {
                (value.path, value.flags)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MultiProof {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    path: tuple.0,
                    flags: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for MultiProof {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for MultiProof {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::SolType>::tokenize(&self.path),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bool,
                    > as alloy_sol_types::SolType>::tokenize(&self.flags),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MultiProof {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for MultiProof {
            const NAME: &'static str = "MultiProof";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "MultiProof(bytes32[] path,bool[] flags)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.path)
                        .0,
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bool,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.flags)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MultiProof {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.path)
                    + <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bool,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.flags)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.path,
                    out,
                );
                <alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Bool,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.flags,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct Proof { bytes32[] path; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Proof {
        #[allow(missing_docs)]
        pub path: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Array<
                alloy::sol_types::sol_data::FixedBytes<32>,
            >,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<32>>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Proof> for UnderlyingRustTuple<'_> {
            fn from(value: Proof) -> Self {
                (value.path,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Proof {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { path: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Proof {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Proof {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::SolType>::tokenize(&self.path),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Proof {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Proof {
            const NAME: &'static str = "Proof";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed("Proof(bytes32[] path)")
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                <alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                > as alloy_sol_types::SolType>::eip712_data_word(&self.path)
                    .0
                    .to_vec()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Proof {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.path)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.path,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `MerkleProofInvalidMultiproof()` and selector `0x35140492`.
```solidity
error MerkleProofInvalidMultiproof();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MerkleProofInvalidMultiproof {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MerkleProofInvalidMultiproof>
        for UnderlyingRustTuple<'_> {
            fn from(value: MerkleProofInvalidMultiproof) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for MerkleProofInvalidMultiproof {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for MerkleProofInvalidMultiproof {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MerkleProofInvalidMultiproof()";
            const SELECTOR: [u8; 4] = [53u8, 20u8, 4u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `hashLeaf(bytes,bytes32)` and selector `0xfad6e488`.
```solidity
function hashLeaf(bytes memory prefix, bytes32 leaf) external pure returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hashLeafCall {
        #[allow(missing_docs)]
        pub prefix: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub leaf: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`hashLeaf(bytes,bytes32)`](hashLeafCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hashLeafReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hashLeafCall> for UnderlyingRustTuple<'_> {
                fn from(value: hashLeafCall) -> Self {
                    (value.prefix, value.leaf)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hashLeafCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        prefix: tuple.0,
                        leaf: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hashLeafReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hashLeafReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hashLeafReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hashLeafCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = hashLeafReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hashLeaf(bytes,bytes32)";
            const SELECTOR: [u8; 4] = [250u8, 214u8, 228u8, 136u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.prefix,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.leaf),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `verify(bytes32,bytes32,(bytes32[]))` and selector `0x71051354`.
```solidity
function verify(bytes32 root, bytes32 leaf, Proof memory proof) external pure returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyCall {
        #[allow(missing_docs)]
        pub root: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub leaf: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub proof: <Proof as alloy::sol_types::SolType>::RustType,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`verify(bytes32,bytes32,(bytes32[]))`](verifyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                Proof,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                <Proof as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyCall> for UnderlyingRustTuple<'_> {
                fn from(value: verifyCall) -> Self {
                    (value.root, value.leaf, value.proof)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        root: tuple.0,
                        leaf: tuple.1,
                        proof: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyReturn> for UnderlyingRustTuple<'_> {
                fn from(value: verifyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for verifyCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                Proof,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = verifyReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "verify(bytes32,bytes32,(bytes32[]))";
            const SELECTOR: [u8; 4] = [113u8, 5u8, 19u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.root),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.leaf),
                    <Proof as alloy_sol_types::SolType>::tokenize(&self.proof),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `verifyMulti(bytes32,bytes32[],(bytes32[],bool[]))` and selector `0x02918107`.
```solidity
function verifyMulti(bytes32 root, bytes32[] memory leaves, MultiProof memory proof) external pure returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyMultiCall {
        #[allow(missing_docs)]
        pub root: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub leaves: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
        #[allow(missing_docs)]
        pub proof: <MultiProof as alloy::sol_types::SolType>::RustType,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`verifyMulti(bytes32,bytes32[],(bytes32[],bool[]))`](verifyMultiCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyMultiReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
                MultiProof,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::FixedBytes<32>,
                >,
                <MultiProof as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyMultiCall> for UnderlyingRustTuple<'_> {
                fn from(value: verifyMultiCall) -> Self {
                    (value.root, value.leaves, value.proof)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifyMultiCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        root: tuple.0,
                        leaves: tuple.1,
                        proof: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyMultiReturn> for UnderlyingRustTuple<'_> {
                fn from(value: verifyMultiReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifyMultiReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for verifyMultiCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
                MultiProof,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = verifyMultiReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "verifyMulti(bytes32,bytes32[],(bytes32[],bool[]))";
            const SELECTOR: [u8; 4] = [2u8, 145u8, 129u8, 7u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.root),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::SolType>::tokenize(&self.leaves),
                    <MultiProof as alloy_sol_types::SolType>::tokenize(&self.proof),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MerkleTree`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum MerkleTreeCalls {
        #[allow(missing_docs)]
        hashLeaf(hashLeafCall),
        #[allow(missing_docs)]
        verify(verifyCall),
        #[allow(missing_docs)]
        verifyMulti(verifyMultiCall),
    }
    #[automatically_derived]
    impl MerkleTreeCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [2u8, 145u8, 129u8, 7u8],
            [113u8, 5u8, 19u8, 84u8],
            [250u8, 214u8, 228u8, 136u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MerkleTreeCalls {
        const NAME: &'static str = "MerkleTreeCalls";
        const MIN_DATA_LENGTH: usize = 96usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::hashLeaf(_) => <hashLeafCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::verify(_) => <verifyCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::verifyMulti(_) => {
                    <verifyMultiCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MerkleTreeCalls>] = &[
                {
                    fn verifyMulti(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MerkleTreeCalls> {
                        <verifyMultiCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MerkleTreeCalls::verifyMulti)
                    }
                    verifyMulti
                },
                {
                    fn verify(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MerkleTreeCalls> {
                        <verifyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MerkleTreeCalls::verify)
                    }
                    verify
                },
                {
                    fn hashLeaf(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MerkleTreeCalls> {
                        <hashLeafCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MerkleTreeCalls::hashLeaf)
                    }
                    hashLeaf
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::hashLeaf(inner) => {
                    <hashLeafCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::verify(inner) => {
                    <verifyCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::verifyMulti(inner) => {
                    <verifyMultiCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::hashLeaf(inner) => {
                    <hashLeafCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::verify(inner) => {
                    <verifyCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::verifyMulti(inner) => {
                    <verifyMultiCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`MerkleTree`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum MerkleTreeErrors {
        #[allow(missing_docs)]
        MerkleProofInvalidMultiproof(MerkleProofInvalidMultiproof),
    }
    #[automatically_derived]
    impl MerkleTreeErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[53u8, 20u8, 4u8, 146u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MerkleTreeErrors {
        const NAME: &'static str = "MerkleTreeErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::MerkleProofInvalidMultiproof(_) => {
                    <MerkleProofInvalidMultiproof as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MerkleTreeErrors>] = &[
                {
                    fn MerkleProofInvalidMultiproof(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MerkleTreeErrors> {
                        <MerkleProofInvalidMultiproof as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MerkleTreeErrors::MerkleProofInvalidMultiproof)
                    }
                    MerkleProofInvalidMultiproof
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::MerkleProofInvalidMultiproof(inner) => {
                    <MerkleProofInvalidMultiproof as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::MerkleProofInvalidMultiproof(inner) => {
                    <MerkleProofInvalidMultiproof as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MerkleTree`](self) contract instance.

See the [wrapper's documentation](`MerkleTreeInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MerkleTreeInstance<T, P, N> {
        MerkleTreeInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MerkleTreeInstance<T, P, N>>,
    > {
        MerkleTreeInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        MerkleTreeInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`MerkleTree`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MerkleTree`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MerkleTreeInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MerkleTreeInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MerkleTreeInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MerkleTreeInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MerkleTree`](self) contract instance.

See the [wrapper's documentation](`MerkleTreeInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MerkleTreeInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MerkleTreeInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MerkleTreeInstance<T, P, N> {
            MerkleTreeInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MerkleTreeInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`hashLeaf`] function.
        pub fn hashLeaf(
            &self,
            prefix: alloy::sol_types::private::Bytes,
            leaf: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, hashLeafCall, N> {
            self.call_builder(&hashLeafCall { prefix, leaf })
        }
        ///Creates a new call builder for the [`verify`] function.
        pub fn verify(
            &self,
            root: alloy::sol_types::private::FixedBytes<32>,
            leaf: alloy::sol_types::private::FixedBytes<32>,
            proof: <Proof as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, verifyCall, N> {
            self.call_builder(&verifyCall { root, leaf, proof })
        }
        ///Creates a new call builder for the [`verifyMulti`] function.
        pub fn verifyMulti(
            &self,
            root: alloy::sol_types::private::FixedBytes<32>,
            leaves: alloy::sol_types::private::Vec<
                alloy::sol_types::private::FixedBytes<32>,
            >,
            proof: <MultiProof as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, verifyMultiCall, N> {
            self.call_builder(
                &verifyMultiCall {
                    root,
                    leaves,
                    proof,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MerkleTreeInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
