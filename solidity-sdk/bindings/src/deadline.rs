/**

Generated by the following Solidity interface...
```solidity
interface Deadline {}
```

...which was generated by the following JSON ABI:
```json
[]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod Deadline {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x61024b610052600b82828239805160001a6073146045577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80634bb4a6271461004557806385f3c36a1461006e575b600080fd5b81801561005157600080fd5b5061006c600480360381019061006791906101f4565b610097565b005b81801561007a57600080fd5b50610095600480360381019061009091906101f4565b610128565b005b7fd3e77021f6e45491cee4ca3334ef9c72d7557b72b384eca2bf1a57974d46ffde60001c73ffffffffffffffffffffffffffffffffffffffff16634bb4a627826040518263ffffffff1660e01b81526004016100f39190610230565b600060405180830381600087803b15801561010d57600080fd5b505af1158015610121573d6000803e3d6000fd5b5050505050565b7fd3e77021f6e45491cee4ca3334ef9c72d7557b72b384eca2bf1a57974d46ffde60001c73ffffffffffffffffffffffffffffffffffffffff166385f3c36a826040518263ffffffff1660e01b81526004016101849190610230565b600060405180830381600087803b15801561019e57600080fd5b505af11580156101b2573d6000803e3d6000fd5b5050505050565b600080fd5b6000819050919050565b6101d1816101be565b81146101dc57600080fd5b50565b6000813590506101ee816101c8565b92915050565b60006020828403121561020a576102096101b9565b5b6000610218848285016101df565b91505092915050565b61022a816101be565b82525050565b60006020820190506102456000830184610221565b9291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x02Ka\0R`\x0B\x82\x82\x829\x80Q`\0\x1A`s\x14`EW\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\0`\x04R`$`\0\xFD[0`\0R`s\x81S\x82\x81\xF3\xFEs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\0@W`\x005`\xE0\x1C\x80cK\xB4\xA6'\x14a\0EW\x80c\x85\xF3\xC3j\x14a\0nW[`\0\x80\xFD[\x81\x80\x15a\0QW`\0\x80\xFD[Pa\0l`\x04\x806\x03\x81\x01\x90a\0g\x91\x90a\x01\xF4V[a\0\x97V[\0[\x81\x80\x15a\0zW`\0\x80\xFD[Pa\0\x95`\x04\x806\x03\x81\x01\x90a\0\x90\x91\x90a\x01\xF4V[a\x01(V[\0[\x7F\xD3\xE7p!\xF6\xE4T\x91\xCE\xE4\xCA34\xEF\x9Cr\xD7U{r\xB3\x84\xEC\xA2\xBF\x1AW\x97MF\xFF\xDE`\0\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cK\xB4\xA6'\x82`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\0\xF3\x91\x90a\x020V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x01\rW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x01!W=`\0\x80>=`\0\xFD[PPPPPV[\x7F\xD3\xE7p!\xF6\xE4T\x91\xCE\xE4\xCA34\xEF\x9Cr\xD7U{r\xB3\x84\xEC\xA2\xBF\x1AW\x97MF\xFF\xDE`\0\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x85\xF3\xC3j\x82`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x01\x84\x91\x90a\x020V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x01\x9EW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x01\xB2W=`\0\x80>=`\0\xFD[PPPPPV[`\0\x80\xFD[`\0\x81\x90P\x91\x90PV[a\x01\xD1\x81a\x01\xBEV[\x81\x14a\x01\xDCW`\0\x80\xFD[PV[`\0\x815\x90Pa\x01\xEE\x81a\x01\xC8V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x02\nWa\x02\ta\x01\xB9V[[`\0a\x02\x18\x84\x82\x85\x01a\x01\xDFV[\x91PP\x92\x91PPV[a\x02*\x81a\x01\xBEV[\x82RPPV[`\0` \x82\x01\x90Pa\x02E`\0\x83\x01\x84a\x02!V[\x92\x91PPV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80634bb4a6271461004557806385f3c36a1461006e575b600080fd5b81801561005157600080fd5b5061006c600480360381019061006791906101f4565b610097565b005b81801561007a57600080fd5b50610095600480360381019061009091906101f4565b610128565b005b7fd3e77021f6e45491cee4ca3334ef9c72d7557b72b384eca2bf1a57974d46ffde60001c73ffffffffffffffffffffffffffffffffffffffff16634bb4a627826040518263ffffffff1660e01b81526004016100f39190610230565b600060405180830381600087803b15801561010d57600080fd5b505af1158015610121573d6000803e3d6000fd5b5050505050565b7fd3e77021f6e45491cee4ca3334ef9c72d7557b72b384eca2bf1a57974d46ffde60001c73ffffffffffffffffffffffffffffffffffffffff166385f3c36a826040518263ffffffff1660e01b81526004016101849190610230565b600060405180830381600087803b15801561019e57600080fd5b505af11580156101b2573d6000803e3d6000fd5b5050505050565b600080fd5b6000819050919050565b6101d1816101be565b81146101dc57600080fd5b50565b6000813590506101ee816101c8565b92915050565b60006020828403121561020a576102096101b9565b5b6000610218848285016101df565b91505092915050565b61022a816101be565b82525050565b60006020820190506102456000830184610221565b9291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\0@W`\x005`\xE0\x1C\x80cK\xB4\xA6'\x14a\0EW\x80c\x85\xF3\xC3j\x14a\0nW[`\0\x80\xFD[\x81\x80\x15a\0QW`\0\x80\xFD[Pa\0l`\x04\x806\x03\x81\x01\x90a\0g\x91\x90a\x01\xF4V[a\0\x97V[\0[\x81\x80\x15a\0zW`\0\x80\xFD[Pa\0\x95`\x04\x806\x03\x81\x01\x90a\0\x90\x91\x90a\x01\xF4V[a\x01(V[\0[\x7F\xD3\xE7p!\xF6\xE4T\x91\xCE\xE4\xCA34\xEF\x9Cr\xD7U{r\xB3\x84\xEC\xA2\xBF\x1AW\x97MF\xFF\xDE`\0\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cK\xB4\xA6'\x82`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\0\xF3\x91\x90a\x020V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x01\rW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x01!W=`\0\x80>=`\0\xFD[PPPPPV[\x7F\xD3\xE7p!\xF6\xE4T\x91\xCE\xE4\xCA34\xEF\x9Cr\xD7U{r\xB3\x84\xEC\xA2\xBF\x1AW\x97MF\xFF\xDE`\0\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x85\xF3\xC3j\x82`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x01\x84\x91\x90a\x020V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x01\x9EW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x01\xB2W=`\0\x80>=`\0\xFD[PPPPPV[`\0\x80\xFD[`\0\x81\x90P\x91\x90PV[a\x01\xD1\x81a\x01\xBEV[\x81\x14a\x01\xDCW`\0\x80\xFD[PV[`\0\x815\x90Pa\x01\xEE\x81a\x01\xC8V[\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x02\nWa\x02\ta\x01\xB9V[[`\0a\x02\x18\x84\x82\x85\x01a\x01\xDFV[\x91PP\x92\x91PPV[a\x02*\x81a\x01\xBEV[\x82RPPV[`\0` \x82\x01\x90Pa\x02E`\0\x83\x01\x84a\x02!V[\x92\x91PPV",
    );
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Deadline`](self) contract instance.

See the [wrapper's documentation](`DeadlineInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> DeadlineInstance<T, P, N> {
        DeadlineInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<DeadlineInstance<T, P, N>>,
    > {
        DeadlineInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        DeadlineInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Deadline`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Deadline`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct DeadlineInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for DeadlineInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("DeadlineInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DeadlineInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Deadline`](self) contract instance.

See the [wrapper's documentation](`DeadlineInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<DeadlineInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> DeadlineInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> DeadlineInstance<T, P, N> {
            DeadlineInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DeadlineInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DeadlineInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
