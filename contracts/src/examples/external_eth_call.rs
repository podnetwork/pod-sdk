use alloy_sol_types::sol;

sol! {
    // solc --optimize --bin pod-sdk/examples/ExternalEthCall.sol --evm-version berlin
    #[sol(rpc, bytecode = "6080604052348015600f57600080fd5b5061078b8061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638d13eb7d1461003b578063bfefe02714610060575b600080fd5b61004e610049366004610415565b610073565b60405190815260200160405180910390f35b61004e61006e366004610415565b6101e3565b600080826000015183602001516040516020016100919291906105bb565b60408051601f1981840301815291905290507f7a15f80d7c4f6713e4b96ee58712e00c337971f876621fab9326908fdf330d77600080738712e00c337971f876621fab9326908fdf330d775a856040516100eb9190610653565b6000604051808303818686fa925050503d8060008114610127576040519150601f19603f3d011682016040523d82523d6000602084013e61012c565b606091505b50915091508161017c5760405162461bcd60e51b8152602060048201526016602482015275141c9958dbdb5c1a5b194818d85b1b0819985a5b195960521b60448201526064015b60405180910390fd5b600081806020019051810190610192919061067f565b905060008160c001518260a001518360800151846060015185604001516101b99190610715565b6101c39190610715565b6101cd9190610715565b6101d79190610715565b98975050505050505050565b600080826000015183602001516040516020016102019291906105bb565b60408051601f1981840301815291905290507f7a15f80d7c4f6713e4b96ee58712e00c337971f876621fab9326908fdf330d77600080738712e00c337971f876621fab9326908fdf330d775a8560405161025b9190610653565b6000604051808303818686fa925050503d8060008114610297576040519150601f19603f3d011682016040523d82523d6000602084013e61029c565b606091505b5091509150816102e75760405162461bcd60e51b8152602060048201526016602482015275141c9958dbdb5c1a5b194818d85b1b0819985a5b195960521b6044820152606401610173565b6000818060200190518101906102fd919061073c565b979650505050505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561034157610341610308565b60405290565b60405160c0810167ffffffffffffffff8111828210171561034157610341610308565b80356001600160a01b038116811461038157600080fd5b919050565b600082601f83011261039757600080fd5b813567ffffffffffffffff8111156103b1576103b1610308565b604051601f8201601f19908116603f0116810167ffffffffffffffff811182821017156103e0576103e0610308565b6040528181528382016020018510156103f857600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561042757600080fd5b813567ffffffffffffffff81111561043e57600080fd5b82016040818503121561045057600080fd5b61045861031e565b81358152602082013567ffffffffffffffff81111561047657600080fd5b91909101906040828603121561048b57600080fd5b61049361031e565b823567ffffffffffffffff8111156104aa57600080fd5b830160c081880312156104bc57600080fd5b6104c4610347565b6104cd8261036a565b81526104db6020830161036a565b602082015260408281013590820152606080830135908201526080808301359082015260a082013567ffffffffffffffff81111561051857600080fd5b61052489828501610386565b60a083015250825250602083013567ffffffffffffffff81111561054757600080fd5b61055387828601610386565b60208301525080602083015250809250505092915050565b60005b8381101561058657818101518382015260200161056e565b50506000910152565b600081518084526105a781602086016020860161056b565b601f01601f19169290920160200192915050565b828152604060208201526000825160408084015260018060a01b03815116608084015260018060a01b0360208201511660a0840152604081015160c0840152606081015160e0840152608081015161010084015260a0810151905060c061012084015261062c61014084018261058f565b90506020840151603f19848303016060850152610649828261058f565b9695505050505050565b6000825161066581846020870161056b565b9190910192915050565b8051801515811461038157600080fd5b600060e082840312801561069257600080fd5b5060405160009060e0810167ffffffffffffffff811182821017156106b9576106b9610308565b6040526106c58461066f565b81526106d36020850161066f565b602082015260408481015190820152606080850151908201526080808501519082015260a0808501519082015260c09384015193810193909352509092915050565b8082018082111561073657634e487b7160e01b600052601160045260246000fd5b92915050565b60006020828403121561074e57600080fd5b505191905056fea264697066735822122038b34adff878c35d4b0383dddafd448805b999d9ce190f5014665866fa7aa12a64736f6c634300081d0033")]
    contract ExternalEthCall {
        struct Transaction {
            address from;
            address to;
            uint256 gas;
            uint256 gasPrice;
            uint256 value;
            bytes data;
        }

        struct EthCallArgs {
            Transaction transaction;
            bytes blockNumber;
        }

        struct ExternalEthCallArgs {
            uint256 chainId;
            EthCallArgs ethCallArgs;
        }

        struct ExampleResponseFromPrecompile {
            bool isStakingPaused;
            bool isStakingLimitSet;
            uint256 currentStakeLimit;
            uint256 maxStakeLimit;
            uint256 maxStakeLimitGrowthBlocks;
            uint256 prevStakeLimit;
            uint256 prevStakeBlockNumber;
        }

        function externalEthCallBalanceOf(
            ExternalEthCallArgs memory args
        ) public view returns (uint256) {
            bytes memory inputData = abi.encode(args.chainId, args.ethCallArgs);

            address precompileAddress = address(
                uint160(uint256(keccak256("POD_EXTERNAL_ETH_CALL")))
            );

            (bool success, bytes memory output) = precompileAddress.staticcall{
                gas: gasleft()
            }(inputData);
            require(success, "Precompile call failed");

            uint256 balance = abi.decode(output, (uint256));

            return balance;
        }

        function externalEthCallGetStruct(
            ExternalEthCallArgs memory args
        ) public view returns (uint256) {
            bytes memory inputData = abi.encode(args.chainId, args.ethCallArgs);

            address precompileAddress = address(
                uint160(uint256(keccak256("POD_EXTERNAL_ETH_CALL")))
            );

            (bool success, bytes memory output) = precompileAddress.staticcall{
                gas: gasleft()
            }(inputData);
            require(success, "Precompile call failed");

            ExampleResponseFromPrecompile memory response = abi.decode(
                output,
                (ExampleResponseFromPrecompile)
            );

            uint256 sum = response.currentStakeLimit +
                response.maxStakeLimit +
                response.maxStakeLimitGrowthBlocks +
                response.prevStakeLimit +
                response.prevStakeBlockNumber;

            return sum;
        }
    }
}
